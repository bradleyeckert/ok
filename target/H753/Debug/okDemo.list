
okDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcb8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800df58  0800df58  0000ef58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e290  0800e290  0000f290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e298  0800e298  0000f298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e29c  0800e29c  0000f29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000008c  24000000  0800e2a0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00012d48  24000090  0800e32c  00010090  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24012dd8  0800e32c  00010dd8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000258b0  00000000  00000000  000100ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b86  00000000  00000000  0003596a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001e70  00000000  00000000  0003a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000179b  00000000  00000000  0003c360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dbd1  00000000  00000000  0003dafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026116  00000000  00000000  0007b6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00184f96  00000000  00000000  000a17e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00226778  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008c3c  00000000  00000000  002267bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005c  00000000  00000000  0022f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800df40 	.word	0x0800df40

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	0800df40 	.word	0x0800df40

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <UARTx_init>:

#include <string.h>
#include <stdint.h>
#include "okuart.h"

void UARTx_init (UART_t *handle, USART_TypeDef *device) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	memset(handle, 0, sizeof(UART_t));
 80006b6:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 80006ba:	2100      	movs	r1, #0
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f00c fd98 	bl	800d1f2 <memset>
	handle->dev = device;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	601a      	str	r2, [r3, #0]
	device->CR1 |= USART_CR1_RXNEIE;
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f043 0220 	orr.w	r2, r3, #32
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	601a      	str	r2, [r3, #0]
	device->CR1 |= USART_CR1_UE;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f043 0201 	orr.w	r2, r3, #1
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	601a      	str	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <UARTx_IRQHandler>:

void UARTx_IRQHandler(UART_t *uart) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	if (uart->dev->ISR & USART_ISR_RXNE_RXFNE) {
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 0320 	and.w	r3, r3, #32
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d01b      	beq.n	8000736 <UARTx_IRQHandler+0x4e>
    	uart->r_buffer[uart->r_head++] = uart->dev->RDR;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	b2d1      	uxtb	r1, r2
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	f882 1204 	strb.w	r1, [r2, #516]	@ 0x204
 8000714:	4619      	mov	r1, r3
 8000716:	b2c2      	uxtb	r2, r0
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	440b      	add	r3, r1
 800071c:	711a      	strb	r2, [r3, #4]
    	if (uart->r_head == uart->r_tail)		// overflow detected
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f893 2204 	ldrb.w	r2, [r3, #516]	@ 0x204
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 800072a:	429a      	cmp	r2, r3
 800072c:	d103      	bne.n	8000736 <UARTx_IRQHandler+0x4e>
    		uart->r_overflow = 1;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2201      	movs	r2, #1
 8000732:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
#ifndef READING_RDR_CLEARS_RXNE
		uart->dev->ISR &= ~USART_ISR_RXNE_RXFNE;
#endif
    }
    if (uart->dev->ISR & USART_ISR_TXE_TXFNF) {
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	69db      	ldr	r3, [r3, #28]
 800073c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000740:	2b00      	cmp	r3, #0
 8000742:	d020      	beq.n	8000786 <UARTx_IRQHandler+0x9e>
    	if (uart->t_head == uart->t_tail) {		// disable TX interrupt if done
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f893 2206 	ldrb.w	r2, [r3, #518]	@ 0x206
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8000750:	429a      	cmp	r2, r3
 8000752:	d108      	bne.n	8000766 <UARTx_IRQHandler+0x7e>
    		uart->dev->CR1 &= ~USART_CR1_TXEIE;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000762:	601a      	str	r2, [r3, #0]
#ifndef WRITING_TDR_CLEARS_TXFNF
    		uart->dev->ISR &= ~USART_ISR_TXE_TXFNF;
#endif
    	}
    }
}
 8000764:	e00f      	b.n	8000786 <UARTx_IRQHandler+0x9e>
    		uart->dev->TDR = uart->t_buffer[uart->t_tail++];
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 800076c:	1c5a      	adds	r2, r3, #1
 800076e:	b2d1      	uxtb	r1, r2
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	f882 1207 	strb.w	r1, [r2, #519]	@ 0x207
 8000776:	461a      	mov	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4413      	add	r3, r2
 800077c:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <UARTx_headroom>:

int UARTx_headroom(UART_t *uart) {
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
	return uart->t_tail - uart->t_head;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 80007a0:	461a      	mov	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80007a8:	1ad3      	subs	r3, r2, r3
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <UARTx_putc>:

/* Add c to a soft FIFO and rely on the ISR to send it from the FIFO.
 * The TXEIE flag indicates whether the FIFO is in play.
 */
void UARTx_putc(UART_t *uart, uint8_t c) {
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	460b      	mov	r3, r1
 80007c0:	70fb      	strb	r3, [r7, #3]
 	while (UARTx_headroom(uart) == 1) {} 		// buffer is full
 80007c2:	bf00      	nop
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff ffe4 	bl	8000792 <UARTx_headroom>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d0f9      	beq.n	80007c4 <UARTx_putc+0xe>
	uart->t_buffer[uart->t_head++] = c;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	b2d1      	uxtb	r1, r2
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	f882 1206 	strb.w	r1, [r2, #518]	@ 0x206
 80007e0:	461a      	mov	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4413      	add	r3, r2
 80007e6:	78fa      	ldrb	r2, [r7, #3]
 80007e8:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
	if ((uart->dev->CR1 & USART_CR1_TXEIE) == 0) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d10f      	bne.n	800081a <UARTx_putc+0x64>
		uart->dev->ISR |= USART_ISR_TXE_TXFNF;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	69da      	ldr	r2, [r3, #28]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000808:	61da      	str	r2, [r3, #28]
	 	uart->dev->CR1 |= USART_CR1_TXEIE;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000818:	601a      	str	r2, [r3, #0]
	}
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <UARTx_received>:

void UARTx_puts(UART_t *uart, const uint8_t *src, int length) {
	while (length--) UARTx_putc(uart, *src++);
}

int UARTx_received(UART_t *uart) {
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
	return uart->r_head - uart->r_tail;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8000830:	461a      	mov	r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8000838:	1ad3      	subs	r3, r2, r3
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <UARTx_getc>:

int UARTx_getc(UART_t *uart) {
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
	if (UARTx_received(uart) == 0) return -1;
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ffe7 	bl	8000822 <UARTx_received>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d102      	bne.n	8000860 <UARTx_getc+0x1a>
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	e00b      	b.n	8000878 <UARTx_getc+0x32>
	return uart->r_buffer[uart->r_tail++];
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	b2d1      	uxtb	r1, r2
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	f882 1205 	strb.w	r1, [r2, #517]	@ 0x205
 8000870:	461a      	mov	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	791b      	ldrb	r3, [r3, #4]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800088a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800088e:	2b00      	cmp	r3, #0
 8000890:	db0b      	blt.n	80008aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	f003 021f 	and.w	r2, r3, #31
 8000898:	4907      	ldr	r1, [pc, #28]	@ (80008b8 <__NVIC_EnableIRQ+0x38>)
 800089a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800089e:	095b      	lsrs	r3, r3, #5
 80008a0:	2001      	movs	r0, #1
 80008a2:	fa00 f202 	lsl.w	r2, r0, r2
 80008a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100

080008bc <USART3_IRQHandler>:

#include <stdint.h>
#include "UARTs/okuart.h"

UART_t uart3;
void USART3_IRQHandler(void) { UARTx_IRQHandler(&uart3); }
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4802      	ldr	r0, [pc, #8]	@ (80008cc <USART3_IRQHandler+0x10>)
 80008c2:	f7ff ff11 	bl	80006e8 <UARTx_IRQHandler>
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	240000ac 	.word	0x240000ac

080008d0 <UART_putc>:
void UART_putc(uint8_t c)  { UARTx_putc(&uart3, c); }
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	4619      	mov	r1, r3
 80008de:	4803      	ldr	r0, [pc, #12]	@ (80008ec <UART_putc+0x1c>)
 80008e0:	f7ff ff69 	bl	80007b6 <UARTx_putc>
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	240000ac 	.word	0x240000ac

080008f0 <UART_getc>:
void UART_puts(const uint8_t *src, int length) { UARTx_puts(&uart3, src, length); }
uint8_t UART_getc(void)  { return UARTx_getc(&uart3); }
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	4803      	ldr	r0, [pc, #12]	@ (8000904 <UART_getc+0x14>)
 80008f6:	f7ff ffa6 	bl	8000846 <UARTx_getc>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	240000ac 	.word	0x240000ac

08000908 <UART_received>:
uint8_t UART_received(void)  { return UARTx_received(&uart3); }
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
 800090c:	4803      	ldr	r0, [pc, #12]	@ (800091c <UART_received+0x14>)
 800090e:	f7ff ff88 	bl	8000822 <UARTx_received>
 8000912:	4603      	mov	r3, r0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	240000ac 	.word	0x240000ac

08000920 <UpdateKeySet>:
/*
Write the key and return the address of the key (it may have changed)
Return NULL if key cannot be updated
*/

static uint8_t * UpdateKeySet(uint8_t* keyset) {
 8000920:	b4f0      	push	{r4, r5, r6, r7}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
    memcpy(my_keys, keyset, MOLE_PASSCODE_LENGTH);
 8000928:	4a0b      	ldr	r2, [pc, #44]	@ (8000958 <UpdateKeySet+0x38>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	461c      	mov	r4, r3
 800092e:	4616      	mov	r6, r2
 8000930:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 8000934:	4635      	mov	r5, r6
 8000936:	4623      	mov	r3, r4
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	6859      	ldr	r1, [r3, #4]
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000942:	3410      	adds	r4, #16
 8000944:	3610      	adds	r6, #16
 8000946:	4564      	cmp	r4, ip
 8000948:	d1f4      	bne.n	8000934 <UpdateKeySet+0x14>
	return my_keys;
 800094a:	4b03      	ldr	r3, [pc, #12]	@ (8000958 <UpdateKeySet+0x38>)
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bcf0      	pop	{r4, r5, r6, r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	240002b8 	.word	0x240002b8

0800095c <BoilerHandler>:

// should never happen
static void BoilerHandler(const uint8_t *src) {}
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <StopVMthread>:

//------------------------------------------------------------------------------
// VM

void StopVMthread(vm_ctx *ctx){} // no thread to stop
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <BCIsendChar>:
VMinst_t CodeMem[CODESIZE];

static uint8_t  responseBuf[MaxBCIresponseSize];
static uint16_t responseLen;
// These functions are used by the BCI to return a response
void BCIsendChar(int id, uint8_t c) {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
    responseBuf[responseLen++] = c;
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <BCIsendChar+0x2c>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	1c5a      	adds	r2, r3, #1
 8000996:	b291      	uxth	r1, r2
 8000998:	4a05      	ldr	r2, [pc, #20]	@ (80009b0 <BCIsendChar+0x2c>)
 800099a:	8011      	strh	r1, [r2, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	4a05      	ldr	r2, [pc, #20]	@ (80009b4 <BCIsendChar+0x30>)
 80009a0:	78fb      	ldrb	r3, [r7, #3]
 80009a2:	5453      	strb	r3, [r2, r1]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	2400e91e 	.word	0x2400e91e
 80009b4:	2400e518 	.word	0x2400e518

080009b8 <BCIsendInit>:
void BCIsendInit(int id) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    responseLen = 0;
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <BCIsendInit+0x30>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	801a      	strh	r2, [r3, #0]
    BCIsendChar(id, id & 0xFF);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	4619      	mov	r1, r3
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff ffd9 	bl	8000984 <BCIsendChar>
    BCIsendChar(id, id >> 8);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	121b      	asrs	r3, r3, #8
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4619      	mov	r1, r3
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ffd2 	bl	8000984 <BCIsendChar>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2400e91e 	.word	0x2400e91e

080009ec <BCIsendFinal>:
void BCIsendFinal(int id) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
    moleSend(&TargetPort, (const uint8_t*)&responseBuf, responseLen);
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <BCIsendFinal+0x20>)
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4905      	ldr	r1, [pc, #20]	@ (8000a10 <BCIsendFinal+0x24>)
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <BCIsendFinal+0x28>)
 80009fe:	f002 ffdf 	bl	80039c0 <moleSend>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2400e91e 	.word	0x2400e91e
 8000a10:	2400e518 	.word	0x2400e518
 8000a14:	24002438 	.word	0x24002438

08000a18 <BCItransmit>:

static void BCItransmit(const uint8_t *src, int length) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
    ctx->admin = TargetPort.adminOK;
 8000a22:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <BCItransmit+0x34>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <BCItransmit+0x38>)
 8000a28:	f892 20d9 	ldrb.w	r2, [r2, #217]	@ 0xd9
 8000a2c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    BCIhandler(ctx, &src[2], length);   // skip the CPUCORE id
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <BCItransmit+0x34>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3302      	adds	r3, #2
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	b292      	uxth	r2, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f000 fa1f 	bl	8000e80 <BCIhandler>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	24000000 	.word	0x24000000
 8000a50:	24002438 	.word	0x24002438

08000a54 <uartCharOutput>:

static void uartCharOutput(uint8_t c) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
    UART_putc(c);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff35 	bl	80008d0 <UART_putc>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <get8debug>:

void get8debug(uint8_t c){
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	71fb      	strb	r3, [r7, #7]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <TargetInit>:

int TargetInit(void) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af06      	add	r7, sp, #24
    ctx->TextMem = TextMem;         // flash sector for read-only data
 8000a8a:	4b28      	ldr	r3, [pc, #160]	@ (8000b2c <TargetInit+0xa8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <TargetInit+0xac>)
 8000a96:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
    ctx->CodeMem = CodeMem;         // flash sector for code
 8000a9a:	4b24      	ldr	r3, [pc, #144]	@ (8000b2c <TargetInit+0xa8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4b23      	ldr	r3, [pc, #140]	@ (8000b34 <TargetInit+0xb0>)
 8000aa6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    memset(TextMem, BLANK_FLASH_BYTE, sizeof(TextMem));
 8000aaa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000aae:	21ff      	movs	r1, #255	@ 0xff
 8000ab0:	481f      	ldr	r0, [pc, #124]	@ (8000b30 <TargetInit+0xac>)
 8000ab2:	f00c fb9e 	bl	800d1f2 <memset>
    memset(CodeMem, BLANK_FLASH_BYTE, sizeof(CodeMem));
 8000ab6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aba:	21ff      	movs	r1, #255	@ 0xff
 8000abc:	481d      	ldr	r0, [pc, #116]	@ (8000b34 <TargetInit+0xb0>)
 8000abe:	f00c fb98 	bl	800d1f2 <memset>
    // set up the mole ports
    memcpy(my_keys, default_keys, sizeof(my_keys));
 8000ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8000b38 <TargetInit+0xb4>)
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <TargetInit+0xb8>)
 8000ac6:	4614      	mov	r4, r2
 8000ac8:	461d      	mov	r5, r3
 8000aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ada:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    moleNoPorts();
 8000ade:	f002 fbe5 	bl	80032ac <moleNoPorts>
    int ior = moleAddPort(&TargetPort, TargetBoilerSrc, MOLE_PROTOCOL, "TARGET", 17,
 8000ae2:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <TargetInit+0xbc>)
 8000ae4:	9304      	str	r3, [sp, #16]
 8000ae6:	4b17      	ldr	r3, [pc, #92]	@ (8000b44 <TargetInit+0xc0>)
 8000ae8:	9303      	str	r3, [sp, #12]
 8000aea:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <TargetInit+0xc4>)
 8000aec:	9302      	str	r3, [sp, #8]
 8000aee:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <TargetInit+0xc8>)
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	2311      	movs	r3, #17
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <TargetInit+0xcc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	4916      	ldr	r1, [pc, #88]	@ (8000b54 <TargetInit+0xd0>)
 8000afc:	4816      	ldr	r0, [pc, #88]	@ (8000b58 <TargetInit+0xd4>)
 8000afe:	f002 fbe7 	bl	80032d0 <moleAddPort>
 8000b02:	6078      	str	r0, [r7, #4]
                  BoilerHandler, BCItransmit, uartCharOutput, UpdateKeySet);
    if (ior) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <TargetInit+0x8a>
        return 1;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e009      	b.n	8000b22 <TargetInit+0x9e>
    }
    moleNewKeys(&TargetPort, my_keys);
 8000b0e:	490a      	ldr	r1, [pc, #40]	@ (8000b38 <TargetInit+0xb4>)
 8000b10:	4811      	ldr	r0, [pc, #68]	@ (8000b58 <TargetInit+0xd4>)
 8000b12:	f002 fb85 	bl	8003220 <moleNewKeys>
    VMreset(ctx);
 8000b16:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <TargetInit+0xa8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 fb82 	bl	8002224 <VMreset>
    return 0;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bdb0      	pop	{r4, r5, r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	24000000 	.word	0x24000000
 8000b30:	24002518 	.word	0x24002518
 8000b34:	2400a518 	.word	0x2400a518
 8000b38:	240002b8 	.word	0x240002b8
 8000b3c:	0800df78 	.word	0x0800df78
 8000b40:	08000921 	.word	0x08000921
 8000b44:	08000a55 	.word	0x08000a55
 8000b48:	08000a19 	.word	0x08000a19
 8000b4c:	0800095d 	.word	0x0800095d
 8000b50:	0800df58 	.word	0x0800df58
 8000b54:	0800df60 	.word	0x0800df60
 8000b58:	24002438 	.word	0x24002438

08000b5c <ApplicationStep>:

int tally;
uint8_t TX_Buffer [] = "A" ; // DATA to send
extern SPI_HandleTypeDef hspi4;

void ApplicationStep(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
    if (ctx->status == BCI_STATUS_RUNNING) {
 8000b62:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <ApplicationStep+0x60>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000b6a:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d107      	bne.n	8000b82 <ApplicationStep+0x26>
        VMsteps(ctx, 512); // ~100 usec, swamp the cache miss penalty
 8000b72:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <ApplicationStep+0x60>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 ff88 	bl	8001a90 <VMsteps>
 8000b80:	e00c      	b.n	8000b9c <ApplicationStep+0x40>
    } else {
    	HAL_Delay(1);
 8000b82:	2001      	movs	r0, #1
 8000b84:	f004 fdb8 	bl	80056f8 <HAL_Delay>
    }
    while (UART_received()) {
 8000b88:	e008      	b.n	8000b9c <ApplicationStep+0x40>
        uint8_t c = UART_getc();
 8000b8a:	f7ff feb1 	bl	80008f0 <UART_getc>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
        molePutc(&TargetPort, c);
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	4619      	mov	r1, r3
 8000b96:	480a      	ldr	r0, [pc, #40]	@ (8000bc0 <ApplicationStep+0x64>)
 8000b98:	f002 fc46 	bl	8003428 <molePutc>
    while (UART_received()) {
 8000b9c:	f7ff feb4 	bl	8000908 <UART_received>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f1      	bne.n	8000b8a <ApplicationStep+0x2e>
    }
    HAL_SPI_Transmit(&hspi4, TX_Buffer, 1, 10); //Sending in Blocking mode
 8000ba6:	230a      	movs	r3, #10
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4906      	ldr	r1, [pc, #24]	@ (8000bc4 <ApplicationStep+0x68>)
 8000bac:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <ApplicationStep+0x6c>)
 8000bae:	f009 fcef 	bl	800a590 <HAL_SPI_Transmit>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	24000000 	.word	0x24000000
 8000bc0:	24002438 	.word	0x24002438
 8000bc4:	24000004 	.word	0x24000004
 8000bc8:	24012ac8 	.word	0x24012ac8

08000bcc <ApplicationInit>:

void ApplicationInit(void) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	UARTx_init(&uart3, USART3);
 8000bd2:	490f      	ldr	r1, [pc, #60]	@ (8000c10 <ApplicationInit+0x44>)
 8000bd4:	480f      	ldr	r0, [pc, #60]	@ (8000c14 <ApplicationInit+0x48>)
 8000bd6:	f7ff fd69 	bl	80006ac <UARTx_init>
	NVIC_EnableIRQ(USART3_IRQn); // since you didn't set it in the NVIC in MX
 8000bda:	2027      	movs	r0, #39	@ 0x27
 8000bdc:	f7ff fe50 	bl	8000880 <__NVIC_EnableIRQ>
	TargetInit();
 8000be0:	f7ff ff50 	bl	8000a84 <TargetInit>
	TIM_TypeDef *timer = TIM2;
 8000be4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000be8:	607b      	str	r3, [r7, #4]
	timer->CR1 |= TIM_CR1_CEN;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f043 0201 	orr.w	r2, r3, #1
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	601a      	str	r2, [r3, #0]
	timer->DIER |= TIM_DIER_UIE;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	f043 0201 	orr.w	r2, r3, #1
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 8000c02:	201c      	movs	r0, #28
 8000c04:	f7ff fe3c 	bl	8000880 <__NVIC_EnableIRQ>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40004800 	.word	0x40004800
 8000c14:	240000ac 	.word	0x240000ac

08000c18 <moleTRNG>:

/*
 * DO NOT USE 'rand' in a real application. Use a TRNG instead.
 * Also, verify that the TRNG is working.
 */
int moleTRNG(uint8_t *dest, int length) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	while (length--) *dest++ = rand() & 0xFF;
 8000c22:	e007      	b.n	8000c34 <moleTRNG+0x1c>
 8000c24:	f00c f992 	bl	800cf4c <rand>
 8000c28:	4601      	mov	r1, r0
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	1c5a      	adds	r2, r3, #1
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	b2ca      	uxtb	r2, r1
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	1e5a      	subs	r2, r3, #1
 8000c38:	603a      	str	r2, [r7, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f2      	bne.n	8000c24 <moleTRNG+0xc>
	rand(); // discard every other sample to stymie analysis
 8000c3e:	f00c f985 	bl	800cf4c <rand>
	return 0;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <TIM2_IRQHandler>:

uint32_t msec_counter;

extern void TIM2_IRQHandler(void) {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
	msec_counter++;
 8000c52:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <TIM2_IRQHandler+0x30>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	4a08      	ldr	r2, [pc, #32]	@ (8000c7c <TIM2_IRQHandler+0x30>)
 8000c5a:	6013      	str	r3, [r2, #0]
	TIM_TypeDef *timer = TIM2;
 8000c5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c60:	607b      	str	r3, [r7, #4]
	timer->SR &= ~1;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	f023 0201 	bic.w	r2, r3, #1
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	611a      	str	r2, [r3, #16]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	2400e920 	.word	0x2400e920

08000c80 <get8>:

static const uint8_t *cmd;
static uint16_t len;
void get8debug(uint8_t c);

static uint8_t get8(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
    if (!len) return 0;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <get8+0x40>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <get8+0x12>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e011      	b.n	8000cb6 <get8+0x36>
    len--; uint8_t c = *cmd++;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <get8+0x40>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <get8+0x40>)
 8000c9c:	801a      	strh	r2, [r3, #0]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <get8+0x44>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	4907      	ldr	r1, [pc, #28]	@ (8000cc4 <get8+0x44>)
 8000ca6:	600a      	str	r2, [r1, #0]
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
    get8debug(c);
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff fedd 	bl	8000a6e <get8debug>
    return c;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2400e928 	.word	0x2400e928
 8000cc4:	2400e924 	.word	0x2400e924

08000cc8 <get32>:

static uint32_t get32(void) {           // 32-bit stream data is little-endian
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
    uint32_t r = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; i++) r |= (get8() << (i * 8));
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	e00e      	b.n	8000cf6 <get32+0x2e>
 8000cd8:	f7ff ffd2 	bl	8000c80 <get8>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	dded      	ble.n	8000cd8 <get32+0x10>
    return r;
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <put8>:

static void put8(vm_ctx *ctx, uint8_t c) {
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	70fb      	strb	r3, [r7, #3]
    BCIsendChar(ctx->id, c);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000d18:	f9b3 3138 	ldrsh.w	r3, [r3, #312]	@ 0x138
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	4619      	mov	r1, r3
 8000d22:	4610      	mov	r0, r2
 8000d24:	f7ff fe2e 	bl	8000984 <BCIsendChar>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <putN>:

static void putN(vm_ctx *ctx, uint32_t x, int n) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
    while (n--) {
 8000d3c:	e00e      	b.n	8000d5c <putN+0x2c>
        BCIsendChar(ctx->id, x & 0xFF);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000d44:	f9b3 3138 	ldrsh.w	r3, [r3, #312]	@ 0x138
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4610      	mov	r0, r2
 8000d52:	f7ff fe17 	bl	8000984 <BCIsendChar>
        x >>= 8;
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	60bb      	str	r3, [r7, #8]
    while (n--) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	1e5a      	subs	r2, r3, #1
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1eb      	bne.n	8000d3e <putN+0xe>
    }
}
 8000d66:	bf00      	nop
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <put32>:

static void put32(vm_ctx *ctx, uint32_t x) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
    putN(ctx, x, 4);
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	6839      	ldr	r1, [r7, #0]
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ffd6 	bl	8000d30 <putN>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <waitUntilVMready>:

// VM wrappers

static void waitUntilVMready(vm_ctx *ctx){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    if (ctx->status == BCI_STATUS_STOPPED) return;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000d9a:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d015      	beq.n	8000dce <waitUntilVMready+0x42>
    uint32_t limit = BCI_CYCLE_LIMIT;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <waitUntilVMready+0x50>)
 8000da4:	60fb      	str	r3, [r7, #12]
    StopVMthread(ctx);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fde2 	bl	8000970 <StopVMthread>
    while (limit--) {
 8000dac:	e006      	b.n	8000dbc <waitUntilVMready+0x30>
        if (VMstep(ctx, 0)) return;     // bcisync instruction
 8000dae:	2100      	movs	r1, #0
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 fe83 	bl	8001abc <VMstep>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d10a      	bne.n	8000dd2 <waitUntilVMready+0x46>
    while (limit--) {
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	1e5a      	subs	r2, r3, #1
 8000dc0:	60fa      	str	r2, [r7, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f3      	bne.n	8000dae <waitUntilVMready+0x22>
    }
    VMreset(ctx); // hung
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f001 fa2c 	bl	8002224 <VMreset>
 8000dcc:	e002      	b.n	8000dd4 <waitUntilVMready+0x48>
    if (ctx->status == BCI_STATUS_STOPPED) return;
 8000dce:	bf00      	nop
 8000dd0:	e000      	b.n	8000dd4 <waitUntilVMready+0x48>
        if (VMstep(ctx, 0)) return;     // bcisync instruction
 8000dd2:	bf00      	nop
}
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	00989680 	.word	0x00989680

08000de0 <simulate>:

static int16_t simulate(vm_ctx *ctx, uint32_t xt){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
    if (xt & 0x80000000) {
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	da06      	bge.n	8000dfe <simulate+0x1e>
        PRINTF("\nExecuting single instruction %04x, ", xt & 0x7FFFFFFF);
        VMstep(ctx, xt);                // single instruction
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4619      	mov	r1, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 fe60 	bl	8001abc <VMstep>
 8000dfc:	e01e      	b.n	8000e3c <simulate+0x5c>
    } else {
        PRINTF("\nCalling %04x, ", xt);
        int rdepth = VMgetRP(ctx);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f001 f9f6 	bl	80021f0 <VMgetRP>
 8000e04:	4603      	mov	r3, r0
 8000e06:	60fb      	str	r3, [r7, #12]
        VMstep(ctx, xt | VMI_CALL);     // trigger call to xt
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 fe54 	bl	8001abc <VMstep>
        while (rdepth != VMgetRP(ctx)) {
 8000e14:	e008      	b.n	8000e28 <simulate+0x48>
            VMstep(ctx, 0);             // execute instructions
 8000e16:	2100      	movs	r1, #0
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 fe4f 	bl	8001abc <VMstep>
            if (ctx->ior) break;        // break on error
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d108      	bne.n	8000e3a <simulate+0x5a>
        while (rdepth != VMgetRP(ctx)) {
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f001 f9e1 	bl	80021f0 <VMgetRP>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d1ee      	bne.n	8000e16 <simulate+0x36>
 8000e38:	e000      	b.n	8000e3c <simulate+0x5c>
            if (ctx->ior) break;        // break on error
 8000e3a:	bf00      	nop
        }
        PRINTF("Done simulating ");
    }
    return ctx->ior;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <ValidAddress>:

#define EXEC_STACK_SIZE 16

// read and write are restricted if not in admin mode
static int ValidAddress(vm_ctx *ctx, uint32_t addr) {
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
    return ((ctx->admin == BCI_ADMIN_ACTIVE) ||
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000e5a:	2b55      	cmp	r3, #85	@ 0x55
 8000e5c:	d007      	beq.n	8000e6e <ValidAddress+0x24>
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8000e64:	d305      	bcc.n	8000e72 <ValidAddress+0x28>
           ((addr >= VM_MIN_USERADDRESS) &&
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000e6c:	d201      	bcs.n	8000e72 <ValidAddress+0x28>
    return ((ctx->admin == BCI_ADMIN_ACTIVE) ||
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <ValidAddress+0x2a>
 8000e72:	2300      	movs	r3, #0
            (addr <= VM_MAX_USERADDRESS)));
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <BCIhandler>:

void BCIhandler(vm_ctx *ctx, const uint8_t *src, uint16_t length) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b0a0      	sub	sp, #128	@ 0x80
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	80fb      	strh	r3, [r7, #6]
    BCIsendInit(ctx->id);               // begin a response message
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000e94:	f9b3 3138 	ldrsh.w	r3, [r3, #312]	@ 0x138
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fd8d 	bl	80009b8 <BCIsendInit>
    cmd = src;  len = length;
 8000e9e:	4abb      	ldr	r2, [pc, #748]	@ (800118c <BCIhandler+0x30c>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4aba      	ldr	r2, [pc, #744]	@ (8001190 <BCIhandler+0x310>)
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	8013      	strh	r3, [r2, #0]
    uint32_t ds[EXEC_STACK_SIZE];
    memset(ds, 0, EXEC_STACK_SIZE * sizeof(uint32_t));
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	2240      	movs	r2, #64	@ 0x40
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00c f99d 	bl	800d1f2 <memset>
    uint32_t addr;
    uint32_t x;
    int32_t temp;
    uint64_t ud;
    uint8_t *taddr;
    uint8_t n = get8();
 8000eb8:	f7ff fee2 	bl	8000c80 <get8>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    put8(ctx, BCI_BEGIN);               // indicate a BCI response message
 8000ec2:	21fc      	movs	r1, #252	@ 0xfc
 8000ec4:	68f8      	ldr	r0, [r7, #12]
 8000ec6:	f7ff ff1e 	bl	8000d06 <put8>
    ctx->ior = 0;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	855a      	strh	r2, [r3, #42]	@ 0x2a
    uint8_t status0 = ctx->status;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000ed6:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 8000eda:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    switch (n) {
 8000ede:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d002      	beq.n	8000eec <BCIhandler+0x6c>
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d037      	beq.n	8000f5a <BCIhandler+0xda>
 8000eea:	e062      	b.n	8000fb2 <BCIhandler+0x132>
    case BCIFN_READ:
        put8(ctx, BCIFN_READ);
 8000eec:	2101      	movs	r1, #1
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff ff09 	bl	8000d06 <put8>
        n = get8();
 8000ef4:	f7ff fec4 	bl	8000c80 <get8>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        addr = get32();
 8000efe:	f7ff fee3 	bl	8000cc8 <get32>
 8000f02:	67f8      	str	r0, [r7, #124]	@ 0x7c
        put8(ctx, n);
 8000f04:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000f08:	4619      	mov	r1, r3
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f7ff fefb 	bl	8000d06 <put8>
        while (n--) {
 8000f10:	e01b      	b.n	8000f4a <BCIhandler+0xca>
            if (ValidAddress(ctx, addr)) {
 8000f12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f7ff ff98 	bl	8000e4a <ValidAddress>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d00c      	beq.n	8000f3a <BCIhandler+0xba>
                put32(ctx, VMreadCell(ctx, addr++)); }
 8000f20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f22:	1c5a      	adds	r2, r3, #1
 8000f24:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000f26:	4619      	mov	r1, r3
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f000 fcc1 	bl	80018b0 <VMreadCell>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4619      	mov	r1, r3
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	f7ff ff1c 	bl	8000d70 <put32>
 8000f38:	e007      	b.n	8000f4a <BCIhandler+0xca>
            else {
                put32(ctx, 0);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f7ff ff17 	bl	8000d70 <put32>
                ctx->ior = BCI_IOR_INVALID_ADDRESS;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8000f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
        while (n--) {
 8000f4a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000f4e:	1e5a      	subs	r2, r3, #1
 8000f50:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1dc      	bne.n	8000f12 <BCIhandler+0x92>
            }
        }
        break;
 8000f58:	e1b7      	b.n	80012ca <BCIhandler+0x44a>
    case BCIFN_WRITE:
        put8(ctx, BCIFN_WRITE);
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f7ff fed2 	bl	8000d06 <put8>
        n = get8();
 8000f62:	f7ff fe8d 	bl	8000c80 <get8>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        addr = get32();
 8000f6c:	f7ff feac 	bl	8000cc8 <get32>
 8000f70:	67f8      	str	r0, [r7, #124]	@ 0x7c
        while (n--) {
 8000f72:	e016      	b.n	8000fa2 <BCIhandler+0x122>
            x = get32();
 8000f74:	f7ff fea8 	bl	8000cc8 <get32>
 8000f78:	67b8      	str	r0, [r7, #120]	@ 0x78
            if (ValidAddress(ctx, addr)) {
 8000f7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f7ff ff64 	bl	8000e4a <ValidAddress>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d008      	beq.n	8000f9a <BCIhandler+0x11a>
                VMwriteCell(ctx, addr++, x); }
 8000f88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000f8e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000f90:	4619      	mov	r1, r3
 8000f92:	68f8      	ldr	r0, [r7, #12]
 8000f94:	f000 fcc2 	bl	800191c <VMwriteCell>
 8000f98:	e003      	b.n	8000fa2 <BCIhandler+0x122>
            else {
                ctx->ior = BCI_IOR_INVALID_ADDRESS;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8000fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        while (n--) {
 8000fa2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000fa6:	1e5a      	subs	r2, r3, #1
 8000fa8:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1e1      	bne.n	8000f74 <BCIhandler+0xf4>
            }
        }
        break;
 8000fb0:	e18b      	b.n	80012ca <BCIhandler+0x44a>
    default:
    if (ctx->admin != BCI_ADMIN_ACTIVE) {
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8000fb8:	2b55      	cmp	r3, #85	@ 0x55
 8000fba:	d004      	beq.n	8000fc6 <BCIhandler+0x146>
        put8(ctx, BCIFN_ACCESS_DENIED);
 8000fbc:	210a      	movs	r1, #10
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f7ff fea1 	bl	8000d06 <put8>
 8000fc4:	e181      	b.n	80012ca <BCIhandler+0x44a>
    } else {
        put8(ctx, n);
 8000fc6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000fca:	4619      	mov	r1, r3
 8000fcc:	68f8      	ldr	r0, [r7, #12]
 8000fce:	f7ff fe9a 	bl	8000d06 <put8>
        switch (n) {
 8000fd2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000fd6:	3b03      	subs	r3, #3
 8000fd8:	2b06      	cmp	r3, #6
 8000fda:	f200 8172 	bhi.w	80012c2 <BCIhandler+0x442>
 8000fde:	a201      	add	r2, pc, #4	@ (adr r2, 8000fe4 <BCIhandler+0x164>)
 8000fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe4:	08001001 	.word	0x08001001
 8000fe8:	08001123 	.word	0x08001123
 8000fec:	08001153 	.word	0x08001153
 8000ff0:	080011f1 	.word	0x080011f1
 8000ff4:	080011dd 	.word	0x080011dd
 8000ff8:	0800125d 	.word	0x0800125d
 8000ffc:	0800126b 	.word	0x0800126b
        case BCIFN_EXECUTE:
            waitUntilVMready(ctx);          // stop the VM if it is running
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f7ff fec3 	bl	8000d8c <waitUntilVMready>
            ctx->cycles = 0;
 8001006:	68f9      	ldr	r1, [r7, #12]
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	e9c1 2308 	strd	r2, r3, [r1, #32]
            VMwriteCell(ctx, 0, get32());   // packed status at data[0]
 8001014:	f7ff fe58 	bl	8000cc8 <get32>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	2100      	movs	r1, #0
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f000 fc7c 	bl	800191c <VMwriteCell>
            uint8_t sp0 = VMgetSP(ctx);
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f001 f8f0 	bl	800220a <VMgetSP>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
            n = get8();
 8001030:	f7ff fe26 	bl	8000c80 <get8>
 8001034:	4603      	mov	r3, r0
 8001036:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            while (n--) {
 800103a:	e006      	b.n	800104a <BCIhandler+0x1ca>
                VMpushData(ctx, get32());
 800103c:	f7ff fe44 	bl	8000cc8 <get32>
 8001040:	4603      	mov	r3, r0
 8001042:	4619      	mov	r1, r3
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 fca7 	bl	8001998 <VMpushData>
            while (n--) {
 800104a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800104e:	1e5a      	subs	r2, r3, #1
 8001050:	f887 206f 	strb.w	r2, [r7, #111]	@ 0x6f
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f1      	bne.n	800103c <BCIhandler+0x1bc>
            }
            ctx->ior = simulate(ctx, get32()); // xt
 8001058:	f7ff fe36 	bl	8000cc8 <get32>
 800105c:	4603      	mov	r3, r0
 800105e:	4619      	mov	r1, r3
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f7ff febd 	bl	8000de0 <simulate>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	855a      	strh	r2, [r3, #42]	@ 0x2a
            put8(ctx, BCI_BEGIN);           // indicate end of random chars
 800106e:	21fc      	movs	r1, #252	@ 0xfc
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f7ff fe48 	bl	8000d06 <put8>
            temp = VMgetSP(ctx) - sp0;
 8001076:	68f8      	ldr	r0, [r7, #12]
 8001078:	f001 f8c7 	bl	800220a <VMgetSP>
 800107c:	4603      	mov	r3, r0
 800107e:	461a      	mov	r2, r3
 8001080:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	677b      	str	r3, [r7, #116]	@ 0x74
            if (temp < 0) {
 8001088:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800108a:	2b00      	cmp	r3, #0
 800108c:	da05      	bge.n	800109a <BCIhandler+0x21a>
                ctx->ior = BCI_STACK_UNDERFLOW;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8001094:	855a      	strh	r2, [r3, #42]	@ 0x2a
                temp = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	677b      	str	r3, [r7, #116]	@ 0x74
            }
            if (temp > EXEC_STACK_SIZE) {
 800109a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800109c:	2b10      	cmp	r3, #16
 800109e:	dd05      	ble.n	80010ac <BCIhandler+0x22c>
                ctx->ior = BCI_STACK_OVERFLOW;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80010a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
                temp = EXEC_STACK_SIZE;
 80010a8:	2310      	movs	r3, #16
 80010aa:	677b      	str	r3, [r7, #116]	@ 0x74
            }
            for (int i = 0; i < temp; i++) {//
 80010ac:	2300      	movs	r3, #0
 80010ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80010b0:	e00c      	b.n	80010cc <BCIhandler+0x24c>
                ds[i] = VMpopData(ctx);
 80010b2:	68f8      	ldr	r0, [r7, #12]
 80010b4:	f000 fc7f 	bl	80019b6 <VMpopData>
 80010b8:	4602      	mov	r2, r0
 80010ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	3380      	adds	r3, #128	@ 0x80
 80010c0:	443b      	add	r3, r7
 80010c2:	f843 2c70 	str.w	r2, [r3, #-112]
            for (int i = 0; i < temp; i++) {//
 80010c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010c8:	3301      	adds	r3, #1
 80010ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80010cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80010ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dbee      	blt.n	80010b2 <BCIhandler+0x232>
            }
            put8(ctx, temp);                // stack items returned
 80010d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f7ff fe13 	bl	8000d06 <put8>
            while (temp--) {
 80010e0:	e009      	b.n	80010f6 <BCIhandler+0x276>
                put32(ctx, ds[temp]);
 80010e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	3380      	adds	r3, #128	@ 0x80
 80010e8:	443b      	add	r3, r7
 80010ea:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff fe3d 	bl	8000d70 <put32>
            while (temp--) {
 80010f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010f8:	1e5a      	subs	r2, r3, #1
 80010fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f0      	bne.n	80010e2 <BCIhandler+0x262>
            }
            put32(ctx, VMreadCell(ctx, 0)); // return packed status
 8001100:	2100      	movs	r1, #0
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f000 fbd4 	bl	80018b0 <VMreadCell>
 8001108:	4603      	mov	r3, r0
 800110a:	4619      	mov	r1, r3
 800110c:	68f8      	ldr	r0, [r7, #12]
 800110e:	f7ff fe2f 	bl	8000d70 <put32>
            ctx->status = status0;          // run if previously running
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001118:	461a      	mov	r2, r3
 800111a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800111e:	f882 313a 	strb.w	r3, [r2, #314]	@ 0x13a
        case BCIFN_GET_CYCLES:
            ud = ctx->cycles;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001128:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
            put32(ctx, (uint32_t)ud);       // return cycle count
 800112c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800112e:	4619      	mov	r1, r3
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f7ff fe1d 	bl	8000d70 <put32>
            put32(ctx, (uint32_t)(ud >> 32));
 8001136:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	000a      	movs	r2, r1
 8001144:	2300      	movs	r3, #0
 8001146:	4613      	mov	r3, r2
 8001148:	4619      	mov	r1, r3
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff fe10 	bl	8000d70 <put32>
            break;
 8001150:	e0bb      	b.n	80012ca <BCIhandler+0x44a>
        case BCIFN_CRC:
            PRINTF("\nGetting CRCs of code and text spaces ");
            n = get8();
 8001152:	f7ff fd95 	bl	8000c80 <get8>
 8001156:	4603      	mov	r3, r0
 8001158:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            uint32_t cp = get32();
 800115c:	f7ff fdb4 	bl	8000cc8 <get32>
 8001160:	6638      	str	r0, [r7, #96]	@ 0x60
            uint32_t tp = get32();
 8001162:	f7ff fdb1 	bl	8000cc8 <get32>
 8001166:	65f8      	str	r0, [r7, #92]	@ 0x5c
            temp = n;
 8001168:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800116c:	677b      	str	r3, [r7, #116]	@ 0x74
            while (temp--) {
 800116e:	e006      	b.n	800117e <BCIhandler+0x2fe>
                if (temp & 0x80) break;
 8001170:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10c      	bne.n	8001194 <BCIhandler+0x314>
                get32(); // discard extra inputs
 800117a:	f7ff fda5 	bl	8000cc8 <get32>
            while (temp--) {
 800117e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001180:	1e5a      	subs	r2, r3, #1
 8001182:	677a      	str	r2, [r7, #116]	@ 0x74
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f3      	bne.n	8001170 <BCIhandler+0x2f0>
 8001188:	e005      	b.n	8001196 <BCIhandler+0x316>
 800118a:	bf00      	nop
 800118c:	2400e924 	.word	0x2400e924
 8001190:	2400e928 	.word	0x2400e928
                if (temp & 0x80) break;
 8001194:	bf00      	nop
            }
            put8(ctx, n);
 8001196:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800119a:	4619      	mov	r1, r3
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff fdb2 	bl	8000d06 <put8>
            put32(ctx, CRC32((uint8_t*)ctx->CodeMem, cp));
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80011ac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fa16 	bl	80015e0 <CRC32>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4619      	mov	r1, r3
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f7ff fdd9 	bl	8000d70 <put32>
            put32(ctx, CRC32((uint8_t*)ctx->TextMem, tp));
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011c4:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80011c8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fa08 	bl	80015e0 <CRC32>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4619      	mov	r1, r3
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f7ff fdcb 	bl	8000d70 <put32>
            break;
 80011da:	e076      	b.n	80012ca <BCIhandler+0x44a>
        case BCIFN_WRTEXT:
            x = TEXTSIZE * sizeof(VMcell_t);
 80011dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011e0:	67bb      	str	r3, [r7, #120]	@ 0x78
            taddr = (uint8_t*)ctx->TextMem;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011e8:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80011ec:	673b      	str	r3, [r7, #112]	@ 0x70
            goto prog;
 80011ee:	e008      	b.n	8001202 <BCIhandler+0x382>
        case BCIFN_WRCODE:
            x = CODESIZE * sizeof(VMinst_t);
 80011f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011f4:	67bb      	str	r3, [r7, #120]	@ 0x78
            taddr = (uint8_t*)ctx->CodeMem;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80011fc:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001200:	673b      	str	r3, [r7, #112]	@ 0x70
prog:       addr = get32();
 8001202:	f7ff fd61 	bl	8000cc8 <get32>
 8001206:	67f8      	str	r0, [r7, #124]	@ 0x7c
            temp = (x - addr);              // remaining
 8001208:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800120a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	677b      	str	r3, [r7, #116]	@ 0x74
            if (temp < 0) temp = 0;         // nothing to program
 8001210:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001212:	2b00      	cmp	r3, #0
 8001214:	da01      	bge.n	800121a <BCIhandler+0x39a>
 8001216:	2300      	movs	r3, #0
 8001218:	677b      	str	r3, [r7, #116]	@ 0x74
            if (temp > FLASH_BLOCK_SIZE ) temp = FLASH_BLOCK_SIZE;
 800121a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800121c:	2b40      	cmp	r3, #64	@ 0x40
 800121e:	dd01      	ble.n	8001224 <BCIhandler+0x3a4>
 8001220:	2340      	movs	r3, #64	@ 0x40
 8001222:	677b      	str	r3, [r7, #116]	@ 0x74
            if (len < temp)   temp = len;
 8001224:	4b33      	ldr	r3, [pc, #204]	@ (80012f4 <BCIhandler+0x474>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800122c:	4293      	cmp	r3, r2
 800122e:	dd02      	ble.n	8001236 <BCIhandler+0x3b6>
 8001230:	4b30      	ldr	r3, [pc, #192]	@ (80012f4 <BCIhandler+0x474>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	677b      	str	r3, [r7, #116]	@ 0x74
            FlashUnlock(&taddr[addr]);
 8001236:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001238:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800123a:	4413      	add	r3, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fa8e 	bl	800175e <FlashUnlock>
            PRINTF("\nWriting %d bytes to %p ", temp, &taddr[addr]);
            FlashWrite(&taddr[addr], (const uint8_t*) cmd, temp);
 8001242:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001244:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001246:	4413      	add	r3, r2
 8001248:	4a2b      	ldr	r2, [pc, #172]	@ (80012f8 <BCIhandler+0x478>)
 800124a:	6811      	ldr	r1, [r2, #0]
 800124c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800124e:	b292      	uxth	r2, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fa9f 	bl	8001794 <FlashWrite>
            FlashLock();
 8001256:	f000 fa8c 	bl	8001772 <FlashLock>
            break;
 800125a:	e036      	b.n	80012ca <BCIhandler+0x44a>
        case BCIFN_SECTOR_ERASE:
            x = get32();
 800125c:	f7ff fd34 	bl	8000cc8 <get32>
 8001260:	67b8      	str	r0, [r7, #120]	@ 0x78
            PRINTF("\nErasing sector %d of Flash ", x);
            FlashErase(x);
 8001262:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001264:	f000 fa8c 	bl	8001780 <FlashErase>
            break;
 8001268:	e02f      	b.n	80012ca <BCIhandler+0x44a>
        case BCIFN_STROBE:
            x = get32();
 800126a:	f7ff fd2d 	bl	8000cc8 <get32>
 800126e:	67b8      	str	r0, [r7, #120]	@ 0x78
            PRINTF("\nVM strobe=%d ", x);
            switch (x) {
 8001270:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001272:	f642 0251 	movw	r2, #10321	@ 0x2851
 8001276:	4293      	cmp	r3, r2
 8001278:	d016      	beq.n	80012a8 <BCIhandler+0x428>
 800127a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800127c:	f642 0251 	movw	r2, #10321	@ 0x2851
 8001280:	4293      	cmp	r3, r2
 8001282:	d81c      	bhi.n	80012be <BCIhandler+0x43e>
 8001284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001286:	f242 7210 	movw	r2, #10000	@ 0x2710
 800128a:	4293      	cmp	r3, r2
 800128c:	d005      	beq.n	800129a <BCIhandler+0x41a>
 800128e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001290:	f242 728b 	movw	r2, #10123	@ 0x278b
 8001294:	4293      	cmp	r3, r2
 8001296:	d00e      	beq.n	80012b6 <BCIhandler+0x436>
                    ctx->status = BCI_STATUS_SHUTDOWN;  break;
                case BCI_SLEEP_PIN:
                    ctx->status = BCI_STATUS_STOPPED;   break;
                case BCI_RESET_PIN:
                    VMreset(ctx);                       break;
                default: break;
 8001298:	e011      	b.n	80012be <BCIhandler+0x43e>
                    ctx->status = BCI_STATUS_SHUTDOWN;  break;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80012a0:	2202      	movs	r2, #2
 80012a2:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
 80012a6:	e00b      	b.n	80012c0 <BCIhandler+0x440>
                    ctx->status = BCI_STATUS_STOPPED;   break;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
 80012b4:	e004      	b.n	80012c0 <BCIhandler+0x440>
                    VMreset(ctx);                       break;
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 ffb4 	bl	8002224 <VMreset>
 80012bc:	e000      	b.n	80012c0 <BCIhandler+0x440>
                default: break;
 80012be:	bf00      	nop
            }
            break;
 80012c0:	e003      	b.n	80012ca <BCIhandler+0x44a>
        default:
            ctx->ior = BCI_BAD_COMMAND;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f64f 72ac 	movw	r2, #65452	@ 0xffac
 80012c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        } // inner case
    } // if
    } // outer case
    putN(ctx, ctx->ior, 2);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80012d0:	2202      	movs	r2, #2
 80012d2:	4619      	mov	r1, r3
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff fd2b 	bl	8000d30 <putN>
    BCIsendFinal(ctx->id);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80012e0:	f9b3 3138 	ldrsh.w	r3, [r3, #312]	@ 0x138
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fb81 	bl	80009ec <BCIsendFinal>
}
 80012ea:	bf00      	nop
 80012ec:	3780      	adds	r7, #128	@ 0x80
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2400e928 	.word	0x2400e928
 80012f8:	2400e924 	.word	0x2400e924

080012fc <API_Emit>:
well as MCU-specific equivalent functions. HOST_ONLY indicates that it is
compiled into the host VM, not on an MCU target.
*/

// Output to the mole output buffer with BCIsendChar.
VMcell_t API_Emit (vm_ctx *ctx){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
    uint32_t codepoint = ctx->t;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60fb      	str	r3, [r7, #12]
    if (codepoint < 0x80) {
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b7f      	cmp	r3, #127	@ 0x7f
 800130e:	d80d      	bhi.n	800132c <API_Emit+0x30>
        BCIsendChar(ctx->id, codepoint);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001316:	f9b3 3138 	ldrsh.w	r3, [r3, #312]	@ 0x138
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	4619      	mov	r1, r3
 8001322:	4610      	mov	r0, r2
 8001324:	f7ff fb2e 	bl	8000984 <BCIsendChar>
        return 0;
 8001328:	2300      	movs	r3, #0
 800132a:	e072      	b.n	8001412 <API_Emit+0x116>
    }
    if (codepoint < 0x800) {
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001332:	d210      	bcs.n	8001356 <API_Emit+0x5a>
        BCIsendChar(ctx->id, (char)(0xC0 | (codepoint >> 6)));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800133a:	f9b3 3138 	ldrsh.w	r3, [r3, #312]	@ 0x138
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	099b      	lsrs	r3, r3, #6
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4619      	mov	r1, r3
 800134e:	4610      	mov	r0, r2
 8001350:	f7ff fb18 	bl	8000984 <BCIsendChar>
        goto last;
 8001354:	e04a      	b.n	80013ec <API_Emit+0xf0>
    }
    if (codepoint < 0x10000) {
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800135c:	d210      	bcs.n	8001380 <API_Emit+0x84>
        BCIsendChar(ctx->id, (char)(0xE0 | (codepoint >> 12)));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001364:	f9b3 3138 	ldrsh.w	r3, [r3, #312]	@ 0x138
 8001368:	461a      	mov	r2, r3
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	0b1b      	lsrs	r3, r3, #12
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f063 031f 	orn	r3, r3, #31
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4619      	mov	r1, r3
 8001378:	4610      	mov	r0, r2
 800137a:	f7ff fb03 	bl	8000984 <BCIsendChar>
        goto thrd;
 800137e:	e022      	b.n	80013c6 <API_Emit+0xca>
    }
      BCIsendChar(ctx->id, (char)(0xF0 | (codepoint >> 18)));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001386:	f9b3 3138 	ldrsh.w	r3, [r3, #312]	@ 0x138
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	0c9b      	lsrs	r3, r3, #18
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f063 030f 	orn	r3, r3, #15
 8001396:	b2db      	uxtb	r3, r3
 8001398:	4619      	mov	r1, r3
 800139a:	4610      	mov	r0, r2
 800139c:	f7ff faf2 	bl	8000984 <BCIsendChar>
      BCIsendChar(ctx->id, (char)(0x80 | ((codepoint >> 12) & 0x3F)));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80013a6:	f9b3 3138 	ldrsh.w	r3, [r3, #312]	@ 0x138
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	0b1b      	lsrs	r3, r3, #12
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4619      	mov	r1, r3
 80013c0:	4610      	mov	r0, r2
 80013c2:	f7ff fadf 	bl	8000984 <BCIsendChar>
thrd: BCIsendChar(ctx->id, (char)(0x80 | ((codepoint >> 6) & 0x3F)));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80013cc:	f9b3 3138 	ldrsh.w	r3, [r3, #312]	@ 0x138
 80013d0:	461a      	mov	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	099b      	lsrs	r3, r3, #6
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	4610      	mov	r0, r2
 80013e8:	f7ff facc 	bl	8000984 <BCIsendChar>
last: BCIsendChar(ctx->id, (char)(0x80 | (codepoint & 0x3F)));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80013f2:	f9b3 3138 	ldrsh.w	r3, [r3, #312]	@ 0x138
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001406:	b2db      	uxtb	r3, r3
 8001408:	4619      	mov	r1, r3
 800140a:	4610      	mov	r0, r2
 800140c:	f7ff faba 	bl	8000984 <BCIsendChar>
    return 0;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <API_umstar_x>:

static VMcell_t API_umstar_x (vm_ctx *ctx, int sign) {
 800141a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800141e:	b095      	sub	sp, #84	@ 0x54
 8001420:	af00      	add	r7, sp, #0
 8001422:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001424:	62b9      	str	r1, [r7, #40]	@ 0x28
	VMdblcell_t a = (VMdblcell_t)(ctx->t & VM_MASK);
 8001426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	623b      	str	r3, [r7, #32]
 800142e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001430:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001434:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	VMdblcell_t b = (VMdblcell_t)(ctx->n & VM_MASK);
 8001438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2200      	movs	r2, #0
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	61fa      	str	r2, [r7, #28]
 8001442:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001446:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    int invert = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (sign) {
 800144e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001450:	2b00      	cmp	r3, #0
 8001452:	d031      	beq.n	80014b8 <API_umstar_x+0x9e>
        invert = (a ^ b) & VM_SIGN;
 8001454:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001458:	4053      	eors	r3, r2
 800145a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800145e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (a & VM_SIGN) a = (a ^ VM_MASK) + 1;
 8001460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001464:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001468:	f173 0300 	sbcs.w	r3, r3, #0
 800146c:	d30e      	bcc.n	800148c <API_umstar_x+0x72>
 800146e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001472:	ea6f 0a02 	mvn.w	sl, r2
 8001476:	469b      	mov	fp, r3
 8001478:	f11a 0301 	adds.w	r3, sl, #1
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	f14b 0300 	adc.w	r3, fp, #0
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001488:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        if (b & VM_SIGN) b = (b ^ VM_MASK) + 1;
 800148c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001490:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8001494:	f173 0300 	sbcs.w	r3, r3, #0
 8001498:	d30e      	bcc.n	80014b8 <API_umstar_x+0x9e>
 800149a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800149e:	ea6f 0802 	mvn.w	r8, r2
 80014a2:	4699      	mov	r9, r3
 80014a4:	f118 0301 	adds.w	r3, r8, #1
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	f149 0300 	adc.w	r3, r9, #0
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014b4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    }
    VMdblcell_t p = a * b;
 80014b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80014bc:	fb03 f202 	mul.w	r2, r3, r2
 80014c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	4413      	add	r3, r2
 80014ca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80014cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80014ce:	fba1 4502 	umull	r4, r5, r1, r2
 80014d2:	442b      	add	r3, r5
 80014d4:	461d      	mov	r5, r3
 80014d6:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 80014da:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
    if (invert) {
 80014de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <API_umstar_x+0xdc>
        p = -(signed)p;
 80014e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014e6:	425b      	negs	r3, r3
 80014e8:	17da      	asrs	r2, r3, #31
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	e9d7 3400 	ldrd	r3, r4, [r7]
 80014f2:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
    }
    ctx->n = (VMcell_t)p & VM_MASK;
 80014f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014fa:	609a      	str	r2, [r3, #8]
    return (VMcell_t)(p >> VM_CELLBITS);
 80014fc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	000a      	movs	r2, r1
 800150a:	2300      	movs	r3, #0
 800150c:	4613      	mov	r3, r2
}
 800150e:	4618      	mov	r0, r3
 8001510:	3754      	adds	r7, #84	@ 0x54
 8001512:	46bd      	mov	sp, r7
 8001514:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001518:	4770      	bx	lr

0800151a <API_umstar>:

VMcell_t API_umstar (vm_ctx *ctx) {
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
    return API_umstar_x(ctx, 0);
 8001522:	2100      	movs	r1, #0
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff78 	bl	800141a <API_umstar_x>
 800152a:	4603      	mov	r3, r0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <API_mudivmod>:

VMcell_t API_mudivmod (vm_ctx *ctx) {
 8001534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001538:	b08a      	sub	sp, #40	@ 0x28
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
/* MU/MOD ( dividendL dividendH divisor -- rem ql qh ) */
	VMdblcell_t dividend = ((VMdblcell_t)(ctx->n & VM_MASK) << VM_CELLBITS) | (THIRD & VM_MASK);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2200      	movs	r2, #0
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	6839      	ldr	r1, [r7, #0]
 8001552:	000b      	movs	r3, r1
 8001554:	2200      	movs	r2, #0
 8001556:	68f9      	ldr	r1, [r7, #12]
 8001558:	f891 102c 	ldrb.w	r1, [r1, #44]	@ 0x2c
 800155c:	4608      	mov	r0, r1
 800155e:	68f9      	ldr	r1, [r7, #12]
 8001560:	300c      	adds	r0, #12
 8001562:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8001566:	2000      	movs	r0, #0
 8001568:	460c      	mov	r4, r1
 800156a:	4605      	mov	r5, r0
 800156c:	ea42 0804 	orr.w	r8, r2, r4
 8001570:	ea43 0905 	orr.w	r9, r3, r5
 8001574:	e9c7 8908 	strd	r8, r9, [r7, #32]
	VMdblcell_t divisor = (VMdblcell_t)(ctx->t & VM_MASK);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	469a      	mov	sl, r3
 8001580:	4693      	mov	fp, r2
 8001582:	e9c7 ab06 	strd	sl, fp, [r7, #24]
	VMdblcell_t q = dividend / divisor;
 8001586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800158a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800158e:	f7fe fef7 	bl	8000380 <__aeabi_uldivmod>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	e9c7 2304 	strd	r2, r3, [r7, #16]
	THIRD = (VMcell_t)(dividend % divisor);
 800159a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800159e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015a2:	f7fe feed 	bl	8000380 <__aeabi_uldivmod>
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80015b0:	461a      	mov	r2, r3
 80015b2:	4601      	mov	r1, r0
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	320c      	adds	r2, #12
 80015b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ctx->n = (VMcell_t)(q & VM_MASK);
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	609a      	str	r2, [r3, #8]
    return (VMcell_t)(q >> VM_CELLBITS) & VM_MASK;
 80015c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	000a      	movs	r2, r1
 80015d0:	2300      	movs	r3, #0
 80015d2:	4613      	mov	r3, r2
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3728      	adds	r7, #40	@ 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080015e0 <CRC32>:
    }
    return ~crc;
}
#else // STM32 CRC hardware
extern CRC_HandleTypeDef hcrc; // in main.c
uint32_t CRC32(uint8_t *addr, uint32_t len) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
    uint32_t crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)addr, len);
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4805      	ldr	r0, [pc, #20]	@ (8001604 <CRC32+0x24>)
 80015f0:	f004 f9f6 	bl	80059e0 <HAL_CRC_Calculate>
 80015f4:	60f8      	str	r0, [r7, #12]
    return ~crc;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43db      	mvns	r3, r3
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	240129b4 	.word	0x240129b4

08001608 <NVMbeginRead>:
}


#else

int NVMbeginRead (uint32_t faddr){
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    return 0;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <NVMbeginWrite>:
int NVMbeginWrite (uint32_t faddr){
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
    return 0;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <NVMread>:
uint32_t NVMread (int bytes){
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    return 0;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <NVMwrite>:
void NVMwrite (uint32_t n, int bytes){
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <NVMendRW>:
void NVMendRW (void){
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <NVMgetID>:
uint32_t NVMgetID(void) {
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
    return 0; // no ID for STM32
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <API_NVMbeginRead>:

#endif

VMcell_t API_NVMbeginRead (vm_ctx *ctx){
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
    return NVMbeginRead(ctx->t);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ffbc 	bl	8001608 <NVMbeginRead>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <API_NVMbeginWrite>:
VMcell_t API_NVMbeginWrite (vm_ctx *ctx){
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
    return NVMbeginWrite(ctx->t);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ffb9 	bl	800161e <NVMbeginWrite>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <API_NVMread>:
VMcell_t API_NVMread (vm_ctx *ctx){
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
    return NVMread(ctx->t);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ffb6 	bl	8001634 <NVMread>
 80016c8:	4603      	mov	r3, r0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <API_NVMwrite>:
VMcell_t API_NVMwrite (vm_ctx *ctx){
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
    NVMwrite(ctx->n, ctx->t);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4610      	mov	r0, r2
 80016e6:	f7ff ffb0 	bl	800164a <NVMwrite>
    return 0;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <API_NVMendRW>:
VMcell_t API_NVMendRW(vm_ctx* ctx) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
    NVMendRW();
 80016fc:	f7ff ffb0 	bl	8001660 <NVMendRW>
    return 0;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <API_NVMID>:
VMcell_t API_NVMID(vm_ctx* ctx) {
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
    return NVMgetID();
 8001712:	f7ff ffac 	bl	800166e <NVMgetID>
 8001716:	4603      	mov	r3, r0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <BCIVMioRead>:


// Absolute memory access - your PC's MMU will crash the app

VMcell_t BCIVMioRead (vm_ctx *ctx, VMcell_t addr){
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
    return *(VMcell_t*)(size_t)(addr << C_BYTESHIFT);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <BCIVMioWrite>:

void BCIVMioWrite (vm_ctx *ctx, VMcell_t addr, VMcell_t data){
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
    *(VMcell_t*)(size_t)(addr << C_BYTESHIFT) = data;
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	461a      	mov	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <FlashUnlock>:

// Write to flash region using byte address

void FlashUnlock(uint8_t *addr) { }
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <FlashLock>:
void FlashLock(void) { }
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <FlashErase>:
void FlashErase(uint32_t sector) { }
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <FlashWrite>:

void FlashWrite(uint8_t *dest, const uint8_t *src, uint16_t bytes) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	4613      	mov	r3, r2
 80017a0:	80fb      	strh	r3, [r7, #6]
    memcpy(dest, src, bytes);
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	461a      	mov	r2, r3
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f00b fd9e 	bl	800d2ea <memcpy>
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <API_LCDraw>:
VMcell_t API_LCDfill(vm_ctx* ctx) {
    LCDfill(ctx->n, ctx->t);
	return 0;
}
#else
VMcell_t API_LCDraw(vm_ctx* ctx)       { return 0; }
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	2300      	movs	r3, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <API_LCDparm>:
VMcell_t API_LCDparm(vm_ctx* ctx)      { return 0; }
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	2300      	movs	r3, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <API_LCDparmSet>:
VMcell_t API_LCDparmSet(vm_ctx* ctx)   { return 0; }
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	2300      	movs	r3, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <API_LCDchar>:
VMcell_t API_LCDchar(vm_ctx* ctx)      { return 0; }
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	2300      	movs	r3, #0
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <API_LCDcharWidth>:
VMcell_t API_LCDcharWidth(vm_ctx* ctx) { return 0; }
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	2300      	movs	r3, #0
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <API_LCDfill>:
VMcell_t API_LCDfill(vm_ctx* ctx)      { return 0; }
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	2300      	movs	r3, #0
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <API_Milliseconds>:

#else

extern uint32_t msec_counter;

VMcell_t API_Milliseconds(vm_ctx* ctx) {
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
    return msec_counter;
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <API_Milliseconds+0x18>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	2400e920 	.word	0x2400e920

08001858 <API_Buttons>:

VMcell_t API_Buttons(vm_ctx* ctx) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	int button = ~HAL_GPIO_ReadPin (BTN_GPIO_Port, BTN_Pin);
 8001860:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001864:	4805      	ldr	r0, [pc, #20]	@ (800187c <API_Buttons+0x24>)
 8001866:	f004 fc73 	bl	8006150 <HAL_GPIO_ReadPin>
 800186a:	4603      	mov	r3, r0
 800186c:	43db      	mvns	r3, r3
 800186e:	60fb      	str	r3, [r7, #12]
    return button;
 8001870:	68fb      	ldr	r3, [r7, #12]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	58021800 	.word	0x58021800

08001880 <API_CRC32>:

#endif // HOST_ONLY

VMcell_t API_CRC32(vm_ctx* ctx) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
    ctx->n = CRC32((uint8_t*)&ctx->DataMem[ctx->n], ctx->t);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	334c      	adds	r3, #76	@ 0x4c
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	441a      	add	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4619      	mov	r1, r3
 800189a:	4610      	mov	r0, r2
 800189c:	f7ff fea0 	bl	80015e0 <CRC32>
 80018a0:	4602      	mov	r2, r0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	609a      	str	r2, [r3, #8]
    return 0;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <VMreadCell>:
#define PRINTF  printf
#else
#define PRINTF(...) do { } while (0)
#endif

VMcell_t VMreadCell(vm_ctx *ctx, VMcell_t addr) {
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
    if (addr < DATASIZE)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018c0:	d205      	bcs.n	80018ce <VMreadCell+0x1e>
        return ctx->DataMem[addr];      // Data
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	324c      	adds	r2, #76	@ 0x4c
 80018c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018cc:	e020      	b.n	8001910 <VMreadCell+0x60>
    if (addr < TEXTORIGIN) {
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018d4:	d205      	bcs.n	80018e2 <VMreadCell+0x32>
        ctx->ior = BCI_IOR_INVALID_ADDRESS;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80018dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        return 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	e016      	b.n	8001910 <VMreadCell+0x60>
    }
    addr -= TEXTORIGIN;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80018e8:	603b      	str	r3, [r7, #0]
    if (addr < TEXTSIZE) {
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018f0:	d209      	bcs.n	8001906 <VMreadCell+0x56>
        return ctx->TextMem[addr];      // Text
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80018f8:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	e004      	b.n	8001910 <VMreadCell+0x60>
    }
    ctx->ior = BCI_IOR_INVALID_ADDRESS;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800190c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return 0;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <VMwriteCell>:

void VMwriteCell(vm_ctx *ctx, VMcell_t addr, VMcell_t x) {
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
    if (addr < DATASIZE) ctx->DataMem[addr] = x;
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800192e:	d206      	bcs.n	800193e <VMwriteCell+0x22>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	324c      	adds	r2, #76	@ 0x4c
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    else ctx->ior = BCI_IOR_INVALID_ADDRESS;
}
 800193c:	e003      	b.n	8001946 <VMwriteCell+0x2a>
    else ctx->ior = BCI_IOR_INVALID_ADDRESS;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8001944:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <VMdupData>:

static void VMdupData(vm_ctx *ctx) {
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
    ctx->sp = (ctx->sp + 1) & (VM_STACKSIZE - 1);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001960:	3301      	adds	r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	b2da      	uxtb	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    ctx->DataStack[ctx->sp] = ctx->n;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6899      	ldr	r1, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	320c      	adds	r2, #12
 8001980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ctx->n = ctx->t;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <VMpushData>:

void VMpushData(vm_ctx *ctx, VMcell_t x) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
    VMdupData(ctx);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffd5 	bl	8001952 <VMdupData>
    ctx->t = x;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	60da      	str	r2, [r3, #12]
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <VMpopData>:

VMcell_t VMpopData(vm_ctx *ctx) {
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
    VMcell_t r = ctx->t;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	60fb      	str	r3, [r7, #12]
    ctx->t = ctx->n;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	60da      	str	r2, [r3, #12]
    ctx->n = ctx->DataStack[ctx->sp];
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80019d2:	461a      	mov	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	320c      	adds	r2, #12
 80019d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]
    ctx->sp = (ctx->sp - 1) & (VM_STACKSIZE - 1);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f003 031f 	and.w	r3, r3, #31
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    return r;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <VMpushReturn>:

static void VMpushReturn(vm_ctx *ctx, VMcell_t x) {
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
    ctx->rp = (ctx->rp + 1) & (VM_STACKSIZE - 1);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001a14:	3301      	adds	r3, #1
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    ctx->ReturnStack[ctx->rp] = ctx->r;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6859      	ldr	r1, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	322c      	adds	r2, #44	@ 0x2c
 8001a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ctx->r = x;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <VMpopReturn>:

static VMcell_t VMpopReturn(vm_ctx *ctx) {
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
    VMcell_t r = ctx->r;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	60fb      	str	r3, [r7, #12]
    ctx->r = ctx->ReturnStack[ctx->rp];
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001a5e:	461a      	mov	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	322c      	adds	r2, #44	@ 0x2c
 8001a64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	605a      	str	r2, [r3, #4]
    ctx->rp = (ctx->rp - 1) & (VM_STACKSIZE - 1);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f003 031f 	and.w	r3, r3, #31
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    return r;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <VMsteps>:
#define IMASK2 ((1 << (VM_INSTBITS - 2)) - 1)
static int ops0001(vm_ctx *ctx, int inst);

static VMcell_t VMapiCall(vm_ctx *ctx, int fn);
int VMstep(vm_ctx *ctx, VMinst_t inst);
int VMsteps(vm_ctx *ctx, uint32_t times) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
    while (times--) VMstep(ctx, 0);
 8001a9a:	e003      	b.n	8001aa4 <VMsteps+0x14>
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f80c 	bl	8001abc <VMstep>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	1e5a      	subs	r2, r3, #1
 8001aa8:	603a      	str	r2, [r7, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f6      	bne.n	8001a9c <VMsteps+0xc>
    return ctx->ior;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <VMstep>:

int VMstep(vm_ctx *ctx, VMinst_t inst){
 8001abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac0:	b0a2      	sub	sp, #136	@ 0x88
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    int retval = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    VMcell_t pc = ctx->pc;
 8001ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (inst == 0) {
 8001ada:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10e      	bne.n	8001b00 <VMstep+0x44>
        inst = ctx->CodeMem[pc++];
 8001ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ae4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ae8:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001aec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001af0:	1c53      	adds	r3, r2, #1
 8001af2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001af6:	0053      	lsls	r3, r2, #1
 8001af8:	440b      	add	r3, r1
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    }
    if (inst & (1 << (VM_INSTBITS - 1))) { // MSB
 8001b00:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f280 8200 	bge.w	8001f0a <VMstep+0x44e>
        if (inst & (1 << (VM_INSTBITS - 2))) pc = VMpopReturn(ctx);
 8001b0a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <VMstep+0x64>
 8001b16:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001b18:	f7ff ff97 	bl	8001a4a <VMpopReturn>
 8001b1c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        inst &= IMASK2;
 8001b20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b28:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        int i = SLOT0_POSITION + 5;
 8001b2c:	230e      	movs	r3, #14
 8001b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (i > 0) {
 8001b30:	e1e6      	b.n	8001f00 <VMstep+0x444>
            i -= 5;
 8001b32:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b34:	3b05      	subs	r3, #5
 8001b36:	67fb      	str	r3, [r7, #124]	@ 0x7c
            uint8_t uop;
            if (i < 0) uop = inst & LAST_SLOT_MASK;
 8001b38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	da07      	bge.n	8001b4e <VMstep+0x92>
 8001b3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8001b4c:	e009      	b.n	8001b62 <VMstep+0xa6>
            else uop = (inst >> i) & 0x1F;
 8001b4e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8001b52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b54:	fa42 f303 	asr.w	r3, r2, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f003 031f 	and.w	r3, r3, #31
 8001b5e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
            VMcell_t t = ctx->t;
 8001b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	65bb      	str	r3, [r7, #88]	@ 0x58
            VMcell_t n = ctx->n;
 8001b68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	657b      	str	r3, [r7, #84]	@ 0x54
            uint8_t se = stackeffects[uop];
 8001b6e:	f897 207b 	ldrb.w	r2, [r7, #123]	@ 0x7b
 8001b72:	4bb1      	ldr	r3, [pc, #708]	@ (8001e38 <VMstep+0x37c>)
 8001b74:	5c9b      	ldrb	r3, [r3, r2]
 8001b76:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            if (se & 1) {
 8001b7a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <VMstep+0xd2>
                VMdupData(ctx);
 8001b86:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001b88:	f7ff fee3 	bl	8001952 <VMdupData>
 8001b8c:	e008      	b.n	8001ba0 <VMstep+0xe4>
            } else if (se & 2) {
 8001b8e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <VMstep+0xe4>
                VMpopData(ctx);
 8001b9a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001b9c:	f7ff ff0b 	bl	80019b6 <VMpopData>
            }
            switch (uop) {
 8001ba0:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8001ba4:	2b1f      	cmp	r3, #31
 8001ba6:	f200 819d 	bhi.w	8001ee4 <VMstep+0x428>
 8001baa:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb0 <VMstep+0xf4>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001c31 	.word	0x08001c31
 8001bb4:	08001c4d 	.word	0x08001c4d
 8001bb8:	08001d43 	.word	0x08001d43
 8001bbc:	08001e3d 	.word	0x08001e3d
 8001bc0:	08001d05 	.word	0x08001d05
 8001bc4:	08001cb3 	.word	0x08001cb3
 8001bc8:	08001d11 	.word	0x08001d11
 8001bcc:	08001d4b 	.word	0x08001d4b
 8001bd0:	08001d6d 	.word	0x08001d6d
 8001bd4:	08001c57 	.word	0x08001c57
 8001bd8:	08001ee5 	.word	0x08001ee5
 8001bdc:	08001ee5 	.word	0x08001ee5
 8001be0:	08001e45 	.word	0x08001e45
 8001be4:	08001e59 	.word	0x08001e59
 8001be8:	08001d55 	.word	0x08001d55
 8001bec:	08001d5f 	.word	0x08001d5f
 8001bf0:	08001c8f 	.word	0x08001c8f
 8001bf4:	08001c6d 	.word	0x08001c6d
 8001bf8:	08001ee5 	.word	0x08001ee5
 8001bfc:	08001ee5 	.word	0x08001ee5
 8001c00:	08001e9d 	.word	0x08001e9d
 8001c04:	08001ead 	.word	0x08001ead
 8001c08:	08001ec1 	.word	0x08001ec1
 8001c0c:	08001ed1 	.word	0x08001ed1
 8001c10:	08001d1d 	.word	0x08001d1d
 8001c14:	08001d8d 	.word	0x08001d8d
 8001c18:	08001d39 	.word	0x08001d39
 8001c1c:	08001e25 	.word	0x08001e25
 8001c20:	08001e71 	.word	0x08001e71
 8001c24:	08001e85 	.word	0x08001e85
 8001c28:	08001e2d 	.word	0x08001e2d
 8001c2c:	08001d2b 	.word	0x08001d2b
                // basic stack operations
#if (VM_CELLBITS == 32)
                uint64_t ud;
#endif
                case VMO_NOP:        ctx->cycles--;
 8001c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c36:	1e51      	subs	r1, r2, #1
 8001c38:	6439      	str	r1, [r7, #64]	@ 0x40
 8001c3a:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001c3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c42:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8001c46:	e9c3 1208 	strd	r1, r2, [r3, #32]
                case VMO_DUP:
                case VMO_DROP:                                          break;
 8001c4a:	e14c      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_INV:        ctx->t = ~t & VM_MASK;             break;
 8001c4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c4e:	43da      	mvns	r2, r3
 8001c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c52:	60da      	str	r2, [r3, #12]
 8001c54:	e147      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_TWOSTAR:    ctx->t = (t << 1) & VM_MASK;
 8001c56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c58:	005a      	lsls	r2, r3, #1
 8001c5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c5c:	60da      	str	r2, [r3, #12]
                                     ctx->cy = (t >> (VM_CELLBITS - 1))
 8001c5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c60:	0fdb      	lsrs	r3, r3, #31
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c66:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
                                             & 1;                       break;
 8001c6a:	e13c      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_TWODIV:     ctx->t = (t & VM_SIGN) | (t >> 1);
 8001c6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c6e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001c72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c74:	085b      	lsrs	r3, r3, #1
 8001c76:	431a      	orrs	r2, r3
 8001c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c7a:	60da      	str	r2, [r3, #12]
                                     ctx->cy = t & 1;                   break;
 8001c7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c88:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8001c8c:	e12b      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_TWODIVC:    ctx->t = (ctx->cy << (VM_CELLBITS - 1))
 8001c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c90:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001c94:	07da      	lsls	r2, r3, #31
                                            | (t >> 1);
 8001c96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c98:	085b      	lsrs	r3, r3, #1
 8001c9a:	431a      	orrs	r2, r3
                case VMO_TWODIVC:    ctx->t = (ctx->cy << (VM_CELLBITS - 1))
 8001c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c9e:	60da      	str	r2, [r3, #12]
                                     ctx->cy = t & 1;                   break;
 8001ca0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cac:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8001cb0:	e119      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_PLUS:
#if (VM_CELLBITS == 32)
                                     ud = (uint64_t)t + (uint64_t)ctx->t;
 8001cb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cc2:	637a      	str	r2, [r7, #52]	@ 0x34
 8001cc4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8001cc8:	4623      	mov	r3, r4
 8001cca:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001cce:	4602      	mov	r2, r0
 8001cd0:	189b      	adds	r3, r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
 8001cd4:	462b      	mov	r3, r5
 8001cd6:	460a      	mov	r2, r1
 8001cd8:	4153      	adcs	r3, r2
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ce0:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
                                     ctx->t = ud & VM_MASK;
 8001ce4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ce8:	60da      	str	r2, [r3, #12]
                                     ctx->cy = (uint8_t)(ud >> 32);     break;
 8001cea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001cee:	f04f 0000 	mov.w	r0, #0
 8001cf2:	f04f 0100 	mov.w	r1, #0
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	b2c3      	uxtb	r3, r0
 8001cfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cfe:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
 8001d02:	e0f0      	b.n	8001ee6 <VMstep+0x42a>
#else
                                     t += ctx->t;  ctx->t = t & VM_MASK;
                                     ctx->cy = (t >> VM_CELLBITS) & 1;  break;
#endif
                case VMO_XOR:        ctx->t = t ^ n;                    break;
 8001d04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d08:	405a      	eors	r2, r3
 8001d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	e0ea      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_AND:        ctx->t = t & n;                    break;
 8001d10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d14:	401a      	ands	r2, r3
 8001d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	e0e4      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_SWAP:       ctx->t = n;  ctx->n = t;           break;
 8001d1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d20:	60d3      	str	r3, [r2, #12]
 8001d22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d26:	6093      	str	r3, [r2, #8]
 8001d28:	e0dd      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_CY:         ctx->t = ctx->cy;                  break;
 8001d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d2c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001d30:	461a      	mov	r2, r3
 8001d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	e0d6      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_B:          ctx->t = ctx->b;                   break;
 8001d38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d3a:	695a      	ldr	r2, [r3, #20]
 8001d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	e0d1      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_OVER:       ctx->t = n;                        break;
 8001d42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d46:	60d3      	str	r3, [r2, #12]
 8001d48:	e0cd      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_PUSH:       VMpushReturn(ctx, t);              break;
 8001d4a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001d4c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001d4e:	f7ff fe59 	bl	8001a04 <VMpushReturn>
 8001d52:	e0c8      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_R:          ctx->t = ctx->r;                   break;
 8001d54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	e0c3      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_POP:        ctx->t = VMpopReturn(ctx);         break;
 8001d5e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001d60:	f7ff fe73 	bl	8001a4a <VMpopReturn>
 8001d64:	4602      	mov	r2, r0
 8001d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	e0bc      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_UNEXT:      ctx->r--;
 8001d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	1e5a      	subs	r2, r3, #1
 8001d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d74:	605a      	str	r2, [r3, #4]
                    if (ctx->r == 0) VMpopReturn(ctx);
 8001d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d103      	bne.n	8001d86 <VMstep+0x2ca>
 8001d7e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001d80:	f7ff fe63 	bl	8001a4a <VMpopReturn>
                    else i = SLOT0_POSITION + 5;
                    break;
 8001d84:	e0af      	b.n	8001ee6 <VMstep+0x42a>
                    else i = SLOT0_POSITION + 5;
 8001d86:	230e      	movs	r3, #14
 8001d88:	67fb      	str	r3, [r7, #124]	@ 0x7c
                    break;
 8001d8a:	e0ac      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_PLUSSTAR:   if (ctx->a & 1) {
 8001d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d012      	beq.n	8001dbe <VMstep+0x302>
                                         ud = (uint64_t)t + (uint64_t)n;
 8001d98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	469a      	mov	sl, r3
 8001d9e:	4693      	mov	fp, r2
 8001da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001da2:	2200      	movs	r2, #0
 8001da4:	4698      	mov	r8, r3
 8001da6:	4691      	mov	r9, r2
 8001da8:	eb1a 0308 	adds.w	r3, sl, r8
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	eb4b 0309 	adc.w	r3, fp, r9
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001db8:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8001dbc:	e007      	b.n	8001dce <VMstep+0x312>
                                     } else {
                                         ud = (uint64_t)t;
 8001dbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	60fa      	str	r2, [r7, #12]
 8001dc6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001dca:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
                                     }
                                     ud = (ud << (VM_CELLBITS - 1))
 8001dce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001dd2:	f04f 0000 	mov.w	r0, #0
 8001dd6:	f04f 0100 	mov.w	r1, #0
 8001dda:	07d9      	lsls	r1, r3, #31
 8001ddc:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001de0:	07d0      	lsls	r0, r2, #31
                                        | (ctx->a >> 1);
 8001de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	085b      	lsrs	r3, r3, #1
 8001de8:	2200      	movs	r2, #0
 8001dea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dec:	62fa      	str	r2, [r7, #44]	@ 0x2c
                                     ud = (ud << (VM_CELLBITS - 1))
 8001dee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001df2:	4623      	mov	r3, r4
 8001df4:	4303      	orrs	r3, r0
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	462b      	mov	r3, r5
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e02:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
                                     ctx->t = (ud >> VM_CELLBITS) & VM_MASK;
 8001e06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001e0a:	f04f 0000 	mov.w	r0, #0
 8001e0e:	f04f 0100 	mov.w	r1, #0
 8001e12:	0018      	movs	r0, r3
 8001e14:	2100      	movs	r1, #0
 8001e16:	4602      	mov	r2, r0
 8001e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e1a:	60da      	str	r2, [r3, #12]
                                     ctx->a = ud & VM_MASK;             break;
 8001e1c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e20:	611a      	str	r2, [r3, #16]
 8001e22:	e060      	b.n	8001ee6 <VMstep+0x42a>
                // memory operations
                case VMO_BSTORE:     ctx->b = t;                        break;
 8001e24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e28:	6153      	str	r3, [r2, #20]
 8001e2a:	e05c      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_A:          ctx->t = ctx->a;                   break;
 8001e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	e057      	b.n	8001ee6 <VMstep+0x42a>
 8001e36:	bf00      	nop
 8001e38:	0800dfb8 	.word	0x0800dfb8
                case VMO_ASTORE:     ctx->a = t;                        break;
 8001e3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e40:	6113      	str	r3, [r2, #16]
 8001e42:	e050      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_FETCHA:     ctx->t = VMreadCell(ctx, ctx->a);  break;
 8001e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001e4c:	f7ff fd30 	bl	80018b0 <VMreadCell>
 8001e50:	4602      	mov	r2, r0
 8001e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	e046      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_FETCHAPLUS: ctx->t = VMreadCell(ctx, ctx->a++);break;
 8001e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e5a:	6919      	ldr	r1, [r3, #16]
 8001e5c:	1c4a      	adds	r2, r1, #1
 8001e5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001e64:	f7ff fd24 	bl	80018b0 <VMreadCell>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	e03a      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_FETCHB:     ctx->t= BCIVMioRead(ctx, ctx->b);  break;
 8001e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	4619      	mov	r1, r3
 8001e76:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001e78:	f7ff fc52 	bl	8001720 <BCIVMioRead>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	e030      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_FETCHBPLUS: ctx->t= BCIVMioRead(ctx, ctx->b++);break;
 8001e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e86:	6959      	ldr	r1, [r3, #20]
 8001e88:	1c4a      	adds	r2, r1, #1
 8001e8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e8c:	615a      	str	r2, [r3, #20]
 8001e8e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001e90:	f7ff fc46 	bl	8001720 <BCIVMioRead>
 8001e94:	4602      	mov	r2, r0
 8001e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	e024      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_STOREA:     VMwriteCell(ctx, ctx->a, t);       break;
 8001e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001ea6:	f7ff fd39 	bl	800191c <VMwriteCell>
 8001eaa:	e01c      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_STOREAPLUS: VMwriteCell(ctx, ctx->a++, t);     break;
 8001eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001eae:	6919      	ldr	r1, [r3, #16]
 8001eb0:	1c4a      	adds	r2, r1, #1
 8001eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001eb4:	611a      	str	r2, [r3, #16]
 8001eb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001eb8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001eba:	f7ff fd2f 	bl	800191c <VMwriteCell>
 8001ebe:	e012      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_STOREB:     BCIVMioWrite(ctx, ctx->b, t);      break;
 8001ec0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001eca:	f7ff fc37 	bl	800173c <BCIVMioWrite>
 8001ece:	e00a      	b.n	8001ee6 <VMstep+0x42a>
                case VMO_STOREBPLUS: BCIVMioWrite(ctx, ctx->b++, t);    break;
 8001ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ed2:	6959      	ldr	r1, [r3, #20]
 8001ed4:	1c4a      	adds	r2, r1, #1
 8001ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ed8:	615a      	str	r2, [r3, #20]
 8001eda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001edc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001ede:	f7ff fc2d 	bl	800173c <BCIVMioWrite>
 8001ee2:	e000      	b.n	8001ee6 <VMstep+0x42a>
                default: break;
 8001ee4:	bf00      	nop
            }
            ctx->cycles++;
 8001ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ee8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001eec:	1c51      	adds	r1, r2, #1
 8001eee:	6239      	str	r1, [r7, #32]
 8001ef0:	f143 0300 	adc.w	r3, r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ef8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001efc:	e9c3 1208 	strd	r1, r2, [r3, #32]
        while (i > 0) {
 8001f00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f73f ae15 	bgt.w	8001b32 <VMstep+0x76>
 8001f08:	e0f7      	b.n	80020fa <VMstep+0x63e>
        }
    } else {
        uint16_t _lex = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
        uint32_t imm;
        int32_t immex = (ctx->lex << (VM_INSTBITS - 3))
 8001f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f14:	035a      	lsls	r2, r3, #13
                    | (inst & ((1 << (VM_INSTBITS - 3)) - 1));
 8001f16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
        int32_t immex = (ctx->lex << (VM_INSTBITS - 3))
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	66bb      	str	r3, [r7, #104]	@ 0x68
        switch ((inst >> (VM_INSTBITS - 3)) & 3) { // upper bits 000 to 011
 8001f22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f26:	0b5b      	lsrs	r3, r3, #13
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d00f      	beq.n	8001f52 <VMstep+0x496>
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	dc14      	bgt.n	8001f60 <VMstep+0x4a4>
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <VMstep+0x484>
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d005      	beq.n	8001f4a <VMstep+0x48e>
 8001f3e:	e00f      	b.n	8001f60 <VMstep+0x4a4>
            case VMO_CALL: VMpushReturn(ctx, pc);
 8001f40:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8001f44:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001f46:	f7ff fd5d 	bl	8001a04 <VMpushReturn>
            case VMO_JUMP: pc = immex;                                  break;
 8001f4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f50:	e0c6      	b.n	80020e0 <VMstep+0x624>
            case VMO_LIT: VMdupData(ctx);  ctx->t = immex;              break;
 8001f52:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001f54:	f7ff fcfd 	bl	8001952 <VMdupData>
 8001f58:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	e0bf      	b.n	80020e0 <VMstep+0x624>
            default: // inst = 011 oooo imm...
            imm = inst & ((1 << (VM_INSTBITS - 7)) - 1);
 8001f60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f68:	667b      	str	r3, [r7, #100]	@ 0x64
            immex = imm;
 8001f6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f6c:	66bb      	str	r3, [r7, #104]	@ 0x68
            if (inst & (1 << (VM_INSTBITS - 8))) { // sign-extend
 8001f6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <VMstep+0x4c6>
                immex |= ~((1 << (VM_INSTBITS - 7)) - 1);
 8001f7a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001f7c:	4b64      	ldr	r3, [pc, #400]	@ (8002110 <VMstep+0x654>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	66bb      	str	r3, [r7, #104]	@ 0x68
            }
            int opcode = (inst >> (VM_INSTBITS - 7)) & 0x0F;
 8001f82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f86:	0a5b      	lsrs	r3, r3, #9
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	663b      	str	r3, [r7, #96]	@ 0x60
            int flag;
            switch (opcode) {
 8001f90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f92:	2b0f      	cmp	r3, #15
 8001f94:	f200 8092 	bhi.w	80020bc <VMstep+0x600>
 8001f98:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa0 <VMstep+0x4e4>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001fe1 	.word	0x08001fe1
 8001fa4:	08001ff5 	.word	0x08001ff5
 8001fa8:	08002005 	.word	0x08002005
 8001fac:	08002013 	.word	0x08002013
 8001fb0:	08002021 	.word	0x08002021
 8001fb4:	0800204b 	.word	0x0800204b
 8001fb8:	08002059 	.word	0x08002059
 8001fbc:	0800206f 	.word	0x0800206f
 8001fc0:	08002097 	.word	0x08002097
 8001fc4:	080020bd 	.word	0x080020bd
 8001fc8:	080020bd 	.word	0x080020bd
 8001fcc:	080020bd 	.word	0x080020bd
 8001fd0:	080020ab 	.word	0x080020ab
 8001fd4:	080020a5 	.word	0x080020a5
 8001fd8:	080020ab 	.word	0x080020ab
 8001fdc:	080020ab 	.word	0x080020ab
                case VMO_LEX: _lex = (ctx->lex << (VM_INSTBITS - 7)) | imm;
 8001fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe4:	025b      	lsls	r3, r3, #9
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4313      	orrs	r3, r2
 8001fee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
                    break;
 8001ff2:	e068      	b.n	80020c6 <VMstep+0x60a>
                case VMO_ZOO: retval = ops0001(ctx, imm);               break;
 8001ff4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001ffa:	f000 f88b 	bl	8002114 <ops0001>
 8001ffe:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
 8002002:	e060      	b.n	80020c6 <VMstep+0x60a>
                case VMO_AX: ctx->a = ctx->x + imm;                     break;
 8002004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800200a:	441a      	add	r2, r3
 800200c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800200e:	611a      	str	r2, [r3, #16]
 8002010:	e059      	b.n	80020c6 <VMstep+0x60a>
                case VMO_BY: ctx->b = ctx->y + imm;                     break;
 8002012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002014:	69da      	ldr	r2, [r3, #28]
 8002016:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002018:	441a      	add	r2, r3
 800201a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800201c:	615a      	str	r2, [r3, #20]
 800201e:	e052      	b.n	80020c6 <VMstep+0x60a>
                case VMO_ZBRAN: flag = (ctx->t == 0);  VMpopData(ctx);
 8002020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	bf0c      	ite	eq
 8002028:	2301      	moveq	r3, #1
 800202a:	2300      	movne	r3, #0
 800202c:	b2db      	uxtb	r3, r3
 800202e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002030:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002032:	f7ff fcc0 	bl	80019b6 <VMpopData>
                    if (flag) { pc = ctx->pc + immex; }                 break;
 8002036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002038:	2b00      	cmp	r3, #0
 800203a:	d041      	beq.n	80020c0 <VMstep+0x604>
 800203c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002042:	4413      	add	r3, r2
 8002044:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002048:	e03a      	b.n	80020c0 <VMstep+0x604>
                case VMO_BRAN: pc = ctx->pc + immex;                    break;
 800204a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002050:	4413      	add	r3, r2
 8002052:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002056:	e036      	b.n	80020c6 <VMstep+0x60a>
                case VMO_PBRAN: if ((ctx->t & VM_SIGN) == 0) {
 8002058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	db31      	blt.n	80020c4 <VMstep+0x608>
                    pc = ctx->pc + immex;
 8002060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002066:	4413      	add	r3, r2
 8002068:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    } break;
 800206c:	e02a      	b.n	80020c4 <VMstep+0x608>
                case VMO_NEXT:
                    ctx->r--;
 800206e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	1e5a      	subs	r2, r3, #1
 8002074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002076:	605a      	str	r2, [r3, #4]
                    if (ctx->r == 0) VMpopReturn(ctx);
 8002078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d103      	bne.n	8002088 <VMstep+0x5cc>
 8002080:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002082:	f7ff fce2 	bl	8001a4a <VMpopReturn>
                    else pc = ctx->pc + immex;
                    break;
 8002086:	e01e      	b.n	80020c6 <VMstep+0x60a>
                    else pc = ctx->pc + immex;
 8002088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800208e:	4413      	add	r3, r2
 8002090:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    break;
 8002094:	e017      	b.n	80020c6 <VMstep+0x60a>
                case VMO_PY: ctx->y = 0x10000000 + (imm << 8);          break;
 8002096:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	f103 5280 	add.w	r2, r3, #268435456	@ 0x10000000
 800209e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020a0:	61da      	str	r2, [r3, #28]
 80020a2:	e010      	b.n	80020c6 <VMstep+0x60a>
                case VMO_DUPAPI: VMdupData(ctx);
 80020a4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80020a6:	f7ff fc54 	bl	8001952 <VMdupData>
                case VMO_API:
                case VMO_APIDROP:
                case VMO_API2DROP: ctx->t = VMapiCall(ctx, imm);        break;
 80020aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020ac:	4619      	mov	r1, r3
 80020ae:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80020b0:	f000 f882 	bl	80021b8 <VMapiCall>
 80020b4:	4602      	mov	r2, r0
 80020b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	e004      	b.n	80020c6 <VMstep+0x60a>
                default: break;
 80020bc:	bf00      	nop
 80020be:	e002      	b.n	80020c6 <VMstep+0x60a>
                    if (flag) { pc = ctx->pc + immex; }                 break;
 80020c0:	bf00      	nop
 80020c2:	e000      	b.n	80020c6 <VMstep+0x60a>
                    } break;
 80020c4:	bf00      	nop
            }
            switch (opcode) {
 80020c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020c8:	2b0e      	cmp	r3, #14
 80020ca:	d005      	beq.n	80020d8 <VMstep+0x61c>
 80020cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80020ce:	2b0f      	cmp	r3, #15
 80020d0:	d105      	bne.n	80020de <VMstep+0x622>
                case VMO_API2DROP: VMpopData(ctx);
 80020d2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80020d4:	f7ff fc6f 	bl	80019b6 <VMpopData>
                case VMO_APIDROP: VMpopData(ctx);
 80020d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80020da:	f7ff fc6c 	bl	80019b6 <VMpopData>
                default: break;
 80020de:	bf00      	nop
            }
        }
        ctx->lex = _lex;
 80020e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020e2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80020e6:	851a      	strh	r2, [r3, #40]	@ 0x28
        ctx->cycles++;
 80020e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80020ee:	1c54      	adds	r4, r2, #1
 80020f0:	f143 0500 	adc.w	r5, r3, #0
 80020f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020f6:	e9c3 4508 	strd	r4, r5, [r3, #32]
    }
    ctx->pc = pc;
 80020fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002100:	601a      	str	r2, [r3, #0]
    return retval;
 8002102:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
}
 8002106:	4618      	mov	r0, r3
 8002108:	3788      	adds	r7, #136	@ 0x88
 800210a:	46bd      	mov	sp, r7
 800210c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002110:	fffffe00 	.word	0xfffffe00

08002114 <ops0001>:

static int ops0001(vm_ctx *ctx, int inst) { // instruction zoo 0110001...
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
    int r = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
    int imm = inst & 0x7F;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002128:	60bb      	str	r3, [r7, #8]
    if (inst & VMI_ZOODUP) VMdupData(ctx);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <ops0001+0x26>
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff fc0c 	bl	8001952 <VMdupData>
    switch(imm) {
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d82c      	bhi.n	800219a <ops0001+0x86>
 8002140:	a201      	add	r2, pc, #4	@ (adr r2, 8002148 <ops0001+0x34>)
 8002142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002146:	bf00      	nop
 8002148:	08002175 	.word	0x08002175
 800214c:	0800217b 	.word	0x0800217b
 8002150:	08002161 	.word	0x08002161
 8002154:	0800216b 	.word	0x0800216b
 8002158:	08002187 	.word	0x08002187
 800215c:	08002191 	.word	0x08002191
        case VMO_XSTORE:  ctx->x = ctx->t;                              break;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
 8002168:	e018      	b.n	800219c <ops0001+0x88>
        case VMO_YSTORE:  ctx->y = ctx->t;                              break;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	61da      	str	r2, [r3, #28]
 8002172:	e013      	b.n	800219c <ops0001+0x88>
        case VMO_BCISYNC: r = 1;                                        break;
 8002174:	2301      	movs	r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	e010      	b.n	800219c <ops0001+0x88>
        case VMO_THROW:   ctx->ior = ctx->t;                            break;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	b21a      	sxth	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002184:	e00a      	b.n	800219c <ops0001+0x88>
        case VMO_XFETCH:  ctx->t = ctx->x;                              break;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	e005      	b.n	800219c <ops0001+0x88>
        case VMO_YFETCH:  ctx->t = ctx->y;                              break;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69da      	ldr	r2, [r3, #28]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	e000      	b.n	800219c <ops0001+0x88>
        default: break;
 800219a:	bf00      	nop
    }
    if (inst & VMI_ZOODROP) VMpopData(ctx);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <ops0001+0x98>
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fc05 	bl	80019b6 <VMpopData>
    return r;
 80021ac:	68fb      	ldr	r3, [r7, #12]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop

080021b8 <VMapiCall>:
    API_LCDchar, API_LCDcharWidth, API_LCDfill, API_Milliseconds,   // C
    API_Buttons, API_CRC32                                          // 10
};

#define APIfs (sizeof(APIfns)/sizeof(APIfns[0]))
static VMcell_t VMapiCall(vm_ctx *ctx, int fn) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
    fn &= 0x7F;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021c8:	603b      	str	r3, [r7, #0]
    if (fn < APIfs) return APIfns[fn](ctx);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b11      	cmp	r3, #17
 80021ce:	d807      	bhi.n	80021e0 <VMapiCall+0x28>
 80021d0:	4a06      	ldr	r2, [pc, #24]	@ (80021ec <VMapiCall+0x34>)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
 80021dc:	4603      	mov	r3, r0
 80021de:	e001      	b.n	80021e4 <VMapiCall+0x2c>
    return -1;
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	0800dfd8 	.word	0x0800dfd8

080021f0 <VMgetRP>:

uint8_t VMgetRP(vm_ctx *ctx) {return ctx->rp;}
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <VMgetSP>:
uint8_t VMgetSP(vm_ctx *ctx) {return ctx->sp;}
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <VMreset>:
    (TEXTSIZE >> 10) - 1,       // 1K-cell pages of text memory less 1
    TEXTORIGIN >> 12,           // start address of text memory
};
#include <stdio.h>

void VMreset(vm_ctx *ctx) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    memset(ctx, 0, sizeof(ctx->DataMem)); // data space initializes to 0
 800222c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002230:	2100      	movs	r1, #0
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f00a ffdd 	bl	800d1f2 <memset>
    memset(ctx, 0, 64);         // wipe all up to stacks
 8002238:	2240      	movs	r2, #64	@ 0x40
 800223a:	2100      	movs	r1, #0
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f00a ffd8 	bl	800d1f2 <memset>
    ctx->boilerplate = boilerplate;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002248:	461a      	mov	r2, r3
 800224a:	4b14      	ldr	r3, [pc, #80]	@ (800229c <VMreset+0x78>)
 800224c:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
    ctx->DataMem[0] = 10;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	220a      	movs	r2, #10
 8002254:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    ctx->status = BCI_STATUS_STOPPED;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800225e:	2201      	movs	r2, #1
 8002260:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
    ctx->statusNew = BCI_STATUS_STOPPED;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800226a:	2201      	movs	r2, #1
 800226c:	f883 213b 	strb.w	r2, [r3, #315]	@ 0x13b
    VMinst_t blank = (VMinst_t)((BLANK_FLASH_BYTE << 24)
 8002270:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002274:	81fb      	strh	r3, [r7, #14]
                              | (BLANK_FLASH_BYTE << 16)
                              | (BLANK_FLASH_BYTE << 8)
                              |  BLANK_FLASH_BYTE);
    if (ctx->CodeMem[0] != (VMinst_t)blank) { // got code?
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800227c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	89fa      	ldrh	r2, [r7, #14]
 8002284:	429a      	cmp	r2, r3
 8002286:	d005      	beq.n	8002294 <VMreset+0x70>
        ctx->status = BCI_STATUS_RUNNING;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800228e:	2200      	movs	r2, #0
 8002290:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
        PRINTF("\nReset, VM is running\n");
    } else {
        PRINTF("\nReset, VM is stopped\n");
    }
}
 8002294:	bf00      	nop
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	0800e020 	.word	0x0800e020

080022a0 <load32>:
#else
  #define BLAKE2_INLINE inline
#endif

static BLAKE2_INLINE uint32_t load32( const void *src )
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
#if defined(NATIVE_LITTLE_ENDIAN)
  uint32_t w;
  memcpy(&w, src, sizeof w);
  return w;
#else
  const uint8_t *p = ( const uint8_t * )src;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	60fb      	str	r3, [r7, #12]
  return (( uint32_t )( p[0] ) <<  0) |
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
         (( uint32_t )( p[1] ) <<  8) |
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3301      	adds	r3, #1
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	021b      	lsls	r3, r3, #8
  return (( uint32_t )( p[0] ) <<  0) |
 80022ba:	431a      	orrs	r2, r3
         (( uint32_t )( p[2] ) << 16) |
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3302      	adds	r3, #2
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	041b      	lsls	r3, r3, #16
         (( uint32_t )( p[1] ) <<  8) |
 80022c4:	431a      	orrs	r2, r3
         (( uint32_t )( p[3] ) << 24) ;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3303      	adds	r3, #3
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	061b      	lsls	r3, r3, #24
         (( uint32_t )( p[2] ) << 16) |
 80022ce:	4313      	orrs	r3, r2
#endif
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <store16>:
                      (( uint32_t )( p[1] ) <<  8));
#endif
}

static BLAKE2_INLINE void store16( void *dst, uint16_t w )
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
#if defined(NATIVE_LITTLE_ENDIAN)
  memcpy(dst, &w, sizeof w);
#else
  uint8_t *p = ( uint8_t * )dst;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	60fb      	str	r3, [r7, #12]
  *p++ = ( uint8_t )w; w >>= 8;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60fa      	str	r2, [r7, #12]
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	887b      	ldrh	r3, [r7, #2]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	807b      	strh	r3, [r7, #2]
  *p++ = ( uint8_t )w;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	60fa      	str	r2, [r7, #12]
 8002304:	887a      	ldrh	r2, [r7, #2]
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	701a      	strb	r2, [r3, #0]
#endif
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <store32>:

static BLAKE2_INLINE void store32( void *dst, uint32_t w )
{
 8002316:	b480      	push	{r7}
 8002318:	b085      	sub	sp, #20
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
#if defined(NATIVE_LITTLE_ENDIAN)
  memcpy(dst, &w, sizeof w);
#else
  uint8_t *p = ( uint8_t * )dst;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	60fb      	str	r3, [r7, #12]
  p[0] = (uint8_t)(w >>  0);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	701a      	strb	r2, [r3, #0]
  p[1] = (uint8_t)(w >>  8);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	0a1a      	lsrs	r2, r3, #8
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3301      	adds	r3, #1
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	701a      	strb	r2, [r3, #0]
  p[2] = (uint8_t)(w >> 16);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	0c1a      	lsrs	r2, r3, #16
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3302      	adds	r3, #2
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	701a      	strb	r2, [r3, #0]
  p[3] = (uint8_t)(w >> 24);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	0e1a      	lsrs	r2, r3, #24
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3303      	adds	r3, #3
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	701a      	strb	r2, [r3, #0]
#endif
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <rotr32>:

static BLAKE2_INLINE uint32_t rotr32( const uint32_t w, const unsigned c )
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  return ( w >> c ) | ( w << ( 32 - c ) );
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	fa62 f303 	ror.w	r3, r2, r3
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <secure_zero_memory>:

/* prevents compiler optimizing out memset() */
static BLAKE2_INLINE void secure_zero_memory(void *v, size_t n)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  static void *(*const volatile memset_v)(void *, int, size_t) = &memset;
  memset_v(v, 0, n);
 8002386:	4b05      	ldr	r3, [pc, #20]	@ (800239c <secure_zero_memory+0x20>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	2100      	movs	r1, #0
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	0800e108 	.word	0x0800e108

080023a0 <blake2s_set_lastnode>:
  {  6, 15, 14,  9, 11,  3,  0,  8, 12,  2, 13,  7,  1,  4, 10,  5 } ,
  { 10,  2,  8,  4,  7,  6,  1,  5, 15, 11,  9, 14,  3, 12, 13 , 0 } ,
};

static void blake2s_set_lastnode( blake2s_state *S )
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  S->f[1] = (uint32_t)-1;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f04f 32ff 	mov.w	r2, #4294967295
 80023ae:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <blake2s_is_lastblock>:

/* Some helper functions, not necessarily useful */
static int blake2s_is_lastblock( const blake2s_state *S )
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  return S->f[0] != 0;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf14      	ite	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2300      	moveq	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <blake2s_set_lastblock>:

static void blake2s_set_lastblock( blake2s_state *S )
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  if( S->last_node ) blake2s_set_lastnode( S );
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <blake2s_set_lastblock+0x18>
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ffd5 	bl	80023a0 <blake2s_set_lastnode>

  S->f[0] = (uint32_t)-1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <blake2s_increment_counter>:

static void blake2s_increment_counter( blake2s_state *S, const uint32_t inc )
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  S->t[0] += inc;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1a      	ldr	r2, [r3, #32]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	441a      	add	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	621a      	str	r2, [r3, #32]
  S->t[1] += ( S->t[0] < inc );
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6a12      	ldr	r2, [r2, #32]
 8002424:	6839      	ldr	r1, [r7, #0]
 8002426:	4291      	cmp	r1, r2
 8002428:	bf8c      	ite	hi
 800242a:	2201      	movhi	r2, #1
 800242c:	2200      	movls	r2, #0
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	441a      	add	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <blake2s_init0>:

static void blake2s_init0( blake2s_state *S )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  int i;
  memset( S, 0, sizeof( blake2s_state ) );
 800244c:	227c      	movs	r2, #124	@ 0x7c
 800244e:	2100      	movs	r1, #0
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f00a fece 	bl	800d1f2 <memset>

  for( i = 0; i < 8; ++i ) S->h[i] = blake2s_IV[i];
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e00a      	b.n	8002472 <blake2s_init0+0x2e>
 800245c:	4a09      	ldr	r2, [pc, #36]	@ (8002484 <blake2s_init0+0x40>)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3301      	adds	r3, #1
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b07      	cmp	r3, #7
 8002476:	ddf1      	ble.n	800245c <blake2s_init0+0x18>
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	0800e030 	.word	0x0800e030

08002488 <blake2s_init_param>:

/* init2 xors IV with input parameter block */
static int blake2s_init_param( blake2s_state *S, const blake2s_param *P )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  const unsigned char *p = ( const unsigned char * )( P );
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	60bb      	str	r3, [r7, #8]
  int i;

  blake2s_init0( S );
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffd4 	bl	8002444 <blake2s_init0>

  /* IV XOR ParamBlock */
  for( i = 0; i < 8; ++i )
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	e014      	b.n	80024cc <blake2s_init_param+0x44>
    S->h[i] ^= load32( &p[i * 4] );
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	461a      	mov	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4413      	add	r3, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fef7 	bl	80022a0 <load32>
 80024b2:	4601      	mov	r1, r0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024bc:	4059      	eors	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for( i = 0; i < 8; ++i )
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	3301      	adds	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b07      	cmp	r3, #7
 80024d0:	dde7      	ble.n	80024a2 <blake2s_init_param+0x1a>

  S->outlen = P->digest_length;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	675a      	str	r2, [r3, #116]	@ 0x74
  return 0;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <hotround>:
static const uint8_t idxc[] = {8, 9, 10, 11, 10, 11, 8, 9};
static const uint8_t idxd[] = {12, 13, 14, 15, 15, 12, 13, 14};

// The hot spot, called 10 times per 64-byte block
static void hotround( int r )
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  for( int i = 0; i < 8; ++i ) {
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	e0ad      	b.n	8002652 <hotround+0x16a>
    uint8_t a = i & 3;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	72fb      	strb	r3, [r7, #11]
    uint8_t b = idxb[i];
 8002500:	4a58      	ldr	r2, [pc, #352]	@ (8002664 <hotround+0x17c>)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4413      	add	r3, r2
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	72bb      	strb	r3, [r7, #10]
    uint8_t c = idxc[i];
 800250a:	4a57      	ldr	r2, [pc, #348]	@ (8002668 <hotround+0x180>)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	727b      	strb	r3, [r7, #9]
    uint8_t d = idxd[i];
 8002514:	4a55      	ldr	r2, [pc, #340]	@ (800266c <hotround+0x184>)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4413      	add	r3, r2
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	723b      	strb	r3, [r7, #8]
    v[a] += v[b] + m[blake2s_sigma[r][2*i+0]];
 800251e:	7afb      	ldrb	r3, [r7, #11]
 8002520:	4a53      	ldr	r2, [pc, #332]	@ (8002670 <hotround+0x188>)
 8002522:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002526:	7abb      	ldrb	r3, [r7, #10]
 8002528:	4a51      	ldr	r2, [pc, #324]	@ (8002670 <hotround+0x188>)
 800252a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4c50      	ldr	r4, [pc, #320]	@ (8002674 <hotround+0x18c>)
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	0100      	lsls	r0, r0, #4
 8002538:	4420      	add	r0, r4
 800253a:	4403      	add	r3, r0
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	4b4d      	ldr	r3, [pc, #308]	@ (8002678 <hotround+0x190>)
 8002542:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002546:	441a      	add	r2, r3
 8002548:	7afb      	ldrb	r3, [r7, #11]
 800254a:	440a      	add	r2, r1
 800254c:	4948      	ldr	r1, [pc, #288]	@ (8002670 <hotround+0x188>)
 800254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    v[d] = rotr32(v[d] ^ v[a], 16);
 8002552:	7a3b      	ldrb	r3, [r7, #8]
 8002554:	4a46      	ldr	r2, [pc, #280]	@ (8002670 <hotround+0x188>)
 8002556:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800255a:	7afb      	ldrb	r3, [r7, #11]
 800255c:	4944      	ldr	r1, [pc, #272]	@ (8002670 <hotround+0x188>)
 800255e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002562:	4053      	eors	r3, r2
 8002564:	7a3c      	ldrb	r4, [r7, #8]
 8002566:	2110      	movs	r1, #16
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fef7 	bl	800235c <rotr32>
 800256e:	4603      	mov	r3, r0
 8002570:	4a3f      	ldr	r2, [pc, #252]	@ (8002670 <hotround+0x188>)
 8002572:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    v[c] += v[d];
 8002576:	7a7b      	ldrb	r3, [r7, #9]
 8002578:	4a3d      	ldr	r2, [pc, #244]	@ (8002670 <hotround+0x188>)
 800257a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800257e:	7a3b      	ldrb	r3, [r7, #8]
 8002580:	4a3b      	ldr	r2, [pc, #236]	@ (8002670 <hotround+0x188>)
 8002582:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002586:	7a7b      	ldrb	r3, [r7, #9]
 8002588:	440a      	add	r2, r1
 800258a:	4939      	ldr	r1, [pc, #228]	@ (8002670 <hotround+0x188>)
 800258c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    v[b] = rotr32(v[b] ^ v[c], 12);
 8002590:	7abb      	ldrb	r3, [r7, #10]
 8002592:	4a37      	ldr	r2, [pc, #220]	@ (8002670 <hotround+0x188>)
 8002594:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002598:	7a7b      	ldrb	r3, [r7, #9]
 800259a:	4935      	ldr	r1, [pc, #212]	@ (8002670 <hotround+0x188>)
 800259c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025a0:	4053      	eors	r3, r2
 80025a2:	7abc      	ldrb	r4, [r7, #10]
 80025a4:	210c      	movs	r1, #12
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fed8 	bl	800235c <rotr32>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4a30      	ldr	r2, [pc, #192]	@ (8002670 <hotround+0x188>)
 80025b0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    v[a] += v[b] + m[blake2s_sigma[r][2*i+1]];
 80025b4:	7afb      	ldrb	r3, [r7, #11]
 80025b6:	4a2e      	ldr	r2, [pc, #184]	@ (8002670 <hotround+0x188>)
 80025b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025bc:	7abb      	ldrb	r3, [r7, #10]
 80025be:	4a2c      	ldr	r2, [pc, #176]	@ (8002670 <hotround+0x188>)
 80025c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	3301      	adds	r3, #1
 80025ca:	4c2a      	ldr	r4, [pc, #168]	@ (8002674 <hotround+0x18c>)
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	0100      	lsls	r0, r0, #4
 80025d0:	4420      	add	r0, r4
 80025d2:	4403      	add	r3, r0
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	4b27      	ldr	r3, [pc, #156]	@ (8002678 <hotround+0x190>)
 80025da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80025de:	441a      	add	r2, r3
 80025e0:	7afb      	ldrb	r3, [r7, #11]
 80025e2:	440a      	add	r2, r1
 80025e4:	4922      	ldr	r1, [pc, #136]	@ (8002670 <hotround+0x188>)
 80025e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    v[d] = rotr32(v[d] ^ v[a], 8);
 80025ea:	7a3b      	ldrb	r3, [r7, #8]
 80025ec:	4a20      	ldr	r2, [pc, #128]	@ (8002670 <hotround+0x188>)
 80025ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025f2:	7afb      	ldrb	r3, [r7, #11]
 80025f4:	491e      	ldr	r1, [pc, #120]	@ (8002670 <hotround+0x188>)
 80025f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025fa:	4053      	eors	r3, r2
 80025fc:	7a3c      	ldrb	r4, [r7, #8]
 80025fe:	2108      	movs	r1, #8
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff feab 	bl	800235c <rotr32>
 8002606:	4603      	mov	r3, r0
 8002608:	4a19      	ldr	r2, [pc, #100]	@ (8002670 <hotround+0x188>)
 800260a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    v[c] += v[d];
 800260e:	7a7b      	ldrb	r3, [r7, #9]
 8002610:	4a17      	ldr	r2, [pc, #92]	@ (8002670 <hotround+0x188>)
 8002612:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002616:	7a3b      	ldrb	r3, [r7, #8]
 8002618:	4a15      	ldr	r2, [pc, #84]	@ (8002670 <hotround+0x188>)
 800261a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800261e:	7a7b      	ldrb	r3, [r7, #9]
 8002620:	440a      	add	r2, r1
 8002622:	4913      	ldr	r1, [pc, #76]	@ (8002670 <hotround+0x188>)
 8002624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    v[b] = rotr32(v[b] ^ v[c], 7);
 8002628:	7abb      	ldrb	r3, [r7, #10]
 800262a:	4a11      	ldr	r2, [pc, #68]	@ (8002670 <hotround+0x188>)
 800262c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002630:	7a7b      	ldrb	r3, [r7, #9]
 8002632:	490f      	ldr	r1, [pc, #60]	@ (8002670 <hotround+0x188>)
 8002634:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002638:	4053      	eors	r3, r2
 800263a:	7abc      	ldrb	r4, [r7, #10]
 800263c:	2107      	movs	r1, #7
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fe8c 	bl	800235c <rotr32>
 8002644:	4603      	mov	r3, r0
 8002646:	4a0a      	ldr	r2, [pc, #40]	@ (8002670 <hotround+0x188>)
 8002648:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
  for( int i = 0; i < 8; ++i ) {
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	3301      	adds	r3, #1
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b07      	cmp	r3, #7
 8002656:	f77f af4e 	ble.w	80024f6 <hotround+0xe>
  }
}
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	bd90      	pop	{r4, r7, pc}
 8002664:	0800e0f0 	.word	0x0800e0f0
 8002668:	0800e0f8 	.word	0x0800e0f8
 800266c:	0800e100 	.word	0x0800e100
 8002670:	2400e96c 	.word	0x2400e96c
 8002674:	0800e050 	.word	0x0800e050
 8002678:	2400e92c 	.word	0x2400e92c

0800267c <blake2s_compress>:

static void blake2s_compress( blake2s_state *S, const uint8_t in[BLAKE2S_BLOCKBYTES] )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  int i;

  for( i = 0; i < 16; ++i ) {
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	e00e      	b.n	80026aa <blake2s_compress+0x2e>
    m[i] = load32( in + i * sizeof( m[i] ) );
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	4413      	add	r3, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fe03 	bl	80022a0 <load32>
 800269a:	4602      	mov	r2, r0
 800269c:	4936      	ldr	r1, [pc, #216]	@ (8002778 <blake2s_compress+0xfc>)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for( i = 0; i < 16; ++i ) {
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3301      	adds	r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b0f      	cmp	r3, #15
 80026ae:	dded      	ble.n	800268c <blake2s_compress+0x10>
  }

  for( i = 0; i < 8; ++i ) {
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	e00a      	b.n	80026cc <blake2s_compress+0x50>
    v[i] = S->h[i];
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026be:	492f      	ldr	r1, [pc, #188]	@ (800277c <blake2s_compress+0x100>)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for( i = 0; i < 8; ++i ) {
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3301      	adds	r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2b07      	cmp	r3, #7
 80026d0:	ddf1      	ble.n	80026b6 <blake2s_compress+0x3a>
  }

  v[ 8] = blake2s_IV[0];
 80026d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002780 <blake2s_compress+0x104>)
 80026d4:	4b29      	ldr	r3, [pc, #164]	@ (800277c <blake2s_compress+0x100>)
 80026d6:	621a      	str	r2, [r3, #32]
  v[ 9] = blake2s_IV[1];
 80026d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002784 <blake2s_compress+0x108>)
 80026da:	4b28      	ldr	r3, [pc, #160]	@ (800277c <blake2s_compress+0x100>)
 80026dc:	625a      	str	r2, [r3, #36]	@ 0x24
  v[10] = blake2s_IV[2];
 80026de:	4a2a      	ldr	r2, [pc, #168]	@ (8002788 <blake2s_compress+0x10c>)
 80026e0:	4b26      	ldr	r3, [pc, #152]	@ (800277c <blake2s_compress+0x100>)
 80026e2:	629a      	str	r2, [r3, #40]	@ 0x28
  v[11] = blake2s_IV[3];
 80026e4:	4a29      	ldr	r2, [pc, #164]	@ (800278c <blake2s_compress+0x110>)
 80026e6:	4b25      	ldr	r3, [pc, #148]	@ (800277c <blake2s_compress+0x100>)
 80026e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  v[12] = S->t[0] ^ blake2s_IV[4];
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4a28      	ldr	r2, [pc, #160]	@ (8002790 <blake2s_compress+0x114>)
 80026f0:	4053      	eors	r3, r2
 80026f2:	4a22      	ldr	r2, [pc, #136]	@ (800277c <blake2s_compress+0x100>)
 80026f4:	6313      	str	r3, [r2, #48]	@ 0x30
  v[13] = S->t[1] ^ blake2s_IV[5];
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	4a26      	ldr	r2, [pc, #152]	@ (8002794 <blake2s_compress+0x118>)
 80026fc:	4053      	eors	r3, r2
 80026fe:	4a1f      	ldr	r2, [pc, #124]	@ (800277c <blake2s_compress+0x100>)
 8002700:	6353      	str	r3, [r2, #52]	@ 0x34
  v[14] = S->f[0] ^ blake2s_IV[6];
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002706:	4a24      	ldr	r2, [pc, #144]	@ (8002798 <blake2s_compress+0x11c>)
 8002708:	4053      	eors	r3, r2
 800270a:	4a1c      	ldr	r2, [pc, #112]	@ (800277c <blake2s_compress+0x100>)
 800270c:	6393      	str	r3, [r2, #56]	@ 0x38
  v[15] = S->f[1] ^ blake2s_IV[7];
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002712:	4a22      	ldr	r2, [pc, #136]	@ (800279c <blake2s_compress+0x120>)
 8002714:	4053      	eors	r3, r2
 8002716:	4a19      	ldr	r2, [pc, #100]	@ (800277c <blake2s_compress+0x100>)
 8002718:	63d3      	str	r3, [r2, #60]	@ 0x3c

  for (int r = 0; r < 10; r++) {
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	e005      	b.n	800272c <blake2s_compress+0xb0>
    hotround(r);
 8002720:	68b8      	ldr	r0, [r7, #8]
 8002722:	f7ff fee1 	bl	80024e8 <hotround>
  for (int r = 0; r < 10; r++) {
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	3301      	adds	r3, #1
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b09      	cmp	r3, #9
 8002730:	ddf6      	ble.n	8002720 <blake2s_compress+0xa4>
  }

  for( i = 0; i < 8; ++i ) {
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	e016      	b.n	8002766 <blake2s_compress+0xea>
    S->h[i] = S->h[i] ^ v[i] ^ v[i + 8];
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002740:	490e      	ldr	r1, [pc, #56]	@ (800277c <blake2s_compress+0x100>)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002748:	405a      	eors	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3308      	adds	r3, #8
 800274e:	490b      	ldr	r1, [pc, #44]	@ (800277c <blake2s_compress+0x100>)
 8002750:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002754:	ea82 0103 	eor.w	r1, r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for( i = 0; i < 8; ++i ) {
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3301      	adds	r3, #1
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b07      	cmp	r3, #7
 800276a:	dde5      	ble.n	8002738 <blake2s_compress+0xbc>
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	2400e92c 	.word	0x2400e92c
 800277c:	2400e96c 	.word	0x2400e96c
 8002780:	6a09e667 	.word	0x6a09e667
 8002784:	bb67ae85 	.word	0xbb67ae85
 8002788:	3c6ef372 	.word	0x3c6ef372
 800278c:	a54ff53a 	.word	0xa54ff53a
 8002790:	510e527f 	.word	0x510e527f
 8002794:	9b05688c 	.word	0x9b05688c
 8002798:	1f83d9ab 	.word	0x1f83d9ab
 800279c:	5be0cd19 	.word	0x5be0cd19

080027a0 <b2s_hmac_putc>:

void b2s_hmac_putc(blake2s_state *S, uint8_t c) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]
  if (S->buflen == BLAKE2S_BLOCKBYTES) {
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b0:	2b40      	cmp	r3, #64	@ 0x40
 80027b2:	d10c      	bne.n	80027ce <b2s_hmac_putc+0x2e>
    blake2s_increment_counter(S, BLAKE2S_BLOCKBYTES);
 80027b4:	2140      	movs	r1, #64	@ 0x40
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff fe25 	bl	8002406 <blake2s_increment_counter>
    blake2s_compress( S, S->buf );
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3330      	adds	r3, #48	@ 0x30
 80027c0:	4619      	mov	r1, r3
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff ff5a 	bl	800267c <blake2s_compress>
    S->buflen = 0;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	671a      	str	r2, [r3, #112]	@ 0x70
  }
  S->buf[S->buflen++] = c;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d2:	1c59      	adds	r1, r3, #1
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6711      	str	r1, [r2, #112]	@ 0x70
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <b2s_hmac_putc_g>:
void b2s_hmac_putc_g(size_t *S, uint8_t c) {
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	70fb      	strb	r3, [r7, #3]
  b2s_hmac_putc((void *)S, c);
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	4619      	mov	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ffd0 	bl	80027a0 <b2s_hmac_putc>
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <b2s_hmac_final>:

int b2s_hmac_final( blake2s_state *S, uint8_t *out )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	@ 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint8_t buffer[BLAKE2S_OUTBYTES] = {0};
 8002812:	f107 030c 	add.w	r3, r7, #12
 8002816:	2220      	movs	r2, #32
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f00a fce9 	bl	800d1f2 <memset>

  if( blake2s_is_lastblock( S ) ) return -1;
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fdcb 	bl	80023bc <blake2s_is_lastblock>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <b2s_hmac_final+0x2a>
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	e040      	b.n	80028b4 <b2s_hmac_final+0xac>

  blake2s_increment_counter( S, ( uint32_t )S->buflen );
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002836:	4619      	mov	r1, r3
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fde4 	bl	8002406 <blake2s_increment_counter>
  blake2s_set_lastblock( S );
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff fdcd 	bl	80023de <blake2s_set_lastblock>
  memset( S->buf + S->buflen, 0, BLAKE2S_BLOCKBYTES - S->buflen ); /* Padding */
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3330      	adds	r3, #48	@ 0x30
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6f12      	ldr	r2, [r2, #112]	@ 0x70
 800284c:	1898      	adds	r0, r3, r2
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002852:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002856:	461a      	mov	r2, r3
 8002858:	2100      	movs	r1, #0
 800285a:	f00a fcca 	bl	800d1f2 <memset>
  blake2s_compress( S, S->buf );
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3330      	adds	r3, #48	@ 0x30
 8002862:	4619      	mov	r1, r3
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff09 	bl	800267c <blake2s_compress>

  for( int i = 0; i < 8; ++i ) /* Output full hash to temp buffer */
 800286a:	2300      	movs	r3, #0
 800286c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800286e:	e00e      	b.n	800288e <b2s_hmac_final+0x86>
    store32( buffer + sizeof( S->h[i] ) * i, S->h[i] );
 8002870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	f107 020c 	add.w	r2, r7, #12
 8002878:	18d0      	adds	r0, r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800287e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002882:	4619      	mov	r1, r3
 8002884:	f7ff fd47 	bl	8002316 <store32>
  for( int i = 0; i < 8; ++i ) /* Output full hash to temp buffer */
 8002888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288a:	3301      	adds	r3, #1
 800288c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800288e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002890:	2b07      	cmp	r3, #7
 8002892:	dded      	ble.n	8002870 <b2s_hmac_final+0x68>

  memcpy( out, buffer, S->outlen );
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002898:	461a      	mov	r2, r3
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	4619      	mov	r1, r3
 80028a0:	6838      	ldr	r0, [r7, #0]
 80028a2:	f00a fd22 	bl	800d2ea <memcpy>
  secure_zero_memory(buffer, sizeof(buffer));
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	2120      	movs	r1, #32
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fd65 	bl	800237c <secure_zero_memory>
  return 0;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3730      	adds	r7, #48	@ 0x30
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <b2s_hmac_final_g>:
int b2s_hmac_final_g(size_t *S, uint8_t *out) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  return b2s_hmac_final((void *)S, out);
 80028c6:	6839      	ldr	r1, [r7, #0]
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff9d 	bl	8002808 <b2s_hmac_final>
 80028ce:	4603      	mov	r3, r0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <b2s_hmac_puts>:


int b2s_hmac_puts( blake2s_state *S, const uint8_t *in, int inlen )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  while (inlen--) {
 80028e4:	e007      	b.n	80028f6 <b2s_hmac_puts+0x1e>
    b2s_hmac_putc( S, *in++ );
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	60ba      	str	r2, [r7, #8]
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	4619      	mov	r1, r3
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff ff55 	bl	80027a0 <b2s_hmac_putc>
  while (inlen--) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	1e5a      	subs	r2, r3, #1
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f2      	bne.n	80028e6 <b2s_hmac_puts+0xe>
  }
  return 0;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <b2s_hmac_init>:

int b2s_hmac_init(blake2s_state *S, const uint8_t *key, int hsize, uint64_t ctr)
{
 800290a:	b590      	push	{r4, r7, lr}
 800290c:	b09d      	sub	sp, #116	@ 0x74
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
  blake2s_param P[1];

  if ( ( !hsize ) || ( hsize > BLAKE2S_OUTBYTES ) ) return 0;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <b2s_hmac_init+0x18>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b20      	cmp	r3, #32
 8002920:	dd01      	ble.n	8002926 <b2s_hmac_init+0x1c>
 8002922:	2300      	movs	r3, #0
 8002924:	e075      	b.n	8002a12 <b2s_hmac_init+0x108>

  P->digest_length = (uint8_t)hsize;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  P->key_length    = BLAKE2S_KEYBYTES;
 800292e:	2320      	movs	r3, #32
 8002930:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
  P->fanout        = 1;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  P->depth         = 1;
 800293a:	2301      	movs	r3, #1
 800293c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  store32( &P->leaf_length, 0 );
 8002940:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002944:	3304      	adds	r3, #4
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fce4 	bl	8002316 <store32>
  store32( &P->node_offset, 0 );
 800294e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002952:	3308      	adds	r3, #8
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fcdd 	bl	8002316 <store32>
  store16( &P->xof_length, 0 );
 800295c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002960:	330c      	adds	r3, #12
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fcb9 	bl	80022dc <store16>
  P->node_depth    = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  P->inner_length  = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  /* memset(P->reserved, 0, sizeof(P->reserved) ); */
  memset( P->salt,     0, sizeof( P->salt ) );
 8002976:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800297a:	3310      	adds	r3, #16
 800297c:	2208      	movs	r2, #8
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f00a fc36 	bl	800d1f2 <memset>
  memset( P->personal, 0, sizeof( P->personal ) );
 8002986:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800298a:	3318      	adds	r3, #24
 800298c:	2208      	movs	r2, #8
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f00a fc2e 	bl	800d1f2 <memset>

  if( blake2s_init_param( S, P ) < 0 ) return 0;
 8002996:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800299a:	4619      	mov	r1, r3
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7ff fd73 	bl	8002488 <blake2s_init_param>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	da01      	bge.n	80029ac <b2s_hmac_init+0xa2>
 80029a8:	2300      	movs	r3, #0
 80029aa:	e032      	b.n	8002a12 <b2s_hmac_init+0x108>
  S->t[0] ^= (uint32_t) ctr;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1a      	ldr	r2, [r3, #32]
 80029b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029b4:	405a      	eors	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	621a      	str	r2, [r3, #32]
  S->t[1] ^= ctr >> 32;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80029be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	000a      	movs	r2, r1
 80029cc:	2300      	movs	r3, #0
 80029ce:	4613      	mov	r3, r2
 80029d0:	ea84 0203 	eor.w	r2, r4, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	625a      	str	r2, [r3, #36]	@ 0x24

  {
    uint8_t block[BLAKE2S_BLOCKBYTES];
    memset( block, 0, BLAKE2S_BLOCKBYTES );
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	2240      	movs	r2, #64	@ 0x40
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f00a fc06 	bl	800d1f2 <memset>
    memcpy( block, key, BLAKE2S_KEYBYTES );
 80029e6:	f107 0310 	add.w	r3, r7, #16
 80029ea:	2220      	movs	r2, #32
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f00a fc7b 	bl	800d2ea <memcpy>
    b2s_hmac_puts( S, block, BLAKE2S_BLOCKBYTES );
 80029f4:	f107 0310 	add.w	r3, r7, #16
 80029f8:	2240      	movs	r2, #64	@ 0x40
 80029fa:	4619      	mov	r1, r3
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f7ff ff6b 	bl	80028d8 <b2s_hmac_puts>
    secure_zero_memory( block, BLAKE2S_BLOCKBYTES ); /* Burn the key from stack */
 8002a02:	f107 0310 	add.w	r3, r7, #16
 8002a06:	2140      	movs	r1, #64	@ 0x40
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fcb7 	bl	800237c <secure_zero_memory>
  }
  return S->outlen;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3774      	adds	r7, #116	@ 0x74
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd90      	pop	{r4, r7, pc}

08002a1a <b2s_hmac_init_g>:
int b2s_hmac_init_g(size_t *S, const uint8_t *key, int hsize, uint64_t ctr) {
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b086      	sub	sp, #24
 8002a1e:	af02      	add	r7, sp, #8
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
  return b2s_hmac_init((void *)S, key, hsize, ctr);
 8002a26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a2a:	e9cd 2300 	strd	r2, r3, [sp]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f7ff ff69 	bl	800290a <b2s_hmac_init>
 8002a38:	4603      	mov	r3, r0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <DUMP>:
    }
}
#define PRINTF  if (MOLE_TRACE > 1) printf
#define PRINTf  printf
#else
static void DUMP(const uint8_t *src, uint8_t len) {}
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	70fb      	strb	r3, [r7, #3]
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <Allocate>:
// Allocate is used at startup.

static uint32_t context_memory[MOLE_ALLOC_MEM_UINT32S];
static int allocated_uint32s;

static void *Allocate(int bytes) {
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	void *r = &context_memory[allocated_uint32s];
 8002a64:	4b0a      	ldr	r3, [pc, #40]	@ (8002a90 <Allocate+0x34>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a94 <Allocate+0x38>)
 8002a6c:	4413      	add	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
	allocated_uint32s += ((bytes + 3) >> 2);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3303      	adds	r3, #3
 8002a74:	109a      	asrs	r2, r3, #2
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <Allocate+0x34>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4a04      	ldr	r2, [pc, #16]	@ (8002a90 <Allocate+0x34>)
 8002a7e:	6013      	str	r3, [r2, #0]
	return r;
 8002a80:	68fb      	ldr	r3, [r7, #12]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	240129ac 	.word	0x240129ac
 8002a94:	2400e9ac 	.word	0x2400e9ac

08002a98 <testHMAC>:

// Key management

static const uint8_t KDFhashKey[] = KDF_PASS;

static int testHMAC(port_ctx *ctx, const uint8_t *buf) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
    if (memcmp(ctx->hmac, buf, MOLE_HMAC_LENGTH)) return MOLE_ERROR_BAD_HMAC;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	33b1      	adds	r3, #177	@ 0xb1
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	6839      	ldr	r1, [r7, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f00a fb91 	bl	800d1d2 <memcmp>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <testHMAC+0x22>
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e000      	b.n	8002abc <testHMAC+0x24>
    return 0;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <testKey>:

static int testKey(port_ctx *ctx, const uint8_t *key) {
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
    BeginHash(CTX->rhCtx, KDFhashKey, MOLE_HMAC_LENGTH, 0);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6898      	ldr	r0, [r3, #8]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	e9cd 2300 	strd	r2, r3, [sp]
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	491b      	ldr	r1, [pc, #108]	@ (8002b54 <testKey+0x90>)
 8002ae6:	47a0      	blx	r4
        DUMP(&key[0], MOLE_PASSCODE_HMAC);
 8002ae8:	2130      	movs	r1, #48	@ 0x30
 8002aea:	6838      	ldr	r0, [r7, #0]
 8002aec:	f7ff ffa9 	bl	8002a42 <DUMP>
        PRINTF("keyset data\n");
    for (int i=0; i < MOLE_PASSCODE_HMAC; i++) {
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	e00c      	b.n	8002b10 <testKey+0x4c>
        Hash(CTX->rhCtx, key[i]);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6890      	ldr	r0, [r2, #8]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	6839      	ldr	r1, [r7, #0]
 8002b02:	440a      	add	r2, r1
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	4611      	mov	r1, r2
 8002b08:	4798      	blx	r3
    for (int i=0; i < MOLE_PASSCODE_HMAC; i++) {
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b2f      	cmp	r3, #47	@ 0x2f
 8002b14:	ddef      	ble.n	8002af6 <testKey+0x32>
    }
    EndHash(CTX->rhCtx, ctx->hmac);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6890      	ldr	r0, [r2, #8]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	32b1      	adds	r2, #177	@ 0xb1
 8002b22:	4611      	mov	r1, r2
 8002b24:	4798      	blx	r3
        DUMP(ctx->hmac, MOLE_HMAC_LENGTH);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	33b1      	adds	r3, #177	@ 0xb1
 8002b2a:	2110      	movs	r1, #16
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff88 	bl	8002a42 <DUMP>
        PRINTF("expected key hmac");
        DUMP(&key[MOLE_PASSCODE_HMAC], MOLE_HMAC_LENGTH);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	3330      	adds	r3, #48	@ 0x30
 8002b36:	2110      	movs	r1, #16
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff82 	bl	8002a42 <DUMP>
        PRINTF("actual key hmac\n");
    return testHMAC(ctx, &key[MOLE_PASSCODE_HMAC]);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	3330      	adds	r3, #48	@ 0x30
 8002b42:	4619      	mov	r1, r3
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ffa7 	bl	8002a98 <testHMAC>
 8002b4a:	4603      	mov	r3, r0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd90      	pop	{r4, r7, pc}
 8002b54:	0800e10c 	.word	0x0800e10c

08002b58 <SendByteU>:

// Send raw binary out to the stream. Certain bytes are replaced by escape
// sequences so MOLE_TAG_END is not streamed out by accident.

static void SendByteU(port_ctx *ctx, uint8_t c) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	70fb      	strb	r3, [r7, #3]
    if ((c & 0xFE) == MOLE_TAG_END) {   // MOLE_TAG_END or MOLE_ESCAPE
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002b6a:	2b0a      	cmp	r3, #10
 8002b6c:	d113      	bne.n	8002b96 <SendByteU+0x3e>
        TX(MOLE_ESCAPE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	200b      	movs	r0, #11
 8002b74:	4798      	blx	r3
        TX(c & 1);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	78fa      	ldrb	r2, [r7, #3]
 8002b7c:	f002 0201 	and.w	r2, r2, #1
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	4610      	mov	r0, r2
 8002b84:	4798      	blx	r3
        ctx->counter++;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
 8002b94:	e004      	b.n	8002ba0 <SendByteU+0x48>
    } else {
        TX(c);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4798      	blx	r3
    }
    ctx->counter++;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <SendByte>:

static void SendByte(port_ctx *ctx, uint8_t c) {
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	70fb      	strb	r3, [r7, #3]
    SendByteU(ctx, c);
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ffc6 	bl	8002b58 <SendByteU>
    Hash(CTX->thCtx, c);                // add to HMAC
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6912      	ldr	r2, [r2, #16]
 8002bd4:	78f9      	ldrb	r1, [r7, #3]
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4798      	blx	r3
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <SendN>:

static void SendN(port_ctx *ctx, const uint8_t *src, int length) {
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < length; i++) {
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	e00a      	b.n	8002c0a <SendN+0x28>
        SendByte(ctx, src[i]);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f7ff ffd9 	bl	8002bb6 <SendByte>
    for (int i = 0; i < length; i++) {
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3301      	adds	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	dbf0      	blt.n	8002bf4 <SendN+0x12>
    }
}
 8002c12:	bf00      	nop
 8002c14:	bf00      	nop
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <Send2>:

static void Send2(port_ctx *ctx, int x) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
    SendByte(ctx, x) ;                  // RX buffer size[2]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ffc2 	bl	8002bb6 <SendByte>
    SendByte(ctx, x >> 8) ;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	121b      	asrs	r3, r3, #8
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	4619      	mov	r1, r3
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff ffbb 	bl	8002bb6 <SendByte>
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <SendBlock>:

static void SendBlock(port_ctx *ctx, const uint8_t *src) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
    SendN(ctx, src, MOLE_BLOCKSIZE);
 8002c52:	2210      	movs	r2, #16
 8002c54:	6839      	ldr	r1, [r7, #0]
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff ffc3 	bl	8002be2 <SendN>
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <SendEnd>:

static void SendEnd(port_ctx *ctx) {    // send END tag
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
    ctx->counter++;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    TX(MOLE_TAG_END);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	200a      	movs	r0, #10
 8002c80:	4798      	blx	r3
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <SendBoiler>:

static void SendBoiler(port_ctx *ctx) { // send boilerplate packet
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
    uint8_t len = ctx->boilerplate[0];
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	72fb      	strb	r3, [r7, #11]
    SendByteU(ctx, MOLE_TAG_BOILERPLATE);
 8002c9c:	2115      	movs	r1, #21
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ff5a 	bl	8002b58 <SendByteU>
    for (int i = 0; i <= len; i++) SendByteU(ctx, ctx->boilerplate[i]);
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e00c      	b.n	8002cc4 <SendBoiler+0x3a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff4d 	bl	8002b58 <SendByteU>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	7afb      	ldrb	r3, [r7, #11]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	ddee      	ble.n	8002caa <SendBoiler+0x20>
    SendByteU(ctx, 0);                  // zero-terminate to stringify
 8002ccc:	2100      	movs	r1, #0
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ff42 	bl	8002b58 <SendByteU>
    SendEnd(ctx);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ffc5 	bl	8002c64 <SendEnd>
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <BIST>:
static const uint8_t BISTdecode[16] = {
    0xBC, 0xD0, 0x2A, 0x18, 0xBF, 0x3F, 0x01, 0xD1,
    0x92, 0x92, 0xDE, 0x30, 0xA7, 0xA8, 0xFD, 0xAC};

// Test with with keys and rxbuf = 0
static int BIST(port_ctx *ctx, int protocol) {
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
    BeginHash  (CTX->rhCtx, ctx->hmackey, MOLE_HMAC_LENGTH, 0);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6898      	ldr	r0, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	e9cd 2300 	strd	r2, r3, [sp]
 8002d08:	2210      	movs	r2, #16
 8002d0a:	47a0      	blx	r4
    BeginCipher(CTX->rcCtx, ctx->cryptokey, ctx->rxbuf, 0);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6858      	ldr	r0, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002d20:	2300      	movs	r3, #0
 8002d22:	47a0      	blx	r4
    BlockCipher(CTX->rcCtx, ctx->rxbuf, ctx->rxbuf, 0);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6858      	ldr	r0, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002d38:	2300      	movs	r3, #0
 8002d3a:	47a0      	blx	r4
    if (memcmp(BISTdecode, ctx->rxbuf, MOLE_BLOCKSIZE)) {
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d42:	2210      	movs	r2, #16
 8002d44:	4619      	mov	r1, r3
 8002d46:	481c      	ldr	r0, [pc, #112]	@ (8002db8 <BIST+0xd4>)
 8002d48:	f00a fa43 	bl	800d1d2 <memcmp>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <BIST+0x72>
        return MOLE_ERROR_BAD_BIST;
 8002d52:	2311      	movs	r3, #17
 8002d54:	e02b      	b.n	8002dae <BIST+0xca>
    }
    for (int i = 0; i < MOLE_BLOCKSIZE; i++) {
 8002d56:	2300      	movs	r3, #0
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	e00e      	b.n	8002d7a <BIST+0x96>
        Hash(CTX->rhCtx, ctx->rxbuf[i]);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6890      	ldr	r0, [r2, #8]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	f8d2 109c 	ldr.w	r1, [r2, #156]	@ 0x9c
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	440a      	add	r2, r1
 8002d6e:	7812      	ldrb	r2, [r2, #0]
 8002d70:	4611      	mov	r1, r2
 8002d72:	4798      	blx	r3
    for (int i = 0; i < MOLE_BLOCKSIZE; i++) {
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3301      	adds	r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b0f      	cmp	r3, #15
 8002d7e:	dded      	ble.n	8002d5c <BIST+0x78>
    }
    EndHash(CTX->rhCtx, ctx->rxbuf);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6890      	ldr	r0, [r2, #8]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	f8d2 209c 	ldr.w	r2, [r2, #156]	@ 0x9c
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4798      	blx	r3
    if (memcmp(BISThmac, ctx->rxbuf, MOLE_HMAC_LENGTH)) {
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d98:	2210      	movs	r2, #16
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4807      	ldr	r0, [pc, #28]	@ (8002dbc <BIST+0xd8>)
 8002d9e:	f00a fa18 	bl	800d1d2 <memcmp>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <BIST+0xc8>
        return MOLE_ERROR_BAD_BIST;
 8002da8:	2311      	movs	r3, #17
 8002daa:	e000      	b.n	8002dae <BIST+0xca>
    }
    return 0;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd90      	pop	{r4, r7, pc}
 8002db6:	bf00      	nop
 8002db8:	0800e13c 	.word	0x0800e13c
 8002dbc:	0800e12c 	.word	0x0800e12c

08002dc0 <SendTxBuf>:

static void SendTxBuf(port_ctx *ctx) {
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    BlockCipher(CTX->tcCtx, ctx->txbuf, ctx->txbuf, 0);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68d8      	ldr	r0, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8002ddc:	2300      	movs	r3, #0
 8002dde:	47a0      	blx	r4
    SendBlock(ctx, ctx->txbuf);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	33a0      	adds	r3, #160	@ 0xa0
 8002de4:	4619      	mov	r1, r3
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ff2e 	bl	8002c48 <SendBlock>
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd90      	pop	{r4, r7, pc}

08002df4 <SendHeader>:

static void SendHeader(port_ctx *ctx, int tag) {
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
    SendEnd(ctx);                       // reset state in case of oops
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ff30 	bl	8002c64 <SendEnd>
    BeginHash(CTX->thCtx, ctx->hmackey, MOLE_HMAC_LENGTH, ctx->hashCounterTX);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6918      	ldr	r0, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002e18:	e9cd 2300 	strd	r2, r3, [sp]
 8002e1c:	2210      	movs	r2, #16
 8002e1e:	47a0      	blx	r4
    SendByte(ctx, tag);                 // Header consists of a TAG byte,
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff fec5 	bl	8002bb6 <SendByte>
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd90      	pop	{r4, r7, pc}

08002e34 <SendAsHash>:

#define ivADlength  2                   /* Associated data length */

static void SendAsHash(port_ctx *ctx, uint8_t *src) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MOLE_HMAC_LENGTH; i++) SendByteU(ctx, *src++);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	e00a      	b.n	8002e5a <SendAsHash+0x26>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	603a      	str	r2, [r7, #0]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff fe82 	bl	8002b58 <SendByteU>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	3301      	adds	r3, #1
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	ddf1      	ble.n	8002e44 <SendAsHash+0x10>
    SendEnd(ctx);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff feff 	bl	8002c64 <SendEnd>
}
 8002e66:	bf00      	nop
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <SendTxHash>:

// finish authenticated packet with a signature and bump the counter
static void SendTxHash(port_ctx *ctx, int pad){
 8002e6e:	b5b0      	push	{r4, r5, r7, lr}
 8002e70:	b086      	sub	sp, #24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
    uint8_t hash[MOLE_HMAC_LENGTH];
        DUMP((uint8_t*)&ctx->hashCounterTX, 8);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3340      	adds	r3, #64	@ 0x40
 8002e7c:	2108      	movs	r1, #8
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fddf 	bl	8002a42 <DUMP>
        PRINTF("%s is sending HMAC with hashCounterTX, ", ctx->name);
    EndHash(CTX->thCtx, hash);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6912      	ldr	r2, [r2, #16]
 8002e8c:	f107 0108 	add.w	r1, r7, #8
 8002e90:	4610      	mov	r0, r2
 8002e92:	4798      	blx	r3
    ctx->hashCounterTX++;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002e9a:	1c54      	adds	r4, r2, #1
 8002e9c:	f143 0500 	adc.w	r5, r3, #0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	e9c3 4510 	strd	r4, r5, [r3, #64]	@ 0x40
    TX(MOLE_ESCAPE);                    // HMAC marker (in plaintext)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	200b      	movs	r0, #11
 8002eac:	4798      	blx	r3
    TX(MOLE_HMAC_TRIGGER);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	2002      	movs	r0, #2
 8002eb4:	4798      	blx	r3
    ctx->counter += ivADlength;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002ebc:	1c9a      	adds	r2, r3, #2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    SendAsHash(ctx, hash);
 8002ec4:	f107 0308 	add.w	r3, r7, #8
 8002ec8:	4619      	mov	r1, r3
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ffb2 	bl	8002e34 <SendAsHash>
    if (pad) {
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d013      	beq.n	8002efe <SendTxHash+0x90>
        while (ctx->counter & (pad - 1)) {
 8002ed6:	e00a      	b.n	8002eee <SendTxHash+0x80>
            ctx->counter++;             // pad until next pad-byte boundary
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
            TX(0);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	2000      	movs	r0, #0
 8002eec:	4798      	blx	r3
        while (ctx->counter & (pad - 1)) {
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	3a01      	subs	r2, #1
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1ec      	bne.n	8002ed8 <SendTxHash+0x6a>
        }
    }
    SendEnd(ctx);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff feb0 	bl	8002c64 <SendEnd>
}
 8002f04:	bf00      	nop
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bdb0      	pop	{r4, r5, r7, pc}

08002f0c <SendIV>:

// IV for cIV ---v      v--- encrypted random IV
// Send: Tag[1], mIV[], cIV[], RXbufsize[2], HMAC[]
#define cIV &IV[MOLE_IV_LENGTH] /* the secret part */
static int SendIV(port_ctx *ctx, int tag) {
 8002f0c:	b590      	push	{r4, r7, lr}
 8002f0e:	b08b      	sub	sp, #44	@ 0x2c
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
    uint8_t IV[2 * MOLE_IV_LENGTH];
    if (moleTRNG(IV, 2 * MOLE_IV_LENGTH)) {
 8002f16:	f107 0308 	add.w	r3, r7, #8
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fe7b 	bl	8000c18 <moleTRNG>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <SendIV+0x20>
        return MOLE_ERROR_TRNG_FAILURE;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e073      	b.n	8003014 <SendIV+0x108>
    }
    memcpy(&ctx->hashCounterRX, cIV, 8);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8002f32:	f107 0308 	add.w	r3, r7, #8
 8002f36:	3310      	adds	r3, #16
 8002f38:	2208      	movs	r2, #8
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f00a f9d5 	bl	800d2ea <memcpy>
        PRINTf("\n%s sending IV, tag=%d, ", ctx->name, tag);
    SendHeader(ctx, tag);
 8002f40:	6839      	ldr	r1, [r7, #0]
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff ff56 	bl	8002df4 <SendHeader>
#if (MOLE_IV_LENGTH == MOLE_BLOCKSIZE)
    SendBlock(ctx, IV);
 8002f48:	f107 0308 	add.w	r3, r7, #8
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff fe7a 	bl	8002c48 <SendBlock>
#else
    SendN(ctx, IV, MOLE_IV_LENGTH);
#endif
        DUMP((uint8_t*)&ctx->hashCounterRX, 8);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3338      	adds	r3, #56	@ 0x38
 8002f58:	2108      	movs	r1, #8
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fd71 	bl	8002a42 <DUMP>
        PRINTF("New %s.hashCounterRX",ctx->name);
        DUMP((uint8_t*)&ctx->hashCounterTX, 8);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3340      	adds	r3, #64	@ 0x40
 8002f64:	2108      	movs	r1, #8
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fd6b 	bl	8002a42 <DUMP>
        PRINTF("Current %s.hashCounterTX",ctx->name);
        DUMP((uint8_t*)IV, MOLE_IV_LENGTH);
 8002f6c:	f107 0308 	add.w	r3, r7, #8
 8002f70:	2110      	movs	r1, #16
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fd65 	bl	8002a42 <DUMP>
        PRINTF("mIV used by %s to encrypt cIV",ctx->name);
        DUMP((uint8_t*)cIV, MOLE_IV_LENGTH);
 8002f78:	f107 0308 	add.w	r3, r7, #8
 8002f7c:	3310      	adds	r3, #16
 8002f7e:	2110      	movs	r1, #16
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fd5e 	bl	8002a42 <DUMP>
        PRINTF("IV (not output)");
    BeginCipher(CTX->tcCtx, ctx->cryptokey, IV, 1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68d8      	ldr	r0, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8002f94:	f107 0208 	add.w	r2, r7, #8
 8002f98:	2301      	movs	r3, #1
 8002f9a:	47a0      	blx	r4
    BlockCipher(CTX->tcCtx, cIV, IV, 1);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68d8      	ldr	r0, [r3, #12]
 8002fa4:	f107 0208 	add.w	r2, r7, #8
 8002fa8:	f107 0308 	add.w	r3, r7, #8
 8002fac:	f103 0110 	add.w	r1, r3, #16
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	47a0      	blx	r4
        DUMP((uint8_t*)IV, MOLE_IV_LENGTH);
 8002fb4:	f107 0308 	add.w	r3, r7, #8
 8002fb8:	2110      	movs	r1, #16
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fd41 	bl	8002a42 <DUMP>
        PRINTF("cIV output as encrypted IV\n");
#if (MOLE_IV_LENGTH == MOLE_BLOCKSIZE)
    SendBlock(ctx, IV);
 8002fc0:	f107 0308 	add.w	r3, r7, #8
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff fe3e 	bl	8002c48 <SendBlock>
#else
    SendN(ctx, IV, MOLE_IV_LENGTH);
#endif
    Send2(ctx, ctx->rBlocks);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff fe21 	bl	8002c1c <Send2>
    SendTxHash(ctx, MOLE_END_UNPADDED);
 8002fda:	2100      	movs	r1, #0
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ff46 	bl	8002e6e <SendTxHash>
    BeginCipher(CTX->tcCtx, ctx->cryptokey, cIV, 1);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68d8      	ldr	r0, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8002ff0:	f107 0308 	add.w	r3, r7, #8
 8002ff4:	f103 0210 	add.w	r2, r3, #16
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	47a0      	blx	r4
    memset(IV, 0, sizeof(IV)); // burn stack
 8002ffc:	f107 0308 	add.w	r3, r7, #8
 8003000:	2220      	movs	r2, #32
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f00a f8f4 	bl	800d1f2 <memset>
    ctx->tReady = 1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
    return 0;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	372c      	adds	r7, #44	@ 0x2c
 8003018:	46bd      	mov	sp, r7
 800301a:	bd90      	pop	{r4, r7, pc}

0800301c <moleSendInit>:

int moleTxInit(port_ctx *ctx) {         // use if not paired
    return NewStream(ctx, 0);
}

static void moleSendInit(port_ctx *ctx, uint8_t type) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
    SendHeader(ctx, MOLE_TAG_MESSAGE);
 8003028:	2117      	movs	r1, #23
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff fee2 	bl	8002df4 <SendHeader>
    ctx->txbuf[0] = type;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    ctx->txidx = 1;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <moleSendChar>:

static void moleSendChar(port_ctx *ctx, uint8_t c) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	70fb      	strb	r3, [r7, #3]
    int i = ctx->txidx;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 30d5 	ldrb.w	r3, [r3, #213]	@ 0xd5
 800305a:	60fb      	str	r3, [r7, #12]
    ctx->txbuf[i] = c;
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4413      	add	r3, r2
 8003062:	33a0      	adds	r3, #160	@ 0xa0
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	701a      	strb	r2, [r3, #0]
    i = (i + 1) & 0x0F;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3301      	adds	r3, #1
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	60fb      	str	r3, [r7, #12]
    ctx->txidx = i;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f883 20d5 	strb.w	r2, [r3, #213]	@ 0xd5
    if (!i) SendTxBuf(ctx);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d102      	bne.n	8003088 <moleSendChar+0x40>
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff fe9c 	bl	8002dc0 <SendTxBuf>
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <moleSendFinal>:

static void moleSendFinal(port_ctx *ctx) {
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
    ctx->txbuf[15] = ctx->txidx;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 20d5 	ldrb.w	r2, [r3, #213]	@ 0xd5
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
    SendTxBuf(ctx);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff fe8b 	bl	8002dc0 <SendTxBuf>
    SendTxHash(ctx, MOLE_END_UNPADDED);
 80030aa:	2100      	movs	r1, #0
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fede 	bl	8002e6e <SendTxHash>
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <moleSendMsg>:

static void moleSendMsg(port_ctx *ctx, const uint8_t *src, int len, int type){
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b084      	sub	sp, #16
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	603b      	str	r3, [r7, #0]
    moleSendInit(ctx, type);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	4619      	mov	r1, r3
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f7ff ffa4 	bl	800301c <moleSendInit>
    while (len--) moleSendChar(ctx, *src++);
 80030d4:	e007      	b.n	80030e6 <moleSendMsg+0x2c>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	60ba      	str	r2, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	4619      	mov	r1, r3
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f7ff ffb1 	bl	8003048 <moleSendChar>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	1e5a      	subs	r2, r3, #1
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f2      	bne.n	80030d6 <moleSendMsg+0x1c>
    moleSendFinal(ctx);
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7ff ffcd 	bl	8003090 <moleSendFinal>
}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <moleReKeyRequest>:


// Encrypt and send a token
static int moleReKeyRequest(port_ctx *ctx, const uint8_t *key, int tag){
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
    if (moleAvail(ctx) < MOLE_PASSCODE_LENGTH) return MOLE_ERROR_MSG_NOT_SENT;
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f96f 	bl	80033ee <moleAvail>
 8003110:	4603      	mov	r3, r0
 8003112:	2b3f      	cmp	r3, #63	@ 0x3f
 8003114:	d801      	bhi.n	800311a <moleReKeyRequest+0x1c>
 8003116:	2308      	movs	r3, #8
 8003118:	e006      	b.n	8003128 <moleReKeyRequest+0x2a>
    moleSendMsg(ctx, key, MOLE_PASSCODE_LENGTH, tag);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2240      	movs	r2, #64	@ 0x40
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f7ff ffca 	bl	80030ba <moleSendMsg>
    return 0;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <KDF>:
// Derive various keys from the system token. If KDFhashKey is not really
// secret, an attecker can get the keys from the token. However, the system
// token cannot be obtained from the keys. Hash is one-way.

static int KDF (port_ctx *ctx, uint8_t *dest, const uint8_t *src, int length,
                int iterations, int reverse) {
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b091      	sub	sp, #68	@ 0x44
 8003134:	af02      	add	r7, sp, #8
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
    uint8_t KDFbuffer[MOLE_ENCR_KEY_LENGTH];
    if (length > MOLE_ENCR_KEY_LENGTH) return MOLE_ERROR_KDFBUF_TOO_SMALL;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b20      	cmp	r3, #32
 8003142:	dd01      	ble.n	8003148 <KDF+0x18>
 8003144:	230a      	movs	r3, #10
 8003146:	e065      	b.n	8003214 <KDF+0xe4>
    for (int i = 0; i < length; i++) {
 8003148:	2300      	movs	r3, #0
 800314a:	637b      	str	r3, [r7, #52]	@ 0x34
 800314c:	e01e      	b.n	800318c <KDF+0x5c>
        if (reverse) KDFbuffer[i] = src[length + (~i)];
 800314e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00e      	beq.n	8003172 <KDF+0x42>
 8003154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003156:	43da      	mvns	r2, r3
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4413      	add	r3, r2
 800315c:	461a      	mov	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	7819      	ldrb	r1, [r3, #0]
 8003164:	f107 0210 	add.w	r2, r7, #16
 8003168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316a:	4413      	add	r3, r2
 800316c:	460a      	mov	r2, r1
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	e009      	b.n	8003186 <KDF+0x56>
        else         KDFbuffer[i] = src[i];
 8003172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	7819      	ldrb	r1, [r3, #0]
 800317a:	f107 0210 	add.w	r2, r7, #16
 800317e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003180:	4413      	add	r3, r2
 8003182:	460a      	mov	r2, r1
 8003184:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length; i++) {
 8003186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003188:	3301      	adds	r3, #1
 800318a:	637b      	str	r3, [r7, #52]	@ 0x34
 800318c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	dbdc      	blt.n	800314e <KDF+0x1e>
    }
    while (iterations--) {              // hash the KDFbuffer multiple times
 8003194:	e029      	b.n	80031ea <KDF+0xba>
        BeginHash(CTX->rhCtx, KDFhashKey, length, 0);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6898      	ldr	r0, [r3, #8]
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	e9cd 2300 	strd	r2, r3, [sp]
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	491b      	ldr	r1, [pc, #108]	@ (800321c <KDF+0xec>)
 80031ae:	47a0      	blx	r4
        for (int i = 0; i < length; i++) {
 80031b0:	2300      	movs	r3, #0
 80031b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80031b4:	e00d      	b.n	80031d2 <KDF+0xa2>
            Hash(CTX->rhCtx, KDFbuffer[i]);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	6890      	ldr	r0, [r2, #8]
 80031be:	f107 0110 	add.w	r1, r7, #16
 80031c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031c4:	440a      	add	r2, r1
 80031c6:	7812      	ldrb	r2, [r2, #0]
 80031c8:	4611      	mov	r1, r2
 80031ca:	4798      	blx	r3
        for (int i = 0; i < length; i++) {
 80031cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ce:	3301      	adds	r3, #1
 80031d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	dbed      	blt.n	80031b6 <KDF+0x86>
        }
        EndHash(CTX->rhCtx, KDFbuffer);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	6892      	ldr	r2, [r2, #8]
 80031e2:	f107 0110 	add.w	r1, r7, #16
 80031e6:	4610      	mov	r0, r2
 80031e8:	4798      	blx	r3
    while (iterations--) {              // hash the KDFbuffer multiple times
 80031ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ec:	1e5a      	subs	r2, r3, #1
 80031ee:	64ba      	str	r2, [r7, #72]	@ 0x48
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1d0      	bne.n	8003196 <KDF+0x66>
    }
    memcpy(dest, KDFbuffer, length);
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	f107 0310 	add.w	r3, r7, #16
 80031fa:	4619      	mov	r1, r3
 80031fc:	68b8      	ldr	r0, [r7, #8]
 80031fe:	f00a f874 	bl	800d2ea <memcpy>
        DUMP(KDFbuffer, length); PRINTF("KDF output ");
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	f107 0310 	add.w	r3, r7, #16
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fc18 	bl	8002a42 <DUMP>
    return 0;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	373c      	adds	r7, #60	@ 0x3c
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}
 800321c:	0800e10c 	.word	0x0800e10c

08003220 <moleNewKeys>:
                    - (MOLE_HMAC_LENGTH + PREAMBLE_SIZE))

// ---------------------------------------------------------------------------
// Public functions

int moleNewKeys(port_ctx *ctx, const uint8_t *key) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af02      	add	r7, sp, #8
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
    int r = testKey(ctx, key);
 800322a:	6839      	ldr	r1, [r7, #0]
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff fc49 	bl	8002ac4 <testKey>
 8003232:	60f8      	str	r0, [r7, #12]
    if (r) return r;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <moleNewKeys+0x1e>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	e032      	b.n	80032a4 <moleNewKeys+0x84>
    r |= KDF(ctx, ctx->hmackey,       key, MOLE_HMAC_KEY_LENGTH, 55, 0);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8003244:	2300      	movs	r3, #0
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	2337      	movs	r3, #55	@ 0x37
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2320      	movs	r3, #32
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff6d 	bl	8003130 <KDF>
 8003256:	4602      	mov	r2, r0
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4313      	orrs	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
    r |= KDF(ctx, ctx->cryptokey,     key, MOLE_ENCR_KEY_LENGTH, 55, 1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8003264:	2301      	movs	r3, #1
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	2337      	movs	r3, #55	@ 0x37
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2320      	movs	r3, #32
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ff5d 	bl	8003130 <KDF>
 8003276:	4602      	mov	r2, r0
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
    r |= KDF(ctx, ctx->adminpasscode, &key[32], MOLE_ADMINPASS_LENGTH, 34, 0);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	f103 0220 	add.w	r2, r3, #32
 800328a:	2300      	movs	r3, #0
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	2322      	movs	r3, #34	@ 0x22
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	2310      	movs	r3, #16
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ff4b 	bl	8003130 <KDF>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
    return r;
 80032a2:	68fb      	ldr	r3, [r7, #12]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <moleNoPorts>:

// Call this before setting up any mole ports and when closing app.
void moleNoPorts(void) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
	memset(context_memory, 0, sizeof(context_memory));
 80032b0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80032b4:	2100      	movs	r1, #0
 80032b6:	4804      	ldr	r0, [pc, #16]	@ (80032c8 <moleNoPorts+0x1c>)
 80032b8:	f009 ff9b 	bl	800d1f2 <memset>
	allocated_uint32s = 0;
 80032bc:	4b03      	ldr	r3, [pc, #12]	@ (80032cc <moleNoPorts+0x20>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	2400e9ac 	.word	0x2400e9ac
 80032cc:	240129ac 	.word	0x240129ac

080032d0 <moleAddPort>:

// Add a secure port
int moleAddPort(port_ctx *ctx, const uint8_t *boilerplate, int protocol,
                const char* name, uint16_t rxBlocks, mole_boilrFn boiler,
                mole_plainFn plain, mole_ciphrFn ciphr, mole_WrKeyFn WrKeyFn){
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
    memset(ctx, 0, sizeof(port_ctx));
 80032de:	22e0      	movs	r2, #224	@ 0xe0
 80032e0:	2100      	movs	r1, #0
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f009 ff85 	bl	800d1f2 <memset>
    ctx->plainFn = plain;               // plaintext output handler
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a3a      	ldr	r2, [r7, #32]
 80032ec:	619a      	str	r2, [r3, #24]
    TX = ciphr;                         // ciphertext output handler
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f2:	61da      	str	r2, [r3, #28]
    ctx->boilrFn = boiler;              // boilerplate output handler
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	615a      	str	r2, [r3, #20]
    ctx->boilerplate = boilerplate;     // counted string
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    ctx->name = name;                   // Zstring name for debugging
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	601a      	str	r2, [r3, #0]
    ctx->WrKeyFn = WrKeyFn;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800330c:	621a      	str	r2, [r3, #32]
    ctx->rBlocks = rxBlocks;            // block size (1<<BLOCK_SHIFT) bytes
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8b3a      	ldrh	r2, [r7, #24]
 8003312:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
    ctx->rxbuf = Allocate(rxBlocks << BLOCK_SHIFT);
 8003316:	8b3b      	ldrh	r3, [r7, #24]
 8003318:	019b      	lsls	r3, r3, #6
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff fb9e 	bl	8002a5c <Allocate>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    if (rxBlocks < 2) return MOLE_ERROR_BUF_TOO_SMALL;
 8003328:	8b3b      	ldrh	r3, [r7, #24]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d801      	bhi.n	8003332 <moleAddPort+0x62>
 800332e:	2309      	movs	r3, #9
 8003330:	e032      	b.n	8003398 <moleAddPort+0xc8>
    switch (protocol) {
    default: // 0
        ctx->rcCtx = Allocate(sizeof(xChaCha_ctx));
 8003332:	2084      	movs	r0, #132	@ 0x84
 8003334:	f7ff fb92 	bl	8002a5c <Allocate>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	605a      	str	r2, [r3, #4]
        ctx->tcCtx = Allocate(sizeof(xChaCha_ctx));
 800333e:	2084      	movs	r0, #132	@ 0x84
 8003340:	f7ff fb8c 	bl	8002a5c <Allocate>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	60da      	str	r2, [r3, #12]
        ctx->rhCtx = Allocate(sizeof(blake2s_state));
 800334a:	207c      	movs	r0, #124	@ 0x7c
 800334c:	f7ff fb86 	bl	8002a5c <Allocate>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	609a      	str	r2, [r3, #8]
        ctx->thCtx = Allocate(sizeof(blake2s_state));
 8003356:	207c      	movs	r0, #124	@ 0x7c
 8003358:	f7ff fb80 	bl	8002a5c <Allocate>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	611a      	str	r2, [r3, #16]
        if (allocated_uint32s >= MOLE_ALLOC_MEM_UINT32S) {
 8003362:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <moleAddPort+0xd0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800336a:	db01      	blt.n	8003370 <moleAddPort+0xa0>
            return MOLE_ERROR_OUT_OF_MEMORY;
 800336c:	2306      	movs	r3, #6
 800336e:	e013      	b.n	8003398 <moleAddPort+0xc8>
        }
        BeginHash   = b2s_hmac_init_g;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4a0c      	ldr	r2, [pc, #48]	@ (80033a4 <moleAddPort+0xd4>)
 8003374:	625a      	str	r2, [r3, #36]	@ 0x24
        Hash        = b2s_hmac_putc_g;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a0b      	ldr	r2, [pc, #44]	@ (80033a8 <moleAddPort+0xd8>)
 800337a:	629a      	str	r2, [r3, #40]	@ 0x28
        EndHash     = b2s_hmac_final_g;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a0b      	ldr	r2, [pc, #44]	@ (80033ac <moleAddPort+0xdc>)
 8003380:	62da      	str	r2, [r3, #44]	@ 0x2c
        BeginCipher = xc_crypt_init_g;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4a0a      	ldr	r2, [pc, #40]	@ (80033b0 <moleAddPort+0xe0>)
 8003386:	631a      	str	r2, [r3, #48]	@ 0x30
        BlockCipher = xc_crypt_block_g;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4a0a      	ldr	r2, [pc, #40]	@ (80033b4 <moleAddPort+0xe4>)
 800338c:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    return BIST(ctx, protocol);
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f7ff fca7 	bl	8002ce4 <BIST>
 8003396:	4603      	mov	r3, r0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	240129ac 	.word	0x240129ac
 80033a4:	08002a1b 	.word	0x08002a1b
 80033a8:	080027eb 	.word	0x080027eb
 80033ac:	080028bd 	.word	0x080028bd
 80033b0:	08003f13 	.word	0x08003f13
 80033b4:	08003f67 	.word	0x08003f67

080033b8 <molePair>:
    return moleReKeyRequest(ctx, key, MOLE_MSG_NEW_KEY);
}

// molePair and moleBoilerReq assume that the FSMs are not seeing traffic

void molePair(port_ctx *ctx) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
    PRINTf("\n%s sending Pairing request, ", ctx->name);
    ctx->rReady = 0;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
    ctx->tReady = 0;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
    ctx->state = IDLE;                  // reset local FSM
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    SendHeader(ctx, MOLE_TAG_RESET);
 80033d8:	2116      	movs	r1, #22
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff fd0a 	bl	8002df4 <SendHeader>
    SendEnd(ctx);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7ff fc3f 	bl	8002c64 <SendEnd>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <moleAvail>:
    SendBlock(ctx, m);
    SendTxHash(ctx, MOLE_END_UNPADDED);
}

// Size of message available to accept
uint32_t moleAvail(port_ctx *ctx){
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
    if (!ctx->rReady) return 0;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 30d7 	ldrb.w	r3, [r3, #215]	@ 0xd7
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <moleAvail+0x16>
 8003400:	2300      	movs	r3, #0
 8003402:	e00b      	b.n	800341c <moleAvail+0x2e>
    if (!ctx->tReady) return 0;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 30d8 	ldrb.w	r3, [r3, #216]	@ 0xd8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <moleAvail+0x24>
 800340e:	2300      	movs	r3, #0
 8003410:	e004      	b.n	800341c <moleAvail+0x2e>
    return (ctx->avail << BLOCK_SHIFT) - (MOLE_HMAC_LENGTH + PREAMBLE_SIZE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8b3 30ce 	ldrh.w	r3, [r3, #206]	@ 0xce
 8003418:	019b      	lsls	r3, r3, #6
 800341a:	3b12      	subs	r3, #18
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <molePutc>:

// ---------------------------------------------------------------------------
// Receive char or command from input stream
int molePutc(port_ctx *ctx, uint8_t c){
 8003428:	b5b0      	push	{r4, r5, r7, lr}
 800342a:	b08a      	sub	sp, #40	@ 0x28
 800342c:	af02      	add	r7, sp, #8
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
    int r = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	61fb      	str	r3, [r7, #28]
    int temp;
    uint8_t *k;
    // Pack escape sequence to binary ----------------------------------------
    int ended = (c == MOLE_TAG_END);    // distinguish '0A' from '0B 02'
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	2b0a      	cmp	r3, #10
 800343c:	bf0c      	ite	eq
 800343e:	2301      	moveq	r3, #1
 8003440:	2300      	movne	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	61bb      	str	r3, [r7, #24]
    if (ctx->escaped) {
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 30d4 	ldrb.w	r3, [r3, #212]	@ 0xd4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d033      	beq.n	80034b8 <molePutc+0x90>
        ctx->escaped = 0;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
        if (c > 1) switch(c) {
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d928      	bls.n	80034b0 <molePutc+0x88>
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d11c      	bne.n	800349e <molePutc+0x76>
            case MOLE_HMAC_TRIGGER:
                EndHash(CTX->rhCtx, ctx->hmac);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6890      	ldr	r0, [r2, #8]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	32b1      	adds	r2, #177	@ 0xb1
 8003470:	4611      	mov	r1, r2
 8003472:	4798      	blx	r3
                    DUMP((uint8_t*)&ctx->hashCounterRX, 8);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3338      	adds	r3, #56	@ 0x38
 8003478:	2108      	movs	r1, #8
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fae1 	bl	8002a42 <DUMP>
                    PRINTF("%s receiving HMAC with hashCounterRX, ", ctx->name);
                ctx->hashCounterRX++;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003486:	1c54      	adds	r4, r2, #1
 8003488:	f143 0500 	adc.w	r5, r3, #0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	e9c3 450e 	strd	r4, r5, [r3, #56]	@ 0x38
                ctx->MACed = 1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
                return 0;
 800349a:	2300      	movs	r3, #0
 800349c:	e28c      	b.n	80039b8 <molePutc+0x590>
            default:                    // embedded reset
                ctx->state = IDLE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
                molePair(ctx);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff ff86 	bl	80033b8 <molePair>
                return 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	e283      	b.n	80039b8 <molePutc+0x590>
        } else {
        c += MOLE_TAG_END;
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	330a      	adds	r3, #10
 80034b4:	70fb      	strb	r3, [r7, #3]
 80034b6:	e008      	b.n	80034ca <molePutc+0xa2>
        }
    }
    else if (c == MOLE_ESCAPE) {
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	2b0b      	cmp	r3, #11
 80034bc:	d105      	bne.n	80034ca <molePutc+0xa2>
        ctx->escaped = 1;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 20d4 	strb.w	r2, [r3, #212]	@ 0xd4
        return 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e276      	b.n	80039b8 <molePutc+0x590>
    }
    // FSM ---------------------------------------------------------------------
    Hash(CTX->rhCtx, c);                // add to hash
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6892      	ldr	r2, [r2, #8]
 80034d2:	78f9      	ldrb	r1, [r7, #3]
 80034d4:	4610      	mov	r0, r2
 80034d6:	4798      	blx	r3
    int i = ctx->ridx;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 80034de:	617b      	str	r3, [r7, #20]
    switch (ctx->state) {
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80034e6:	2b05      	cmp	r3, #5
 80034e8:	f200 8255 	bhi.w	8003996 <molePutc+0x56e>
 80034ec:	a201      	add	r2, pc, #4	@ (adr r2, 80034f4 <molePutc+0xcc>)
 80034ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f2:	bf00      	nop
 80034f4:	0800350d 	.word	0x0800350d
 80034f8:	08003585 	.word	0x08003585
 80034fc:	08003681 	.word	0x08003681
 8003500:	08003639 	.word	0x08003639
 8003504:	080036e5 	.word	0x080036e5
 8003508:	08003623 	.word	0x08003623
    case IDLE:
        if (c < MOLE_TAG_GET_BOILER) break; // limit range of valid tags
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	2b13      	cmp	r3, #19
 8003510:	f240 8248 	bls.w	80039a4 <molePutc+0x57c>
        if (c > MOLE_TAG_ADMIN)      break;
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	2b1a      	cmp	r3, #26
 8003518:	f200 8246 	bhi.w	80039a8 <molePutc+0x580>
        if (c == MOLE_TAG_IV_A) {
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	2b18      	cmp	r3, #24
 8003520:	d10e      	bne.n	8003540 <molePutc+0x118>
            ctx->hashCounterRX = 0;     // before initializing the hash
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
            ctx->rReady = 0;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
            ctx->tReady = 0;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
        }
        BeginHash(CTX->rhCtx, ctx->hmackey, MOLE_HMAC_LENGTH,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6898      	ldr	r0, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003554:	e9cd 2300 	strd	r2, r3, [sp]
 8003558:	2210      	movs	r2, #16
 800355a:	47a0      	blx	r4
                  ctx->hashCounterRX);
        Hash(CTX->rhCtx, c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6892      	ldr	r2, [r2, #8]
 8003564:	78f9      	ldrb	r1, [r7, #3]
 8003566:	4610      	mov	r0, r2
 8003568:	4798      	blx	r3
        ctx->tag = c;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	f883 20d3 	strb.w	r2, [r3, #211]	@ 0xd3
        ctx->MACed = 0;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 20d2 	strb.w	r2, [r3, #210]	@ 0xd2
        ctx->state = DISPATCH;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
        break;
 8003582:	e218      	b.n	80039b6 <molePutc+0x58e>
    case DISPATCH: // message data begins here
        ctx->rxbuf[0] = c;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	701a      	strb	r2, [r3, #0]
        ctx->ridx = 1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
        ctx->state = GET_PAYLOAD;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2204      	movs	r2, #4
 800359a:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
            PRINTF("\n%s incoming packet, tag=%d\n", ctx->name, ctx->tag);
        switch (ctx->tag) {
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 30d3 	ldrb.w	r3, [r3, #211]	@ 0xd3
 80035a4:	3b14      	subs	r3, #20
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	d831      	bhi.n	800360e <molePutc+0x1e6>
 80035aa:	a201      	add	r2, pc, #4	@ (adr r2, 80035b0 <molePutc+0x188>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	080035c9 	.word	0x080035c9
 80035b4:	080035fb 	.word	0x080035fb
 80035b8:	080035d9 	.word	0x080035d9
 80035bc:	0800360f 	.word	0x0800360f
 80035c0:	08003605 	.word	0x08003605
 80035c4:	08003605 	.word	0x08003605
        case MOLE_TAG_GET_BOILER:
            SendBoiler(ctx);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff fb5e 	bl	8002c8a <SendBoiler>
            ctx->state = IDLE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
            break;
 80035d6:	e01a      	b.n	800360e <molePutc+0x1e6>
        case MOLE_TAG_RESET:
            ctx->hashCounterTX = 0;
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
            ctx->state = IDLE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
            r = SendIV(ctx, MOLE_TAG_IV_A);
 80035ee:	2118      	movs	r1, #24
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fc8b 	bl	8002f0c <SendIV>
 80035f6:	61f8      	str	r0, [r7, #28]
            break;
 80035f8:	e009      	b.n	800360e <molePutc+0x1e6>
        case MOLE_TAG_BOILERPLATE:
            ctx->state = GET_BOILER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
            break;
 8003602:	e004      	b.n	800360e <molePutc+0x1e6>
        case MOLE_TAG_IV_A:
        case MOLE_TAG_IV_B:
            ctx->state = GET_IV;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2203      	movs	r2, #3
 8003608:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
            break;
 800360c:	bf00      	nop
        }
        if (ended) ctx->state = IDLE;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 81cb 	beq.w	80039ac <molePutc+0x584>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
        break;
 800361e:	e1c5      	b.n	80039ac <molePutc+0x584>
        if (ctx->ridx == MOLE_IV_LENGTH) {
            PRINTf("\nSet temporary IV for decrypting the secret IV ");
            BeginCipher(CTX->rcCtx, ctx->cryptokey, ctx->rxbuf, 0);
            ctx->state = GET_PAYLOAD;
        }
        goto noend;
 8003620:	bf00      	nop
noend:  if (ended) {                    // premature end not allowed
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 81c3 	beq.w	80039b0 <molePutc+0x588>
            ctx->state = IDLE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
            r = MOLE_ERROR_INVALID_LENGTH;
 8003632:	2304      	movs	r3, #4
 8003634:	61fb      	str	r3, [r7, #28]
        break;
 8003636:	e1bb      	b.n	80039b0 <molePutc+0x588>
        ctx->rxbuf[ctx->ridx++] = c;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8003644:	1c59      	adds	r1, r3, #1
 8003646:	b288      	uxth	r0, r1
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	f8a1 00d0 	strh.w	r0, [r1, #208]	@ 0xd0
 800364e:	4413      	add	r3, r2
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	701a      	strb	r2, [r3, #0]
        if (ctx->ridx == MOLE_IV_LENGTH) {
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800365a:	2b10      	cmp	r3, #16
 800365c:	d1e0      	bne.n	8003620 <molePutc+0x1f8>
            BeginCipher(CTX->rcCtx, ctx->cryptokey, ctx->rxbuf, 0);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6858      	ldr	r0, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003672:	2300      	movs	r3, #0
 8003674:	47a0      	blx	r4
            ctx->state = GET_PAYLOAD;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2204      	movs	r2, #4
 800367a:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
        goto noend;
 800367e:	e7cf      	b.n	8003620 <molePutc+0x1f8>
    case GET_BOILER:
        if (i == MAX_RX_LENGTH) {
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8003686:	019b      	lsls	r3, r3, #6
 8003688:	3b12      	subs	r3, #18
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	429a      	cmp	r2, r3
 800368e:	d103      	bne.n	8003698 <molePutc+0x270>
            r = MOLE_ERROR_LONG_BOILERPLT;
 8003690:	2305      	movs	r3, #5
 8003692:	61fb      	str	r3, [r7, #28]
            ended = 1;
 8003694:	2301      	movs	r3, #1
 8003696:	61bb      	str	r3, [r7, #24]
        }
        if (ended) {
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d013      	beq.n	80036c6 <molePutc+0x29e>
            if ((i - 2) == ctx->rxbuf[0])
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3b02      	subs	r3, #2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	f8d2 209c 	ldr.w	r2, [r2, #156]	@ 0x9c
 80036a8:	7812      	ldrb	r2, [r2, #0]
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d106      	bne.n	80036bc <molePutc+0x294>
            ctx->boilrFn(ctx->rxbuf);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	f8d2 209c 	ldr.w	r2, [r2, #156]	@ 0x9c
 80036b8:	4610      	mov	r0, r2
 80036ba:	4798      	blx	r3
            ctx->state = IDLE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
        } else {
            ctx->rxbuf[ctx->ridx++] = c;
        }
        break;
 80036c4:	e177      	b.n	80039b6 <molePutc+0x58e>
            ctx->rxbuf[ctx->ridx++] = c;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 80036d2:	1c59      	adds	r1, r3, #1
 80036d4:	b288      	uxth	r0, r1
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	f8a1 00d0 	strh.w	r0, [r1, #208]	@ 0xd0
 80036dc:	4413      	add	r3, r2
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	701a      	strb	r2, [r3, #0]
        break;
 80036e2:	e168      	b.n	80039b6 <molePutc+0x58e>
    case GET_PAYLOAD:
        if (!ended) {                   // input terminated by end tag
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d13f      	bne.n	800376a <molePutc+0x342>
            if (i != (ctx->rBlocks << BLOCK_SHIFT)) {
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 80036f0:	019b      	lsls	r3, r3, #6
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d031      	beq.n	800375c <molePutc+0x334>
                ctx->rxbuf[ctx->ridx++] = c;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 8003704:	1c59      	adds	r1, r3, #1
 8003706:	b288      	uxth	r0, r1
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	f8a1 00d0 	strh.w	r0, [r1, #208]	@ 0xd0
 800370e:	4413      	add	r3, r2
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	701a      	strb	r2, [r3, #0]
                temp = ctx->ridx;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800371a:	613b      	str	r3, [r7, #16]
                if (!ctx->MACed && !(temp & (MOLE_BLOCKSIZE - 1))) {
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 8003722:	2b00      	cmp	r3, #0
 8003724:	f040 8146 	bne.w	80039b4 <molePutc+0x58c>
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	2b00      	cmp	r3, #0
 8003730:	f040 8140 	bne.w	80039b4 <molePutc+0x58c>
                    temp -= MOLE_BLOCKSIZE; // -> beginning of block
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	3b10      	subs	r3, #16
 8003738:	613b      	str	r3, [r7, #16]
                PRINTF("\n%s decrypting payload rxbuf[%d]; ", ctx->name,temp);
                    BlockCipher(CTX->rcCtx, &ctx->rxbuf[temp],
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6858      	ldr	r0, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	18d1      	adds	r1, r2, r3
                                &ctx->rxbuf[temp], 1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
                    BlockCipher(CTX->rcCtx, &ctx->rxbuf[temp],
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	441a      	add	r2, r3
 8003756:	2301      	movs	r3, #1
 8003758:	47a0      	blx	r4
            } else {
                ctx->state = HANG;
                PRINTf("\nGET_PAYLOAD state ");
                r = MOLE_ERROR_INVALID_LENGTH;
            }
            break;
 800375a:	e12b      	b.n	80039b4 <molePutc+0x58c>
                ctx->state = HANG;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2205      	movs	r2, #5
 8003760:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
                r = MOLE_ERROR_INVALID_LENGTH;
 8003764:	2304      	movs	r3, #4
 8003766:	61fb      	str	r3, [r7, #28]
            break;
 8003768:	e124      	b.n	80039b4 <molePutc+0x58c>
        }
        ctx->state = IDLE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
        temp = i - MOLE_HMAC_LENGTH;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	3b10      	subs	r3, #16
 8003776:	613b      	str	r3, [r7, #16]
        c = ctx->rxbuf[0];              // repurpose c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	70fb      	strb	r3, [r7, #3]
        r = testHMAC(ctx, &ctx->rxbuf[temp]); // 0 if okay, else bad HMAC
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	4619      	mov	r1, r3
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff f982 	bl	8002a98 <testHMAC>
 8003794:	61f8      	str	r0, [r7, #28]
        PRINTF("\n%s received packet of length %d, tag %d, rxbuf[0]=0x%02X; ",
                ctx->name, temp, ctx->tag, c);
        if (r) {
            PRINTf("\n**** Bad HMAC ****");
        }
        switch (ctx->tag) {
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 30d3 	ldrb.w	r3, [r3, #211]	@ 0xd3
 800379c:	3b17      	subs	r3, #23
 800379e:	2b03      	cmp	r3, #3
 80037a0:	f200 80ef 	bhi.w	8003982 <molePutc+0x55a>
 80037a4:	a201      	add	r2, pc, #4	@ (adr r2, 80037ac <molePutc+0x384>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	080038bb 	.word	0x080038bb
 80037b0:	080037bd 	.word	0x080037bd
 80037b4:	080037d3 	.word	0x080037d3
 80037b8:	0800386f 	.word	0x0800386f
        case MOLE_TAG_IV_A:
            ctx->tReady = 0;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 20d8 	strb.w	r2, [r3, #216]	@ 0xd8
            ctx->hashCounterTX = 0;
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
        case MOLE_TAG_IV_B:
            ctx->rReady = 0;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
            if (r) break;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f040 80d2 	bne.w	8003986 <molePutc+0x55e>
            if (temp != (2 * MOLE_IV_LENGTH + ivADlength)) {
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b22      	cmp	r3, #34	@ 0x22
 80037e6:	d002      	beq.n	80037ee <molePutc+0x3c6>
                PRINTf("\nIV length was funny ");
                r = MOLE_ERROR_INVALID_LENGTH;
 80037e8:	2304      	movs	r3, #4
 80037ea:	61fb      	str	r3, [r7, #28]
                break;
 80037ec:	e0d2      	b.n	8003994 <molePutc+0x56c>
            }
            BeginCipher(CTX->rcCtx, ctx->cryptokey,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6858      	ldr	r0, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f103 0148 	add.w	r1, r3, #72	@ 0x48
                        &ctx->rxbuf[MOLE_IV_LENGTH], 0);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003802:	f103 0210 	add.w	r2, r3, #16
            BeginCipher(CTX->rcCtx, ctx->cryptokey,
 8003806:	2300      	movs	r3, #0
 8003808:	47a0      	blx	r4
            memcpy(&ctx->hashCounterTX, &ctx->rxbuf[MOLE_IV_LENGTH], 8);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003816:	3310      	adds	r3, #16
 8003818:	2208      	movs	r2, #8
 800381a:	4619      	mov	r1, r3
 800381c:	f009 fd65 	bl	800d2ea <memcpy>
            memcpy(&ctx->avail, &ctx->rxbuf[2 * MOLE_IV_LENGTH], 2);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	33ce      	adds	r3, #206	@ 0xce
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	f8d2 209c 	ldr.w	r2, [r2, #156]	@ 0x9c
 800382a:	3220      	adds	r2, #32
 800382c:	8812      	ldrh	r2, [r2, #0]
 800382e:	b292      	uxth	r2, r2
 8003830:	801a      	strh	r2, [r3, #0]
            ctx->rReady = 1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 20d7 	strb.w	r2, [r3, #215]	@ 0xd7
                PRINTf("\nReceived IV, tag=%d; ", ctx->tag);
                DUMP((uint8_t*)&ctx->hashCounterRX, 8);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3338      	adds	r3, #56	@ 0x38
 800383e:	2108      	movs	r1, #8
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff f8fe 	bl	8002a42 <DUMP>
                PRINTF("Received HMAC hashCounterRX, ");
                DUMP((uint8_t*)&ctx->rxbuf[MOLE_IV_LENGTH], MOLE_IV_LENGTH);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800384c:	3310      	adds	r3, #16
 800384e:	2110      	movs	r1, #16
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff f8f6 	bl	8002a42 <DUMP>
                PRINTF("Private cIV, ");
            if (ctx->tag == MOLE_TAG_IV_A) {
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 30d3 	ldrb.w	r3, [r3, #211]	@ 0xd3
 800385c:	2b18      	cmp	r3, #24
 800385e:	f040 8094 	bne.w	800398a <molePutc+0x562>
                r = SendIV(ctx, MOLE_TAG_IV_B);
 8003862:	2119      	movs	r1, #25
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff fb51 	bl	8002f0c <SendIV>
 800386a:	61f8      	str	r0, [r7, #28]
            }
            break;
 800386c:	e08d      	b.n	800398a <molePutc+0x562>
        case MOLE_TAG_ADMIN:
            ctx->adminOK = 0;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
            if (r) break;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	2b00      	cmp	r3, #0
 800387a:	f040 8088 	bne.w	800398e <molePutc+0x566>
                DUMP(ctx->adminpasscode, MOLE_ADMINPASS_LENGTH);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3388      	adds	r3, #136	@ 0x88
 8003882:	2110      	movs	r1, #16
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff f8dc 	bl	8002a42 <DUMP>
                PRINTF("Expected Passcode");
                DUMP(ctx->rxbuf, MOLE_ADMINPASS_LENGTH);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003890:	2110      	movs	r1, #16
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff f8d5 	bl	8002a42 <DUMP>
                PRINTF("Actual Passcode");
            if (memcmp(ctx->rxbuf, ctx->adminpasscode,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3388      	adds	r3, #136	@ 0x88
 80038a2:	2210      	movs	r2, #16
 80038a4:	4619      	mov	r1, r3
 80038a6:	f009 fc94 	bl	800d1d2 <memcmp>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d170      	bne.n	8003992 <molePutc+0x56a>
                       MOLE_ADMINPASS_LENGTH) == 0) {
                ctx->adminOK = MOLE_ADMIN_ACTIVE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2255      	movs	r2, #85	@ 0x55
 80038b4:	f883 20d9 	strb.w	r2, [r3, #217]	@ 0xd9
            }
            break;
 80038b8:	e06b      	b.n	8003992 <molePutc+0x56a>
        case MOLE_TAG_MESSAGE:
            if (r) {
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <molePutc+0x4a0>
                molePair(ctx);          // assume synchronization is lost
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff fd79 	bl	80033b8 <molePair>
                    break;
                default:
                    r = MOLE_ERROR_UNKNOWN_MSG;
                }
            }
            break;
 80038c6:	e065      	b.n	8003994 <molePutc+0x56c>
                switch(c) {
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d005      	beq.n	80038da <molePutc+0x4b2>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	dd53      	ble.n	800397a <molePutc+0x552>
 80038d2:	3b02      	subs	r3, #2
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d850      	bhi.n	800397a <molePutc+0x552>
 80038d8:	e01f      	b.n	800391a <molePutc+0x4f2>
                    i = ctx->rxbuf[temp - 1]; // remainder
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	4413      	add	r3, r2
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	617b      	str	r3, [r7, #20]
                    temp = temp + i - 17; // trim padding
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	4413      	add	r3, r2
 80038f0:	3b11      	subs	r3, #17
 80038f2:	613b      	str	r3, [r7, #16]
                    ctx->plainFn(&ctx->rxbuf[1], temp);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	f8d2 209c 	ldr.w	r2, [r2, #156]	@ 0x9c
 80038fe:	3201      	adds	r2, #1
 8003900:	6939      	ldr	r1, [r7, #16]
 8003902:	4610      	mov	r0, r2
 8003904:	4798      	blx	r3
                    memset(&ctx->rxbuf[1], 0, temp); // burn after reading
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800390c:	3301      	adds	r3, #1
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	2100      	movs	r1, #0
 8003912:	4618      	mov	r0, r3
 8003914:	f009 fc6d 	bl	800d1f2 <memset>
                    break;
 8003918:	e032      	b.n	8003980 <molePutc+0x558>
                    temp = testKey(ctx, &ctx->rxbuf[1]);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003920:	3301      	adds	r3, #1
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff f8cd 	bl	8002ac4 <testKey>
 800392a:	6138      	str	r0, [r7, #16]
                    if (temp) return temp;      // bad key
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <molePutc+0x50e>
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	e040      	b.n	80039b8 <molePutc+0x590>
                    k = ctx->WrKeyFn(&ctx->rxbuf[1]);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	f8d2 209c 	ldr.w	r2, [r2, #156]	@ 0x9c
 8003940:	3201      	adds	r2, #1
 8003942:	4610      	mov	r0, r2
 8003944:	4798      	blx	r3
 8003946:	60f8      	str	r0, [r7, #12]
                    if (k == NULL) return 0;    // no key
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <molePutc+0x52a>
 800394e:	2300      	movs	r3, #0
 8003950:	e032      	b.n	80039b8 <molePutc+0x590>
                    if (c == MOLE_MSG_NEW_KEY) {
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	2b02      	cmp	r3, #2
 8003956:	d104      	bne.n	8003962 <molePutc+0x53a>
                        moleReKeyRequest(ctx, k, MOLE_MSG_REKEYED);
 8003958:	2203      	movs	r2, #3
 800395a:	68f9      	ldr	r1, [r7, #12]
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff fbce 	bl	80030fe <moleReKeyRequest>
                    moleNewKeys(ctx, k); // re-key locally
 8003962:	68f9      	ldr	r1, [r7, #12]
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff fc5b 	bl	8003220 <moleNewKeys>
                    if (r) return r;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <molePutc+0x54c>
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	e021      	b.n	80039b8 <molePutc+0x590>
                    r = MOLE_ERROR_REKEYED; // say "you've been re-keyed"
 8003974:	2307      	movs	r3, #7
 8003976:	61fb      	str	r3, [r7, #28]
                    break;
 8003978:	e002      	b.n	8003980 <molePutc+0x558>
                    r = MOLE_ERROR_UNKNOWN_MSG;
 800397a:	2312      	movs	r3, #18
 800397c:	61fb      	str	r3, [r7, #28]
            break;
 800397e:	e009      	b.n	8003994 <molePutc+0x56c>
 8003980:	e008      	b.n	8003994 <molePutc+0x56c>
        default: break;
 8003982:	bf00      	nop
 8003984:	e017      	b.n	80039b6 <molePutc+0x58e>
            if (r) break;
 8003986:	bf00      	nop
 8003988:	e015      	b.n	80039b6 <molePutc+0x58e>
            break;
 800398a:	bf00      	nop
 800398c:	e013      	b.n	80039b6 <molePutc+0x58e>
            if (r) break;
 800398e:	bf00      	nop
 8003990:	e011      	b.n	80039b6 <molePutc+0x58e>
            break;
 8003992:	bf00      	nop
        }
        break;
 8003994:	e00f      	b.n	80039b6 <molePutc+0x58e>
    default:
        ctx->state = IDLE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
        r = MOLE_ERROR_INVALID_STATE;
 800399e:	2301      	movs	r3, #1
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	e008      	b.n	80039b6 <molePutc+0x58e>
        if (c < MOLE_TAG_GET_BOILER) break; // limit range of valid tags
 80039a4:	bf00      	nop
 80039a6:	e006      	b.n	80039b6 <molePutc+0x58e>
        if (c > MOLE_TAG_ADMIN)      break;
 80039a8:	bf00      	nop
 80039aa:	e004      	b.n	80039b6 <molePutc+0x58e>
        break;
 80039ac:	bf00      	nop
 80039ae:	e002      	b.n	80039b6 <molePutc+0x58e>
        break;
 80039b0:	bf00      	nop
 80039b2:	e000      	b.n	80039b6 <molePutc+0x58e>
            break;
 80039b4:	bf00      	nop
    }
    return r;
 80039b6:	69fb      	ldr	r3, [r7, #28]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3720      	adds	r7, #32
 80039bc:	46bd      	mov	sp, r7
 80039be:	bdb0      	pop	{r4, r5, r7, pc}

080039c0 <moleSend>:
            moleFileInit(ctx);          // restart block if too long
        }
    }
}

int moleSend(port_ctx *ctx, const uint8_t *src, int len) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
    moleSendMsg(ctx, src, len, MOLE_MSG_MESSAGE);
 80039cc:	2301      	movs	r3, #1
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f7ff fb71 	bl	80030ba <moleSendMsg>
    return 0;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
	...

080039e4 <doRounds>:
static const uint8_t ind[32] = {
    0, 4, 8, 12, 1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15,
    0, 5, 10, 15, 1, 6, 11, 12, 2, 7, 8, 13, 3, 4, 9, 14
};

static void doRounds(uint32_t *x) {
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 10; i++){
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]
 80039f0:	e0c3      	b.n	8003b7a <doRounds+0x196>
        for (int j = 0; j < 8; j++) {
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	e0b9      	b.n	8003b6c <doRounds+0x188>
            const uint8_t * p = &ind[j*4];  // eliminate QUARTERROUND macro
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4a64      	ldr	r2, [pc, #400]	@ (8003b90 <doRounds+0x1ac>)
 80039fe:	4413      	add	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
            x[p[0]] += x[p[1]];  x[p[3]] = ROTL32(x[p[3]] ^ x[p[0]], 16);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	6819      	ldr	r1, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3301      	adds	r3, #1
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4413      	add	r3, r2
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4403      	add	r3, r0
 8003a26:	440a      	add	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3303      	adds	r3, #3
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	440b      	add	r3, r1
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	405a      	eors	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3303      	adds	r3, #3
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	440b      	add	r3, r1
 8003a52:	ea4f 4232 	mov.w	r2, r2, ror #16
 8003a56:	601a      	str	r2, [r3, #0]
            x[p[2]] += x[p[3]];  x[p[1]] = ROTL32(x[p[1]] ^ x[p[2]], 12);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4413      	add	r3, r2
 8003a64:	6819      	ldr	r1, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3303      	adds	r3, #3
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3302      	adds	r3, #2
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4403      	add	r3, r0
 8003a80:	440a      	add	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3301      	adds	r3, #1
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	4413      	add	r3, r2
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3302      	adds	r3, #2
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	440b      	add	r3, r1
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	405a      	eors	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	440b      	add	r3, r1
 8003aae:	ea4f 5232 	mov.w	r2, r2, ror #20
 8003ab2:	601a      	str	r2, [r3, #0]
            x[p[0]] += x[p[1]];  x[p[3]] = ROTL32(x[p[3]] ^ x[p[0]], 8);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	6819      	ldr	r1, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4413      	add	r3, r2
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4403      	add	r3, r0
 8003ad8:	440a      	add	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3303      	adds	r3, #3
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	440b      	add	r3, r1
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	405a      	eors	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	3303      	adds	r3, #3
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	440b      	add	r3, r1
 8003b04:	ea4f 6232 	mov.w	r2, r2, ror #24
 8003b08:	601a      	str	r2, [r3, #0]
            x[p[2]] += x[p[3]];  x[p[1]] = ROTL32(x[p[1]] ^ x[p[2]], 7);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	6819      	ldr	r1, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3303      	adds	r3, #3
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4413      	add	r3, r2
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3302      	adds	r3, #2
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	4403      	add	r3, r0
 8003b32:	440a      	add	r2, r1
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3302      	adds	r3, #2
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	440b      	add	r3, r1
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	405a      	eors	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3301      	adds	r3, #1
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	440b      	add	r3, r1
 8003b60:	ea4f 6272 	mov.w	r2, r2, ror #25
 8003b64:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 8; j++) {
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	2b07      	cmp	r3, #7
 8003b70:	f77f af42 	ble.w	80039f8 <doRounds+0x14>
    for (int i = 0; i < 10; i++){
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	3301      	adds	r3, #1
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2b09      	cmp	r3, #9
 8003b7e:	f77f af38 	ble.w	80039f2 <doRounds+0xe>
        }
    }
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	0800e14c 	.word	0x0800e14c

08003b94 <u8tou32>:

static uint32_t u8tou32(const uint8_t *p) {
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
    return                              // This little gem handles alignment
  (((uint32_t)(p[0])      ) |           // even if the CPU doesn't.
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
   ((uint32_t)(p[1]) <<  8) |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	021b      	lsls	r3, r3, #8
  (((uint32_t)(p[0])      ) |           // even if the CPU doesn't.
 8003baa:	431a      	orrs	r2, r3
   ((uint32_t)(p[2]) << 16) |
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3302      	adds	r3, #2
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	041b      	lsls	r3, r3, #16
   ((uint32_t)(p[1]) <<  8) |
 8003bb4:	431a      	orrs	r2, r3
   ((uint32_t)(p[3]) << 24));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3303      	adds	r3, #3
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	061b      	lsls	r3, r3, #24
   ((uint32_t)(p[2]) << 16) |
 8003bbe:	4313      	orrs	r3, r2
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <u32tou8>:

static void u32tou8(uint8_t *p, uint32_t v) {
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
    memcpy(p, &v, 4);                   // 8-bit --> 32-bit little-endian
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	601a      	str	r2, [r3, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <xchacha_hchacha20>:

void xchacha_hchacha20(uint8_t *out, const uint8_t *in, const uint8_t *k){
 8003be8:	b590      	push	{r4, r7, lr}
 8003bea:	b097      	sub	sp, #92	@ 0x5c
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t x[16];

    x[0] = 0x61707865;                  // XChaCha Constant
 8003bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8003ce0 <xchacha_hchacha20+0xf8>)
 8003bf6:	617b      	str	r3, [r7, #20]
    x[1] = 0x3320646e;
 8003bf8:	4b3a      	ldr	r3, [pc, #232]	@ (8003ce4 <xchacha_hchacha20+0xfc>)
 8003bfa:	61bb      	str	r3, [r7, #24]
    x[2] = 0x79622d32;
 8003bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ce8 <xchacha_hchacha20+0x100>)
 8003bfe:	61fb      	str	r3, [r7, #28]
    x[3] = 0x6b206574;
 8003c00:	4b3a      	ldr	r3, [pc, #232]	@ (8003cec <xchacha_hchacha20+0x104>)
 8003c02:	623b      	str	r3, [r7, #32]

    for (i = 0; i < 4; i++){
 8003c04:	2300      	movs	r3, #0
 8003c06:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c08:	e034      	b.n	8003c74 <xchacha_hchacha20+0x8c>
        x[i+ 4] = u8tou32(&k[i*4]);
 8003c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	461a      	mov	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	441a      	add	r2, r3
 8003c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c16:	1d1c      	adds	r4, r3, #4
 8003c18:	4610      	mov	r0, r2
 8003c1a:	f7ff ffbb 	bl	8003b94 <u8tou32>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	00a3      	lsls	r3, r4, #2
 8003c22:	3358      	adds	r3, #88	@ 0x58
 8003c24:	443b      	add	r3, r7
 8003c26:	f843 2c44 	str.w	r2, [r3, #-68]
        x[i+ 8] = u8tou32(&k[i*4+16]);
 8003c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	3310      	adds	r3, #16
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	441a      	add	r2, r3
 8003c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c36:	f103 0408 	add.w	r4, r3, #8
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f7ff ffaa 	bl	8003b94 <u8tou32>
 8003c40:	4602      	mov	r2, r0
 8003c42:	00a3      	lsls	r3, r4, #2
 8003c44:	3358      	adds	r3, #88	@ 0x58
 8003c46:	443b      	add	r3, r7
 8003c48:	f843 2c44 	str.w	r2, [r3, #-68]
        x[i+12] = u8tou32(&in[i*4]);
 8003c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	461a      	mov	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	441a      	add	r2, r3
 8003c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c58:	f103 040c 	add.w	r4, r3, #12
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	f7ff ff99 	bl	8003b94 <u8tou32>
 8003c62:	4602      	mov	r2, r0
 8003c64:	00a3      	lsls	r3, r4, #2
 8003c66:	3358      	adds	r3, #88	@ 0x58
 8003c68:	443b      	add	r3, r7
 8003c6a:	f843 2c44 	str.w	r2, [r3, #-68]
    for (i = 0; i < 4; i++){
 8003c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c70:	3301      	adds	r3, #1
 8003c72:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	ddc7      	ble.n	8003c0a <xchacha_hchacha20+0x22>
    }
    doRounds(x);
 8003c7a:	f107 0314 	add.w	r3, r7, #20
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff feb0 	bl	80039e4 <doRounds>
    for (i = 0; i < 4; i++){
 8003c84:	2300      	movs	r3, #0
 8003c86:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c88:	e021      	b.n	8003cce <xchacha_hchacha20+0xe6>
        u32tou8(out + i*4, x[i]);
 8003c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	461a      	mov	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	441a      	add	r2, r3
 8003c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	3358      	adds	r3, #88	@ 0x58
 8003c9a:	443b      	add	r3, r7
 8003c9c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	f7ff ff92 	bl	8003bcc <u32tou8>
        u32tou8(out + i*4 + 16, x[i+12]);
 8003ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	3310      	adds	r3, #16
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	441a      	add	r2, r3
 8003cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb4:	330c      	adds	r3, #12
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	3358      	adds	r3, #88	@ 0x58
 8003cba:	443b      	add	r3, r7
 8003cbc:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f7ff ff82 	bl	8003bcc <u32tou8>
    for (i = 0; i < 4; i++){
 8003cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cca:	3301      	adds	r3, #1
 8003ccc:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	ddda      	ble.n	8003c8a <xchacha_hchacha20+0xa2>
    }
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	375c      	adds	r7, #92	@ 0x5c
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd90      	pop	{r4, r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	61707865 	.word	0x61707865
 8003ce4:	3320646e 	.word	0x3320646e
 8003ce8:	79622d32 	.word	0x79622d32
 8003cec:	6b206574 	.word	0x6b206574

08003cf0 <xchacha_init>:

void xchacha_init(xChaCha_ctx *ctx, const uint8_t *k, uint8_t *iv){
 8003cf0:	b590      	push	{r4, r7, lr}
 8003cf2:	b08f      	sub	sp, #60	@ 0x3c
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
    /* The sub-key to use */
    uint8_t k2[32];
    int i;
    xchacha_hchacha20(k2, iv, k);
 8003cfc:	f107 0314 	add.w	r3, r7, #20
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff ff6f 	bl	8003be8 <xchacha_hchacha20>
    ctx->input[0] = 0x61707865;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4a21      	ldr	r2, [pc, #132]	@ (8003d94 <xchacha_init+0xa4>)
 8003d0e:	601a      	str	r2, [r3, #0]
    ctx->input[1] = 0x3320646e;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4a21      	ldr	r2, [pc, #132]	@ (8003d98 <xchacha_init+0xa8>)
 8003d14:	605a      	str	r2, [r3, #4]
    ctx->input[2] = 0x79622d32;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4a20      	ldr	r2, [pc, #128]	@ (8003d9c <xchacha_init+0xac>)
 8003d1a:	609a      	str	r2, [r3, #8]
    ctx->input[3] = 0x6b206574;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4a20      	ldr	r2, [pc, #128]	@ (8003da0 <xchacha_init+0xb0>)
 8003d20:	60da      	str	r2, [r3, #12]
    for (i = 0; i < 8; i++) {   // load the key
 8003d22:	2300      	movs	r3, #0
 8003d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d26:	e010      	b.n	8003d4a <xchacha_init+0x5a>
        ctx->input[i + 4] = u8tou32(&k2[i*4]);
 8003d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	f107 0214 	add.w	r2, r7, #20
 8003d30:	441a      	add	r2, r3
 8003d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d34:	1d1c      	adds	r4, r3, #4
 8003d36:	4610      	mov	r0, r2
 8003d38:	f7ff ff2c 	bl	8003b94 <u8tou32>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    for (i = 0; i < 8; i++) {   // load the key
 8003d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d46:	3301      	adds	r3, #1
 8003d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4c:	2b07      	cmp	r3, #7
 8003d4e:	ddeb      	ble.n	8003d28 <xchacha_init+0x38>
    }
    ctx->input[12] = 0;         /* Internal counter */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	631a      	str	r2, [r3, #48]	@ 0x30
    ctx->input[13] = 0;         /* Internal counter */
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	635a      	str	r2, [r3, #52]	@ 0x34
    ctx->input[14] = u8tou32(iv + 16);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3310      	adds	r3, #16
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff17 	bl	8003b94 <u8tou32>
 8003d66:	4602      	mov	r2, r0
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	639a      	str	r2, [r3, #56]	@ 0x38
    ctx->input[15] = u8tou32(iv + 20);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3314      	adds	r3, #20
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff0f 	bl	8003b94 <u8tou32>
 8003d76:	4602      	mov	r2, r0
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	63da      	str	r2, [r3, #60]	@ 0x3c
    ctx->chaptr = 64;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2240      	movs	r2, #64	@ 0x40
 8003d80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    ctx->blox = 0;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
}
 8003d8c:	bf00      	nop
 8003d8e:	373c      	adds	r7, #60	@ 0x3c
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd90      	pop	{r4, r7, pc}
 8003d94:	61707865 	.word	0x61707865
 8003d98:	3320646e 	.word	0x3320646e
 8003d9c:	79622d32 	.word	0x79622d32
 8003da0:	6b206574 	.word	0x6b206574

08003da4 <xchacha_next>:
void xchacha_set_counter(xChaCha_ctx *ctx, uint8_t *counter){
    ctx->input[12] = u8tou32(&counter[0]);
    ctx->input[13] = u8tou32(&counter[4]);
}

uint8_t xchacha_next(xChaCha_ctx *ctx){
 8003da4:	b5b0      	push	{r4, r5, r7, lr}
 8003da6:	b0a4      	sub	sp, #144	@ 0x90
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
    if (ctx->chaptr > 63) {
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003db2:	2b3f      	cmp	r3, #63	@ 0x3f
 8003db4:	d95a      	bls.n	8003e6c <xchacha_next+0xc8>
        ctx->chaptr = 0;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        uint32_t x[16], j[16];
        memcpy(j, &ctx->input, 64);
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003dc4:	2240      	movs	r2, #64	@ 0x40
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f009 fa8f 	bl	800d2ea <memcpy>
        memcpy(x, j, 64);
 8003dcc:	f107 040c 	add.w	r4, r7, #12
 8003dd0:	f107 054c 	add.w	r5, r7, #76	@ 0x4c
 8003dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003de0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        doRounds(x);
 8003de8:	f107 030c 	add.w	r3, r7, #12
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fdf9 	bl	80039e4 <doRounds>
        for (int i = 0; i < 16; i++) {
 8003df2:	2300      	movs	r3, #0
 8003df4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003df8:	e01a      	b.n	8003e30 <xchacha_next+0x8c>
            x[i] += j[i];
 8003dfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	3390      	adds	r3, #144	@ 0x90
 8003e02:	443b      	add	r3, r7
 8003e04:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8003e08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	3390      	adds	r3, #144	@ 0x90
 8003e10:	443b      	add	r3, r7
 8003e12:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003e16:	441a      	add	r2, r3
 8003e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	3390      	adds	r3, #144	@ 0x90
 8003e20:	443b      	add	r3, r7
 8003e22:	f843 2c84 	str.w	r2, [r3, #-132]
        for (int i = 0; i < 16; i++) {
 8003e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e34:	2b0f      	cmp	r3, #15
 8003e36:	dde0      	ble.n	8003dfa <xchacha_next+0x56>
        }
        memcpy(ctx->chabuf, x, 64);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3340      	adds	r3, #64	@ 0x40
 8003e3c:	f107 010c 	add.w	r1, r7, #12
 8003e40:	2240      	movs	r2, #64	@ 0x40
 8003e42:	4618      	mov	r0, r3
 8003e44:	f009 fa51 	bl	800d2ea <memcpy>
        j[12]++;
 8003e48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (!j[12]) j[13]++;
 8003e4e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <xchacha_next+0xba>
 8003e54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        ctx->input[12] = j[12];
 8003e5e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	631a      	str	r2, [r3, #48]	@ 0x30
        ctx->input[13] = j[13];
 8003e64:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    return ctx->chabuf[ctx->chaptr++];
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	b2d1      	uxtb	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	f882 1080 	strb.w	r1, [r2, #128]	@ 0x80
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3790      	adds	r7, #144	@ 0x90
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bdb0      	pop	{r4, r5, r7, pc}

08003e8e <xchacha_encrypt_bytes>:

void xchacha_encrypt_bytes(xChaCha_ctx *ctx, const uint8_t *m, uint8_t *c, uint32_t bytes){
 8003e8e:	b590      	push	{r4, r7, lr}
 8003e90:	b085      	sub	sp, #20
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	603b      	str	r3, [r7, #0]
    while (bytes--) {
 8003e9c:	e00f      	b.n	8003ebe <xchacha_encrypt_bytes+0x30>
        *c++ = *m++ ^ xchacha_next(ctx);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	60ba      	str	r2, [r7, #8]
 8003ea4:	781c      	ldrb	r4, [r3, #0]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7ff ff7c 	bl	8003da4 <xchacha_next>
 8003eac:	4603      	mov	r3, r0
 8003eae:	4619      	mov	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	ea84 0201 	eor.w	r2, r4, r1
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]
    while (bytes--) {
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	1e5a      	subs	r2, r3, #1
 8003ec2:	603a      	str	r2, [r7, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1ea      	bne.n	8003e9e <xchacha_encrypt_bytes+0x10>
    }
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd90      	pop	{r4, r7, pc}

08003ed2 <xc_crypt_init>:

/* ------------------------------------------------------------------------- */

// A more AES/SM4-like API abstraction

void xc_crypt_init(xChaCha_ctx *ctx, const uint8_t *key, const uint8_t *iv, int mode) {
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b08a      	sub	sp, #40	@ 0x28
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	603b      	str	r3, [r7, #0]
    uint8_t nonce[24];
    memset(nonce, 0, 24);
 8003ee0:	f107 0310 	add.w	r3, r7, #16
 8003ee4:	2218      	movs	r2, #24
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f009 f982 	bl	800d1f2 <memset>
    memcpy(nonce, iv, 16); // use 128 bits of the possible 192
 8003eee:	f107 0310 	add.w	r3, r7, #16
 8003ef2:	2210      	movs	r2, #16
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f009 f9f7 	bl	800d2ea <memcpy>
    xchacha_init(ctx, key, nonce);
 8003efc:	f107 0310 	add.w	r3, r7, #16
 8003f00:	461a      	mov	r2, r3
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f7ff fef3 	bl	8003cf0 <xchacha_init>
}
 8003f0a:	bf00      	nop
 8003f0c:	3728      	adds	r7, #40	@ 0x28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <xc_crypt_init_g>:
void xc_crypt_init_g(size_t *ctx, const uint8_t *key, const uint8_t *iv, int mode) {
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	603b      	str	r3, [r7, #0]
    xc_crypt_init((void *)ctx, key, iv, mode);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f7ff ffd3 	bl	8003ed2 <xc_crypt_init>
}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <xc_crypt_block>:

void xc_crypt_block(xChaCha_ctx *ctx, const uint8_t *in, uint8_t *out, int mode) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
 8003f40:	603b      	str	r3, [r7, #0]
    ctx->blox++;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8003f48:	3301      	adds	r3, #1
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    xchacha_encrypt_bytes(ctx, in, out, 16);
 8003f52:	2310      	movs	r3, #16
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7ff ff98 	bl	8003e8e <xchacha_encrypt_bytes>
}
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <xc_crypt_block_g>:
void xc_crypt_block_g(size_t *ctx, const uint8_t *in, uint8_t *out, int mode) {
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	603b      	str	r3, [r7, #0]
    xc_crypt_block((void *)ctx, in, out, mode);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f7ff ffda 	bl	8003f34 <xc_crypt_block>
}
 8003f80:	bf00      	nop
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003f8e:	4b60      	ldr	r3, [pc, #384]	@ (8004110 <main+0x188>)
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d11b      	bne.n	8003fd2 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f9a:	f3bf 8f4f 	dsb	sy
}
 8003f9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fa0:	f3bf 8f6f 	isb	sy
}
 8003fa4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003fa6:	4b5a      	ldr	r3, [pc, #360]	@ (8004110 <main+0x188>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003fae:	f3bf 8f4f 	dsb	sy
}
 8003fb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fb4:	f3bf 8f6f 	isb	sy
}
 8003fb8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003fba:	4b55      	ldr	r3, [pc, #340]	@ (8004110 <main+0x188>)
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	4a54      	ldr	r2, [pc, #336]	@ (8004110 <main+0x188>)
 8003fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fc4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fc6:	f3bf 8f4f 	dsb	sy
}
 8003fca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fcc:	f3bf 8f6f 	isb	sy
}
 8003fd0:	e000      	b.n	8003fd4 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8003fd2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8003fd4:	4b4e      	ldr	r3, [pc, #312]	@ (8004110 <main+0x188>)
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d138      	bne.n	8004052 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003fe0:	4b4b      	ldr	r3, [pc, #300]	@ (8004110 <main+0x188>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003fe8:	f3bf 8f4f 	dsb	sy
}
 8003fec:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8003fee:	4b48      	ldr	r3, [pc, #288]	@ (8004110 <main+0x188>)
 8003ff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ff4:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	0b5b      	lsrs	r3, r3, #13
 8003ffa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003ffe:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	08db      	lsrs	r3, r3, #3
 8004004:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004008:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8004012:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004018:	493d      	ldr	r1, [pc, #244]	@ (8004110 <main+0x188>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1e5a      	subs	r2, r3, #1
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1ef      	bne.n	800400a <main+0x82>
    } while(sets-- != 0U);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	1e5a      	subs	r2, r3, #1
 800402e:	60ba      	str	r2, [r7, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e5      	bne.n	8004000 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8004034:	f3bf 8f4f 	dsb	sy
}
 8004038:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800403a:	4b35      	ldr	r3, [pc, #212]	@ (8004110 <main+0x188>)
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	4a34      	ldr	r2, [pc, #208]	@ (8004110 <main+0x188>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004044:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004046:	f3bf 8f4f 	dsb	sy
}
 800404a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800404c:	f3bf 8f6f 	isb	sy
}
 8004050:	e000      	b.n	8004054 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8004052:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004054:	f001 faf4 	bl	8005640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004058:	f000 f860 	bl	800411c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800405c:	f000 fc0c 	bl	8004878 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8004060:	f000 fbbe 	bl	80047e0 <MX_USART3_UART_Init>
  MX_HRTIM_Init();
 8004064:	f000 f8fa 	bl	800425c <MX_HRTIM_Init>
  MX_RNG_Init();
 8004068:	f000 fada 	bl	8004620 <MX_RNG_Init>
  MX_SPI4_Init();
 800406c:	f000 faee 	bl	800464c <MX_SPI4_Init>
  MX_CRC_Init();
 8004070:	f000 f8d2 	bl	8004218 <MX_CRC_Init>
  MX_TIM2_Init();
 8004074:	f000 fb40 	bl	80046f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_HRTIM_WaveformOutputStart(&hhrtim, HRTIM_OUTPUT_TA1);  // Enable the generation of the waveform signal on the designated output
 8004078:	2101      	movs	r1, #1
 800407a:	4826      	ldr	r0, [pc, #152]	@ (8004114 <main+0x18c>)
 800407c:	f002 fc25 	bl	80068ca <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim, HRTIM_TIMERID_TIMER_A);  // Start the counter of the Timer A operating in waveform mode
 8004080:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8004084:	4823      	ldr	r0, [pc, #140]	@ (8004114 <main+0x18c>)
 8004086:	f002 fc4d 	bl	8006924 <HAL_HRTIM_WaveformCountStart>
  HAL_HRTIM_WaveformOutputStart(&hhrtim, HRTIM_OUTPUT_TB1);  // Enable the generation of the waveform signal on the designated output
 800408a:	2104      	movs	r1, #4
 800408c:	4821      	ldr	r0, [pc, #132]	@ (8004114 <main+0x18c>)
 800408e:	f002 fc1c 	bl	80068ca <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformOutputStart(&hhrtim, HRTIM_OUTPUT_TB2);  // Enable the generation of the waveform signal on the designated output
 8004092:	2108      	movs	r1, #8
 8004094:	481f      	ldr	r0, [pc, #124]	@ (8004114 <main+0x18c>)
 8004096:	f002 fc18 	bl	80068ca <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim, HRTIM_TIMERID_TIMER_B);  // Start the counter of the Timer A operating in waveform mode
 800409a:	f44f 2180 	mov.w	r1, #262144	@ 0x40000
 800409e:	481d      	ldr	r0, [pc, #116]	@ (8004114 <main+0x18c>)
 80040a0:	f002 fc40 	bl	8006924 <HAL_HRTIM_WaveformCountStart>
  HAL_HRTIM_WaveformOutputStart(&hhrtim, HRTIM_OUTPUT_TE1);  // Enable the generation of the waveform signal on the designated output
 80040a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80040a8:	481a      	ldr	r0, [pc, #104]	@ (8004114 <main+0x18c>)
 80040aa:	f002 fc0e 	bl	80068ca <HAL_HRTIM_WaveformOutputStart>
  HAL_HRTIM_WaveformCounterStart(&hhrtim, HRTIM_TIMERID_TIMER_E);  // Start the counter of the Timer E operating in waveform mode
 80040ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80040b2:	4818      	ldr	r0, [pc, #96]	@ (8004114 <main+0x18c>)
 80040b4:	f002 fc36 	bl	8006924 <HAL_HRTIM_WaveformCountStart>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80040b8:	2000      	movs	r0, #0
 80040ba:	f001 f96b 	bl	8005394 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80040be:	2001      	movs	r0, #1
 80040c0:	f001 f968 	bl	8005394 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80040c4:	2002      	movs	r0, #2
 80040c6:	f001 f965 	bl	8005394 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80040ca:	2101      	movs	r1, #1
 80040cc:	2000      	movs	r0, #0
 80040ce:	f001 fa2b 	bl	8005528 <BSP_PB_Init>

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 80040d2:	2000      	movs	r0, #0
 80040d4:	f001 f9d4 	bl	8005480 <BSP_LED_On>
  BSP_LED_On(LED_BLUE);
 80040d8:	2001      	movs	r0, #1
 80040da:	f001 f9d1 	bl	8005480 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 80040de:	2002      	movs	r0, #2
 80040e0:	f001 f9ce 	bl	8005480 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ApplicationInit();
 80040e4:	f7fc fd72 	bl	8000bcc <ApplicationInit>
  while (1)
  {
	  ApplicationStep();
 80040e8:	f7fc fd38 	bl	8000b5c <ApplicationStep>

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 80040ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004118 <main+0x190>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d1f9      	bne.n	80040e8 <main+0x160>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 80040f4:	4b08      	ldr	r3, [pc, #32]	@ (8004118 <main+0x190>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 80040fa:	2000      	movs	r0, #0
 80040fc:	f001 f9ea 	bl	80054d4 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_BLUE);
 8004100:	2001      	movs	r0, #1
 8004102:	f001 f9e7 	bl	80054d4 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8004106:	2002      	movs	r0, #2
 8004108:	f001 f9e4 	bl	80054d4 <BSP_LED_Toggle>
	  ApplicationStep();
 800410c:	e7ec      	b.n	80040e8 <main+0x160>
 800410e:	bf00      	nop
 8004110:	e000ed00 	.word	0xe000ed00
 8004114:	240129d8 	.word	0x240129d8
 8004118:	240129b0 	.word	0x240129b0

0800411c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b09c      	sub	sp, #112	@ 0x70
 8004120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004126:	224c      	movs	r2, #76	@ 0x4c
 8004128:	2100      	movs	r1, #0
 800412a:	4618      	mov	r0, r3
 800412c:	f009 f861 	bl	800d1f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004130:	1d3b      	adds	r3, r7, #4
 8004132:	2220      	movs	r2, #32
 8004134:	2100      	movs	r1, #0
 8004136:	4618      	mov	r0, r3
 8004138:	f009 f85b 	bl	800d1f2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800413c:	2002      	movs	r0, #2
 800413e:	f003 f993 	bl	8007468 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004142:	2300      	movs	r3, #0
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	4b32      	ldr	r3, [pc, #200]	@ (8004210 <SystemClock_Config+0xf4>)
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414a:	4a31      	ldr	r2, [pc, #196]	@ (8004210 <SystemClock_Config+0xf4>)
 800414c:	f023 0301 	bic.w	r3, r3, #1
 8004150:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004152:	4b2f      	ldr	r3, [pc, #188]	@ (8004210 <SystemClock_Config+0xf4>)
 8004154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	4b2d      	ldr	r3, [pc, #180]	@ (8004214 <SystemClock_Config+0xf8>)
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	4a2c      	ldr	r2, [pc, #176]	@ (8004214 <SystemClock_Config+0xf8>)
 8004162:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004166:	6193      	str	r3, [r2, #24]
 8004168:	4b2a      	ldr	r3, [pc, #168]	@ (8004214 <SystemClock_Config+0xf8>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004170:	603b      	str	r3, [r7, #0]
 8004172:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004174:	bf00      	nop
 8004176:	4b27      	ldr	r3, [pc, #156]	@ (8004214 <SystemClock_Config+0xf8>)
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800417e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004182:	d1f8      	bne.n	8004176 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8004184:	2322      	movs	r3, #34	@ 0x22
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004188:	2301      	movs	r3, #1
 800418a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800418c:	2340      	movs	r3, #64	@ 0x40
 800418e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004190:	2301      	movs	r3, #1
 8004192:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004194:	2302      	movs	r3, #2
 8004196:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004198:	2300      	movs	r3, #0
 800419a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800419c:	2304      	movs	r3, #4
 800419e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80041a0:	2332      	movs	r3, #50	@ 0x32
 80041a2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80041a4:	2302      	movs	r3, #2
 80041a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80041a8:	2304      	movs	r3, #4
 80041aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80041ac:	2302      	movs	r3, #2
 80041ae:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80041b0:	230c      	movs	r3, #12
 80041b2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041c0:	4618      	mov	r0, r3
 80041c2:	f003 f98b 	bl	80074dc <HAL_RCC_OscConfig>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80041cc:	f000 fc0a 	bl	80049e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041d0:	233f      	movs	r3, #63	@ 0x3f
 80041d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041d4:	2303      	movs	r3, #3
 80041d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80041dc:	2308      	movs	r3, #8
 80041de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80041e0:	2340      	movs	r3, #64	@ 0x40
 80041e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80041e4:	2340      	movs	r3, #64	@ 0x40
 80041e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80041e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80041ee:	2340      	movs	r3, #64	@ 0x40
 80041f0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80041f2:	1d3b      	adds	r3, r7, #4
 80041f4:	2102      	movs	r1, #2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f003 fdca 	bl	8007d90 <HAL_RCC_ClockConfig>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8004202:	f000 fbef 	bl	80049e4 <Error_Handler>
  }
}
 8004206:	bf00      	nop
 8004208:	3770      	adds	r7, #112	@ 0x70
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	58000400 	.word	0x58000400
 8004214:	58024800 	.word	0x58024800

08004218 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800421c:	4b0d      	ldr	r3, [pc, #52]	@ (8004254 <MX_CRC_Init+0x3c>)
 800421e:	4a0e      	ldr	r2, [pc, #56]	@ (8004258 <MX_CRC_Init+0x40>)
 8004220:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004222:	4b0c      	ldr	r3, [pc, #48]	@ (8004254 <MX_CRC_Init+0x3c>)
 8004224:	2200      	movs	r2, #0
 8004226:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004228:	4b0a      	ldr	r3, [pc, #40]	@ (8004254 <MX_CRC_Init+0x3c>)
 800422a:	2200      	movs	r2, #0
 800422c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800422e:	4b09      	ldr	r3, [pc, #36]	@ (8004254 <MX_CRC_Init+0x3c>)
 8004230:	2200      	movs	r2, #0
 8004232:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004234:	4b07      	ldr	r3, [pc, #28]	@ (8004254 <MX_CRC_Init+0x3c>)
 8004236:	2200      	movs	r2, #0
 8004238:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800423a:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <MX_CRC_Init+0x3c>)
 800423c:	2201      	movs	r2, #1
 800423e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004240:	4804      	ldr	r0, [pc, #16]	@ (8004254 <MX_CRC_Init+0x3c>)
 8004242:	f001 fb69 	bl	8005918 <HAL_CRC_Init>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800424c:	f000 fbca 	bl	80049e4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004250:	bf00      	nop
 8004252:	bd80      	pop	{r7, pc}
 8004254:	240129b4 	.word	0x240129b4
 8004258:	58024c00 	.word	0x58024c00

0800425c <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b0aa      	sub	sp, #168	@ 0xa8
 8004260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_EventCfgTypeDef pEventCfg = {0};
 8004262:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	605a      	str	r2, [r3, #4]
 800426c:	609a      	str	r2, [r3, #8]
 800426e:	60da      	str	r2, [r3, #12]
 8004270:	611a      	str	r2, [r3, #16]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8004272:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	605a      	str	r2, [r3, #4]
 800427c:	609a      	str	r2, [r3, #8]
 800427e:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8004280:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004284:	2254      	movs	r2, #84	@ 0x54
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f008 ffb2 	bl	800d1f2 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800428e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800429a:	1d3b      	adds	r3, r7, #4
 800429c:	2220      	movs	r2, #32
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f008 ffa6 	bl	800d1f2 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 80042a6:	4bc1      	ldr	r3, [pc, #772]	@ (80045ac <MX_HRTIM_Init+0x350>)
 80042a8:	4ac1      	ldr	r2, [pc, #772]	@ (80045b0 <MX_HRTIM_Init+0x354>)
 80042aa:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80042ac:	4bbf      	ldr	r3, [pc, #764]	@ (80045ac <MX_HRTIM_Init+0x350>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80042b2:	4bbe      	ldr	r3, [pc, #760]	@ (80045ac <MX_HRTIM_Init+0x350>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 80042b8:	48bc      	ldr	r0, [pc, #752]	@ (80045ac <MX_HRTIM_Init+0x350>)
 80042ba:	f001 ff95 	bl	80061e8 <HAL_HRTIM_Init>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <MX_HRTIM_Init+0x6c>
  {
    Error_Handler();
 80042c4:	f000 fb8e 	bl	80049e4 <Error_Handler>
  }
  if (HAL_HRTIM_EventPrescalerConfig(&hhrtim, HRTIM_EVENTPRESCALER_DIV1) != HAL_OK)
 80042c8:	2100      	movs	r1, #0
 80042ca:	48b8      	ldr	r0, [pc, #736]	@ (80045ac <MX_HRTIM_Init+0x350>)
 80042cc:	f002 f8b3 	bl	8006436 <HAL_HRTIM_EventPrescalerConfig>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <MX_HRTIM_Init+0x7e>
  {
    Error_Handler();
 80042d6:	f000 fb85 	bl	80049e4 <Error_Handler>
  }
  pEventCfg.Source = HRTIM_EVENTSRC_1;
 80042da:	2300      	movs	r3, #0
 80042dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pEventCfg.Polarity = HRTIM_EVENTPOLARITY_LOW;
 80042e0:	2304      	movs	r3, #4
 80042e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pEventCfg.Sensitivity = HRTIM_EVENTSENSITIVITY_LEVEL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pEventCfg.FastMode = HRTIM_EVENTFASTMODE_DISABLE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_HRTIM_EventConfig(&hhrtim, HRTIM_EVENT_1, &pEventCfg) != HAL_OK)
 80042f2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80042f6:	461a      	mov	r2, r3
 80042f8:	2101      	movs	r1, #1
 80042fa:	48ac      	ldr	r0, [pc, #688]	@ (80045ac <MX_HRTIM_Init+0x350>)
 80042fc:	f002 f86c 	bl	80063d8 <HAL_HRTIM_EventConfig>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <MX_HRTIM_Init+0xae>
  {
    Error_Handler();
 8004306:	f000 fb6d 	bl	80049e4 <Error_Handler>
  }
  pTimeBaseCfg.Period = 40000;
 800430a:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800430e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8004312:	2300      	movs	r3, #0
 8004314:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV1;
 8004318:	2305      	movs	r3, #5
 800431a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 800431e:	2308      	movs	r3, #8
 8004320:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8004324:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8004328:	461a      	mov	r2, r3
 800432a:	2100      	movs	r1, #0
 800432c:	489f      	ldr	r0, [pc, #636]	@ (80045ac <MX_HRTIM_Init+0x350>)
 800432e:	f002 f82b 	bl	8006388 <HAL_HRTIM_TimeBaseConfig>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <MX_HRTIM_Init+0xe0>
  {
    Error_Handler();
 8004338:	f000 fb54 	bl	80049e4 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 800433c:	2300      	movs	r3, #0
 800433e:	633b      	str	r3, [r7, #48]	@ 0x30
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8004340:	2300      	movs	r3, #0
 8004342:	637b      	str	r3, [r7, #52]	@ 0x34
  pTimerCfg.DMASrcAddress = 0x0000;
 8004344:	2300      	movs	r3, #0
 8004346:	63bb      	str	r3, [r7, #56]	@ 0x38
  pTimerCfg.DMADstAddress = 0x0000;
 8004348:	2300      	movs	r3, #0
 800434a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pTimerCfg.DMASize = 0x1;
 800434c:	2301      	movs	r3, #1
 800434e:	643b      	str	r3, [r7, #64]	@ 0x40
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8004350:	2300      	movs	r3, #0
 8004352:	647b      	str	r3, [r7, #68]	@ 0x44
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8004354:	2300      	movs	r3, #0
 8004356:	64bb      	str	r3, [r7, #72]	@ 0x48
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8004358:	2300      	movs	r3, #0
 800435a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 800435c:	2300      	movs	r3, #0
 800435e:	653b      	str	r3, [r7, #80]	@ 0x50
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8004360:	2300      	movs	r3, #0
 8004362:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8004364:	2300      	movs	r3, #0
 8004366:	65bb      	str	r3, [r7, #88]	@ 0x58
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8004368:	2300      	movs	r3, #0
 800436a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 800436c:	2300      	movs	r3, #0
 800436e:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8004370:	2300      	movs	r3, #0
 8004372:	667b      	str	r3, [r7, #100]	@ 0x64
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8004374:	2300      	movs	r3, #0
 8004376:	66bb      	str	r3, [r7, #104]	@ 0x68
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8004378:	2300      	movs	r3, #0
 800437a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800437c:	2300      	movs	r3, #0
 800437e:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8004380:	2300      	movs	r3, #0
 8004382:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8004384:	2300      	movs	r3, #0
 8004386:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8004388:	2300      	movs	r3, #0
 800438a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800438c:	2300      	movs	r3, #0
 800438e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8004392:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004396:	461a      	mov	r2, r3
 8004398:	2100      	movs	r1, #0
 800439a:	4884      	ldr	r0, [pc, #528]	@ (80045ac <MX_HRTIM_Init+0x350>)
 800439c:	f002 f884 	bl	80064a8 <HAL_HRTIM_WaveformTimerConfig>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <MX_HRTIM_Init+0x14e>
  {
    Error_Handler();
 80043a6:	f000 fb1d 	bl	80049e4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 80043aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80043ae:	461a      	mov	r2, r3
 80043b0:	2101      	movs	r1, #1
 80043b2:	487e      	ldr	r0, [pc, #504]	@ (80045ac <MX_HRTIM_Init+0x350>)
 80043b4:	f002 f878 	bl	80064a8 <HAL_HRTIM_WaveformTimerConfig>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <MX_HRTIM_Init+0x166>
  {
    Error_Handler();
 80043be:	f000 fb11 	bl	80049e4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 80043c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80043c6:	461a      	mov	r2, r3
 80043c8:	2102      	movs	r1, #2
 80043ca:	4878      	ldr	r0, [pc, #480]	@ (80045ac <MX_HRTIM_Init+0x350>)
 80043cc:	f002 f86c 	bl	80064a8 <HAL_HRTIM_WaveformTimerConfig>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <MX_HRTIM_Init+0x17e>
  {
    Error_Handler();
 80043d6:	f000 fb05 	bl	80049e4 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80043da:	2300      	movs	r3, #0
 80043dc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 80043de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80043e2:	461a      	mov	r2, r3
 80043e4:	2103      	movs	r1, #3
 80043e6:	4871      	ldr	r0, [pc, #452]	@ (80045ac <MX_HRTIM_Init+0x350>)
 80043e8:	f002 f85e 	bl	80064a8 <HAL_HRTIM_WaveformTimerConfig>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 80043f2:	f000 faf7 	bl	80049e4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80043f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80043fa:	461a      	mov	r2, r3
 80043fc:	2104      	movs	r1, #4
 80043fe:	486b      	ldr	r0, [pc, #428]	@ (80045ac <MX_HRTIM_Init+0x350>)
 8004400:	f002 f852 	bl	80064a8 <HAL_HRTIM_WaveformTimerConfig>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <MX_HRTIM_Init+0x1b2>
  {
    Error_Handler();
 800440a:	f000 faeb 	bl	80049e4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 25000;
 800440e:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8004412:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8004414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004418:	2201      	movs	r2, #1
 800441a:	2100      	movs	r1, #0
 800441c:	4863      	ldr	r0, [pc, #396]	@ (80045ac <MX_HRTIM_Init+0x350>)
 800441e:	f002 f8b5 	bl	800658c <HAL_HRTIM_WaveformCompareConfig>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <MX_HRTIM_Init+0x1d0>
  {
    Error_Handler();
 8004428:	f000 fadc 	bl	80049e4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 1000;
 800442c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004430:	627b      	str	r3, [r7, #36]	@ 0x24
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8004432:	2300      	movs	r3, #0
 8004434:	62bb      	str	r3, [r7, #40]	@ 0x28
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8004436:	2300      	movs	r3, #0
 8004438:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800443a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800443e:	2202      	movs	r2, #2
 8004440:	2101      	movs	r1, #1
 8004442:	485a      	ldr	r0, [pc, #360]	@ (80045ac <MX_HRTIM_Init+0x350>)
 8004444:	f002 f8a2 	bl	800658c <HAL_HRTIM_WaveformCompareConfig>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <MX_HRTIM_Init+0x1f6>
  {
    Error_Handler();
 800444e:	f000 fac9 	bl	80049e4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8004452:	2300      	movs	r3, #0
 8004454:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 8004456:	2304      	movs	r3, #4
 8004458:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1|HRTIM_OUTPUTRESET_UPDATE
 800445a:	4b56      	ldr	r3, [pc, #344]	@ (80045b4 <MX_HRTIM_Init+0x358>)
 800445c:	60fb      	str	r3, [r7, #12]
                              |HRTIM_OUTPUTRESET_EEV_1;
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8004466:	2300      	movs	r3, #0
 8004468:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800446e:	2300      	movs	r3, #0
 8004470:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8004472:	1d3b      	adds	r3, r7, #4
 8004474:	2201      	movs	r2, #1
 8004476:	2100      	movs	r1, #0
 8004478:	484c      	ldr	r0, [pc, #304]	@ (80045ac <MX_HRTIM_Init+0x350>)
 800447a:	f002 f9f5 	bl	8006868 <HAL_HRTIM_WaveformOutputConfig>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <MX_HRTIM_Init+0x22c>
  {
    Error_Handler();
 8004484:	f000 faae 	bl	80049e4 <Error_Handler>
  }
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP3;
 8004488:	2320      	movs	r3, #32
 800448a:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 800448c:	1d3b      	adds	r3, r7, #4
 800448e:	2204      	movs	r2, #4
 8004490:	2101      	movs	r1, #1
 8004492:	4846      	ldr	r0, [pc, #280]	@ (80045ac <MX_HRTIM_Init+0x350>)
 8004494:	f002 f9e8 	bl	8006868 <HAL_HRTIM_WaveformOutputConfig>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_HRTIM_Init+0x246>
  {
    Error_Handler();
 800449e:	f000 faa1 	bl	80049e4 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 80044aa:	1d3b      	adds	r3, r7, #4
 80044ac:	2210      	movs	r2, #16
 80044ae:	2102      	movs	r1, #2
 80044b0:	483e      	ldr	r0, [pc, #248]	@ (80045ac <MX_HRTIM_Init+0x350>)
 80044b2:	f002 f9d9 	bl	8006868 <HAL_HRTIM_WaveformOutputConfig>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <MX_HRTIM_Init+0x264>
  {
    Error_Handler();
 80044bc:	f000 fa92 	bl	80049e4 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 80044c0:	1d3b      	adds	r3, r7, #4
 80044c2:	2240      	movs	r2, #64	@ 0x40
 80044c4:	2103      	movs	r1, #3
 80044c6:	4839      	ldr	r0, [pc, #228]	@ (80045ac <MX_HRTIM_Init+0x350>)
 80044c8:	f002 f9ce 	bl	8006868 <HAL_HRTIM_WaveformOutputConfig>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <MX_HRTIM_Init+0x27a>
  {
    Error_Handler();
 80044d2:	f000 fa87 	bl	80049e4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 80044d6:	2302      	movs	r3, #2
 80044d8:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMPER;
 80044da:	2304      	movs	r3, #4
 80044dc:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 80044de:	2308      	movs	r3, #8
 80044e0:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 80044e2:	1d3b      	adds	r3, r7, #4
 80044e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044e8:	2104      	movs	r1, #4
 80044ea:	4830      	ldr	r0, [pc, #192]	@ (80045ac <MX_HRTIM_Init+0x350>)
 80044ec:	f002 f9bc 	bl	8006868 <HAL_HRTIM_WaveformOutputConfig>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <MX_HRTIM_Init+0x29e>
  {
    Error_Handler();
 80044f6:	f000 fa75 	bl	80049e4 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 80044fa:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80044fe:	461a      	mov	r2, r3
 8004500:	2101      	movs	r1, #1
 8004502:	482a      	ldr	r0, [pc, #168]	@ (80045ac <MX_HRTIM_Init+0x350>)
 8004504:	f001 ff40 	bl	8006388 <HAL_HRTIM_TimeBaseConfig>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <MX_HRTIM_Init+0x2b6>
  {
    Error_Handler();
 800450e:	f000 fa69 	bl	80049e4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 19000;
 8004512:	f644 2338 	movw	r3, #19000	@ 0x4a38
 8004516:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8004518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800451c:	2201      	movs	r2, #1
 800451e:	2101      	movs	r1, #1
 8004520:	4822      	ldr	r0, [pc, #136]	@ (80045ac <MX_HRTIM_Init+0x350>)
 8004522:	f002 f833 	bl	800658c <HAL_HRTIM_WaveformCompareConfig>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <MX_HRTIM_Init+0x2d4>
  {
    Error_Handler();
 800452c:	f000 fa5a 	bl	80049e4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 20000;
 8004530:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8004534:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8004536:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800453a:	2204      	movs	r2, #4
 800453c:	2101      	movs	r1, #1
 800453e:	481b      	ldr	r0, [pc, #108]	@ (80045ac <MX_HRTIM_Init+0x350>)
 8004540:	f002 f824 	bl	800658c <HAL_HRTIM_WaveformCompareConfig>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <MX_HRTIM_Init+0x2f2>
  {
    Error_Handler();
 800454a:	f000 fa4b 	bl	80049e4 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 800454e:	2310      	movs	r3, #16
 8004550:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8004552:	1d3b      	adds	r3, r7, #4
 8004554:	2208      	movs	r2, #8
 8004556:	2101      	movs	r1, #1
 8004558:	4814      	ldr	r0, [pc, #80]	@ (80045ac <MX_HRTIM_Init+0x350>)
 800455a:	f002 f985 	bl	8006868 <HAL_HRTIM_WaveformOutputConfig>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <MX_HRTIM_Init+0x30c>
  {
    Error_Handler();
 8004564:	f000 fa3e 	bl	80049e4 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8004568:	2300      	movs	r3, #0
 800456a:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800456c:	2300      	movs	r3, #0
 800456e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8004574:	1d3b      	adds	r3, r7, #4
 8004576:	2220      	movs	r2, #32
 8004578:	2102      	movs	r1, #2
 800457a:	480c      	ldr	r0, [pc, #48]	@ (80045ac <MX_HRTIM_Init+0x350>)
 800457c:	f002 f974 	bl	8006868 <HAL_HRTIM_WaveformOutputConfig>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <MX_HRTIM_Init+0x32e>
  {
    Error_Handler();
 8004586:	f000 fa2d 	bl	80049e4 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xFFFD;
 800458a:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 800458e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8004592:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8004596:	461a      	mov	r2, r3
 8004598:	2102      	movs	r1, #2
 800459a:	4804      	ldr	r0, [pc, #16]	@ (80045ac <MX_HRTIM_Init+0x350>)
 800459c:	f001 fef4 	bl	8006388 <HAL_HRTIM_TimeBaseConfig>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <MX_HRTIM_Init+0x35c>
  {
    Error_Handler();
 80045a6:	f000 fa1d 	bl	80049e4 <Error_Handler>
 80045aa:	e005      	b.n	80045b8 <MX_HRTIM_Init+0x35c>
 80045ac:	240129d8 	.word	0x240129d8
 80045b0:	40017400 	.word	0x40017400
 80045b4:	80200008 	.word	0x80200008
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 80045b8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80045bc:	461a      	mov	r2, r3
 80045be:	2103      	movs	r1, #3
 80045c0:	4816      	ldr	r0, [pc, #88]	@ (800461c <MX_HRTIM_Init+0x3c0>)
 80045c2:	f001 fee1 	bl	8006388 <HAL_HRTIM_TimeBaseConfig>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <MX_HRTIM_Init+0x374>
  {
    Error_Handler();
 80045cc:	f000 fa0a 	bl	80049e4 <Error_Handler>
  }
  pTimeBaseCfg.Period = 39999;
 80045d0:	f649 433f 	movw	r3, #39999	@ 0x9c3f
 80045d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 80045d8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80045dc:	461a      	mov	r2, r3
 80045de:	2104      	movs	r1, #4
 80045e0:	480e      	ldr	r0, [pc, #56]	@ (800461c <MX_HRTIM_Init+0x3c0>)
 80045e2:	f001 fed1 	bl	8006388 <HAL_HRTIM_TimeBaseConfig>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <MX_HRTIM_Init+0x394>
  {
    Error_Handler();
 80045ec:	f000 f9fa 	bl	80049e4 <Error_Handler>
  }
  pCompareCfg.CompareValue = 1000;
 80045f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80045f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045fa:	2201      	movs	r2, #1
 80045fc:	2104      	movs	r1, #4
 80045fe:	4807      	ldr	r0, [pc, #28]	@ (800461c <MX_HRTIM_Init+0x3c0>)
 8004600:	f001 ffc4 	bl	800658c <HAL_HRTIM_WaveformCompareConfig>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <MX_HRTIM_Init+0x3b2>
  {
    Error_Handler();
 800460a:	f000 f9eb 	bl	80049e4 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 800460e:	4803      	ldr	r0, [pc, #12]	@ (800461c <MX_HRTIM_Init+0x3c0>)
 8004610:	f000 fa94 	bl	8004b3c <HAL_HRTIM_MspPostInit>

}
 8004614:	bf00      	nop
 8004616:	37a8      	adds	r7, #168	@ 0xa8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	240129d8 	.word	0x240129d8

08004620 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8004624:	4b07      	ldr	r3, [pc, #28]	@ (8004644 <MX_RNG_Init+0x24>)
 8004626:	4a08      	ldr	r2, [pc, #32]	@ (8004648 <MX_RNG_Init+0x28>)
 8004628:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800462a:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <MX_RNG_Init+0x24>)
 800462c:	2200      	movs	r2, #0
 800462e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8004630:	4804      	ldr	r0, [pc, #16]	@ (8004644 <MX_RNG_Init+0x24>)
 8004632:	f005 fda7 	bl	800a184 <HAL_RNG_Init>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800463c:	f000 f9d2 	bl	80049e4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8004640:	bf00      	nop
 8004642:	bd80      	pop	{r7, pc}
 8004644:	24012ab4 	.word	0x24012ab4
 8004648:	48021800 	.word	0x48021800

0800464c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8004650:	4b27      	ldr	r3, [pc, #156]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 8004652:	4a28      	ldr	r2, [pc, #160]	@ (80046f4 <MX_SPI4_Init+0xa8>)
 8004654:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004656:	4b26      	ldr	r3, [pc, #152]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 8004658:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800465c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800465e:	4b24      	ldr	r3, [pc, #144]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 8004660:	2200      	movs	r2, #0
 8004662:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004664:	4b22      	ldr	r3, [pc, #136]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 8004666:	2207      	movs	r2, #7
 8004668:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800466a:	4b21      	ldr	r3, [pc, #132]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 800466c:	2200      	movs	r2, #0
 800466e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004670:	4b1f      	ldr	r3, [pc, #124]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 8004672:	2200      	movs	r2, #0
 8004674:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004676:	4b1e      	ldr	r3, [pc, #120]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 8004678:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800467c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800467e:	4b1c      	ldr	r3, [pc, #112]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 8004680:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004684:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004686:	4b1a      	ldr	r3, [pc, #104]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 8004688:	2200      	movs	r2, #0
 800468a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800468c:	4b18      	ldr	r3, [pc, #96]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 800468e:	2200      	movs	r2, #0
 8004690:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004692:	4b17      	ldr	r3, [pc, #92]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 8004694:	2200      	movs	r2, #0
 8004696:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8004698:	4b15      	ldr	r3, [pc, #84]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 800469a:	2200      	movs	r2, #0
 800469c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800469e:	4b14      	ldr	r3, [pc, #80]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 80046a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80046a4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80046a6:	4b12      	ldr	r3, [pc, #72]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80046ac:	4b10      	ldr	r3, [pc, #64]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80046b2:	4b0f      	ldr	r3, [pc, #60]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80046b8:	4b0d      	ldr	r3, [pc, #52]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80046be:	4b0c      	ldr	r3, [pc, #48]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80046c4:	4b0a      	ldr	r3, [pc, #40]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80046ca:	4b09      	ldr	r3, [pc, #36]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80046d0:	4b07      	ldr	r3, [pc, #28]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80046d6:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 80046d8:	2200      	movs	r2, #0
 80046da:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80046dc:	4804      	ldr	r0, [pc, #16]	@ (80046f0 <MX_SPI4_Init+0xa4>)
 80046de:	f005 fe33 	bl	800a348 <HAL_SPI_Init>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80046e8:	f000 f97c 	bl	80049e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80046ec:	bf00      	nop
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	24012ac8 	.word	0x24012ac8
 80046f4:	40013400 	.word	0x40013400

080046f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08e      	sub	sp, #56	@ 0x38
 80046fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	605a      	str	r2, [r3, #4]
 8004708:	609a      	str	r2, [r3, #8]
 800470a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800470c:	f107 031c 	add.w	r3, r7, #28
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004718:	463b      	mov	r3, r7
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	605a      	str	r2, [r3, #4]
 8004720:	609a      	str	r2, [r3, #8]
 8004722:	60da      	str	r2, [r3, #12]
 8004724:	611a      	str	r2, [r3, #16]
 8004726:	615a      	str	r2, [r3, #20]
 8004728:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800472a:	4b2c      	ldr	r3, [pc, #176]	@ (80047dc <MX_TIM2_Init+0xe4>)
 800472c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19;
 8004732:	4b2a      	ldr	r3, [pc, #168]	@ (80047dc <MX_TIM2_Init+0xe4>)
 8004734:	2213      	movs	r2, #19
 8004736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004738:	4b28      	ldr	r3, [pc, #160]	@ (80047dc <MX_TIM2_Init+0xe4>)
 800473a:	2200      	movs	r2, #0
 800473c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800473e:	4b27      	ldr	r3, [pc, #156]	@ (80047dc <MX_TIM2_Init+0xe4>)
 8004740:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004744:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004746:	4b25      	ldr	r3, [pc, #148]	@ (80047dc <MX_TIM2_Init+0xe4>)
 8004748:	2200      	movs	r2, #0
 800474a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800474c:	4b23      	ldr	r3, [pc, #140]	@ (80047dc <MX_TIM2_Init+0xe4>)
 800474e:	2200      	movs	r2, #0
 8004750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004752:	4822      	ldr	r0, [pc, #136]	@ (80047dc <MX_TIM2_Init+0xe4>)
 8004754:	f006 f9f3 	bl	800ab3e <HAL_TIM_Base_Init>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800475e:	f000 f941 	bl	80049e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004766:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004768:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800476c:	4619      	mov	r1, r3
 800476e:	481b      	ldr	r0, [pc, #108]	@ (80047dc <MX_TIM2_Init+0xe4>)
 8004770:	f006 fd30 	bl	800b1d4 <HAL_TIM_ConfigClockSource>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800477a:	f000 f933 	bl	80049e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800477e:	4817      	ldr	r0, [pc, #92]	@ (80047dc <MX_TIM2_Init+0xe4>)
 8004780:	f006 faac 	bl	800acdc <HAL_TIM_PWM_Init>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800478a:	f000 f92b 	bl	80049e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004792:	2300      	movs	r3, #0
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004796:	f107 031c 	add.w	r3, r7, #28
 800479a:	4619      	mov	r1, r3
 800479c:	480f      	ldr	r0, [pc, #60]	@ (80047dc <MX_TIM2_Init+0xe4>)
 800479e:	f007 fa4d 	bl	800bc3c <HAL_TIMEx_MasterConfigSynchronization>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80047a8:	f000 f91c 	bl	80049e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047ac:	2360      	movs	r3, #96	@ 0x60
 80047ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047b8:	2300      	movs	r3, #0
 80047ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047bc:	463b      	mov	r3, r7
 80047be:	2200      	movs	r2, #0
 80047c0:	4619      	mov	r1, r3
 80047c2:	4806      	ldr	r0, [pc, #24]	@ (80047dc <MX_TIM2_Init+0xe4>)
 80047c4:	f006 fbf2 	bl	800afac <HAL_TIM_PWM_ConfigChannel>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80047ce:	f000 f909 	bl	80049e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80047d2:	bf00      	nop
 80047d4:	3738      	adds	r7, #56	@ 0x38
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	24012b50 	.word	0x24012b50

080047e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80047e4:	4b22      	ldr	r3, [pc, #136]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 80047e6:	4a23      	ldr	r2, [pc, #140]	@ (8004874 <MX_USART3_UART_Init+0x94>)
 80047e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80047ea:	4b21      	ldr	r3, [pc, #132]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 80047ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80047f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80047f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80047f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80047fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 8004800:	2200      	movs	r2, #0
 8004802:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004804:	4b1a      	ldr	r3, [pc, #104]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 8004806:	220c      	movs	r2, #12
 8004808:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800480a:	4b19      	ldr	r3, [pc, #100]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 800480c:	2200      	movs	r2, #0
 800480e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004810:	4b17      	ldr	r3, [pc, #92]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 8004812:	2200      	movs	r2, #0
 8004814:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004816:	4b16      	ldr	r3, [pc, #88]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 8004818:	2200      	movs	r2, #0
 800481a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800481c:	4b14      	ldr	r3, [pc, #80]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 800481e:	2200      	movs	r2, #0
 8004820:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004822:	4b13      	ldr	r3, [pc, #76]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 8004824:	2200      	movs	r2, #0
 8004826:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004828:	4811      	ldr	r0, [pc, #68]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 800482a:	f007 fab3 	bl	800bd94 <HAL_UART_Init>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004834:	f000 f8d6 	bl	80049e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004838:	2100      	movs	r1, #0
 800483a:	480d      	ldr	r0, [pc, #52]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 800483c:	f008 fabb 	bl	800cdb6 <HAL_UARTEx_SetTxFifoThreshold>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004846:	f000 f8cd 	bl	80049e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800484a:	2100      	movs	r1, #0
 800484c:	4808      	ldr	r0, [pc, #32]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 800484e:	f008 faf0 	bl	800ce32 <HAL_UARTEx_SetRxFifoThreshold>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004858:	f000 f8c4 	bl	80049e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800485c:	4804      	ldr	r0, [pc, #16]	@ (8004870 <MX_USART3_UART_Init+0x90>)
 800485e:	f008 fa71 	bl	800cd44 <HAL_UARTEx_DisableFifoMode>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004868:	f000 f8bc 	bl	80049e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800486c:	bf00      	nop
 800486e:	bd80      	pop	{r7, pc}
 8004870:	24012b9c 	.word	0x24012b9c
 8004874:	40004800 	.word	0x40004800

08004878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08c      	sub	sp, #48	@ 0x30
 800487c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800487e:	f107 031c 	add.w	r3, r7, #28
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	605a      	str	r2, [r3, #4]
 8004888:	609a      	str	r2, [r3, #8]
 800488a:	60da      	str	r2, [r3, #12]
 800488c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800488e:	4b3f      	ldr	r3, [pc, #252]	@ (800498c <MX_GPIO_Init+0x114>)
 8004890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004894:	4a3d      	ldr	r2, [pc, #244]	@ (800498c <MX_GPIO_Init+0x114>)
 8004896:	f043 0310 	orr.w	r3, r3, #16
 800489a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800489e:	4b3b      	ldr	r3, [pc, #236]	@ (800498c <MX_GPIO_Init+0x114>)
 80048a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048a4:	f003 0310 	and.w	r3, r3, #16
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ac:	4b37      	ldr	r3, [pc, #220]	@ (800498c <MX_GPIO_Init+0x114>)
 80048ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048b2:	4a36      	ldr	r2, [pc, #216]	@ (800498c <MX_GPIO_Init+0x114>)
 80048b4:	f043 0304 	orr.w	r3, r3, #4
 80048b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80048bc:	4b33      	ldr	r3, [pc, #204]	@ (800498c <MX_GPIO_Init+0x114>)
 80048be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80048ca:	4b30      	ldr	r3, [pc, #192]	@ (800498c <MX_GPIO_Init+0x114>)
 80048cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048d0:	4a2e      	ldr	r2, [pc, #184]	@ (800498c <MX_GPIO_Init+0x114>)
 80048d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80048da:	4b2c      	ldr	r3, [pc, #176]	@ (800498c <MX_GPIO_Init+0x114>)
 80048dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80048e8:	4b28      	ldr	r3, [pc, #160]	@ (800498c <MX_GPIO_Init+0x114>)
 80048ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048ee:	4a27      	ldr	r2, [pc, #156]	@ (800498c <MX_GPIO_Init+0x114>)
 80048f0:	f043 0308 	orr.w	r3, r3, #8
 80048f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80048f8:	4b24      	ldr	r3, [pc, #144]	@ (800498c <MX_GPIO_Init+0x114>)
 80048fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004906:	4b21      	ldr	r3, [pc, #132]	@ (800498c <MX_GPIO_Init+0x114>)
 8004908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800490c:	4a1f      	ldr	r2, [pc, #124]	@ (800498c <MX_GPIO_Init+0x114>)
 800490e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004912:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004916:	4b1d      	ldr	r3, [pc, #116]	@ (800498c <MX_GPIO_Init+0x114>)
 8004918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800491c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004920:	60bb      	str	r3, [r7, #8]
 8004922:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004924:	4b19      	ldr	r3, [pc, #100]	@ (800498c <MX_GPIO_Init+0x114>)
 8004926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800492a:	4a18      	ldr	r2, [pc, #96]	@ (800498c <MX_GPIO_Init+0x114>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004934:	4b15      	ldr	r3, [pc, #84]	@ (800498c <MX_GPIO_Init+0x114>)
 8004936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	607b      	str	r3, [r7, #4]
 8004940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004942:	2200      	movs	r2, #0
 8004944:	2102      	movs	r1, #2
 8004946:	4812      	ldr	r0, [pc, #72]	@ (8004990 <MX_GPIO_Init+0x118>)
 8004948:	f001 fc1a 	bl	8006180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800494c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004952:	2300      	movs	r3, #0
 8004954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004956:	2301      	movs	r3, #1
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800495a:	f107 031c 	add.w	r3, r7, #28
 800495e:	4619      	mov	r1, r3
 8004960:	480c      	ldr	r0, [pc, #48]	@ (8004994 <MX_GPIO_Init+0x11c>)
 8004962:	f001 fa45 	bl	8005df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004966:	2302      	movs	r3, #2
 8004968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800496a:	2301      	movs	r3, #1
 800496c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496e:	2300      	movs	r3, #0
 8004970:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004972:	2300      	movs	r3, #0
 8004974:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004976:	f107 031c 	add.w	r3, r7, #28
 800497a:	4619      	mov	r1, r3
 800497c:	4804      	ldr	r0, [pc, #16]	@ (8004990 <MX_GPIO_Init+0x118>)
 800497e:	f001 fa37 	bl	8005df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004982:	bf00      	nop
 8004984:	3730      	adds	r7, #48	@ 0x30
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	58024400 	.word	0x58024400
 8004990:	58021000 	.word	0x58021000
 8004994:	58021800 	.word	0x58021800

08004998 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a04      	ldr	r2, [pc, #16]	@ (80049b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80049aa:	f000 fe85 	bl	80056b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40014800 	.word	0x40014800

080049bc <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80049cc:	4b04      	ldr	r3, [pc, #16]	@ (80049e0 <BSP_PB_Callback+0x24>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
  }
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	240129b0 	.word	0x240129b0

080049e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80049e8:	b672      	cpsid	i
}
 80049ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049ec:	bf00      	nop
 80049ee:	e7fd      	b.n	80049ec <Error_Handler+0x8>

080049f0 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004a20 <HAL_MspInit+0x30>)
 80049f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049fc:	4a08      	ldr	r2, [pc, #32]	@ (8004a20 <HAL_MspInit+0x30>)
 80049fe:	f043 0302 	orr.w	r3, r3, #2
 8004a02:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a06:	4b06      	ldr	r3, [pc, #24]	@ (8004a20 <HAL_MspInit+0x30>)
 8004a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	58024400 	.word	0x58024400

08004a24 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a0b      	ldr	r2, [pc, #44]	@ (8004a60 <HAL_CRC_MspInit+0x3c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d10e      	bne.n	8004a54 <HAL_CRC_MspInit+0x30>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004a36:	4b0b      	ldr	r3, [pc, #44]	@ (8004a64 <HAL_CRC_MspInit+0x40>)
 8004a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a3c:	4a09      	ldr	r2, [pc, #36]	@ (8004a64 <HAL_CRC_MspInit+0x40>)
 8004a3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a46:	4b07      	ldr	r3, [pc, #28]	@ (8004a64 <HAL_CRC_MspInit+0x40>)
 8004a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	58024c00 	.word	0x58024c00
 8004a64:	58024400 	.word	0x58024400

08004a68 <HAL_HRTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhrtim: HRTIM handle pointer
  * @retval None
  */
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b0ba      	sub	sp, #232	@ 0xe8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	60da      	str	r2, [r3, #12]
 8004a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a80:	f107 0310 	add.w	r3, r7, #16
 8004a84:	22c0      	movs	r2, #192	@ 0xc0
 8004a86:	2100      	movs	r1, #0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f008 fbb2 	bl	800d1f2 <memset>
  if(hhrtim->Instance==HRTIM1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a27      	ldr	r2, [pc, #156]	@ (8004b30 <HAL_HRTIM_MspInit+0xc8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d147      	bne.n	8004b28 <HAL_HRTIM_MspInit+0xc0>

    /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8004a98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_CPUCLK;
 8004aa4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004aac:	f107 0310 	add.w	r3, r7, #16
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f003 fd3b 	bl	800852c <HAL_RCCEx_PeriphCLKConfig>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_HRTIM_MspInit+0x58>
    {
      Error_Handler();
 8004abc:	f7ff ff92 	bl	80049e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8004b34 <HAL_HRTIM_MspInit+0xcc>)
 8004ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b34 <HAL_HRTIM_MspInit+0xcc>)
 8004ac8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004acc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ad0:	4b18      	ldr	r3, [pc, #96]	@ (8004b34 <HAL_HRTIM_MspInit+0xcc>)
 8004ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ad6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ade:	4b15      	ldr	r3, [pc, #84]	@ (8004b34 <HAL_HRTIM_MspInit+0xcc>)
 8004ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ae4:	4a13      	ldr	r2, [pc, #76]	@ (8004b34 <HAL_HRTIM_MspInit+0xcc>)
 8004ae6:	f043 0304 	orr.w	r3, r3, #4
 8004aea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004aee:	4b11      	ldr	r3, [pc, #68]	@ (8004b34 <HAL_HRTIM_MspInit+0xcc>)
 8004af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	60bb      	str	r3, [r7, #8]
 8004afa:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM GPIO Configuration
    PC10     ------> HRTIM_EEV1
    */
    GPIO_InitStruct.Pin = STINK_Pin;
 8004afc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b00:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b04:	2302      	movs	r3, #2
 8004b06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b10:	2300      	movs	r3, #0
 8004b12:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8004b16:	2302      	movs	r3, #2
 8004b18:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(STINK_GPIO_Port, &GPIO_InitStruct);
 8004b1c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004b20:	4619      	mov	r1, r3
 8004b22:	4805      	ldr	r0, [pc, #20]	@ (8004b38 <HAL_HRTIM_MspInit+0xd0>)
 8004b24:	f001 f964 	bl	8005df0 <HAL_GPIO_Init>

    /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 8004b28:	bf00      	nop
 8004b2a:	37e8      	adds	r7, #232	@ 0xe8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40017400 	.word	0x40017400
 8004b34:	58024400 	.word	0x58024400
 8004b38:	58020800 	.word	0x58020800

08004b3c <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08a      	sub	sp, #40	@ 0x28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b44:	f107 0314 	add.w	r3, r7, #20
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	605a      	str	r2, [r3, #4]
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	60da      	str	r2, [r3, #12]
 8004b52:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a43      	ldr	r2, [pc, #268]	@ (8004c68 <HAL_HRTIM_MspPostInit+0x12c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d17f      	bne.n	8004c5e <HAL_HRTIM_MspPostInit+0x122>
  {
    /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

    /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004b5e:	4b43      	ldr	r3, [pc, #268]	@ (8004c6c <HAL_HRTIM_MspPostInit+0x130>)
 8004b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b64:	4a41      	ldr	r2, [pc, #260]	@ (8004c6c <HAL_HRTIM_MspPostInit+0x130>)
 8004b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c6c <HAL_HRTIM_MspPostInit+0x130>)
 8004b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c6c <HAL_HRTIM_MspPostInit+0x130>)
 8004b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b82:	4a3a      	ldr	r2, [pc, #232]	@ (8004c6c <HAL_HRTIM_MspPostInit+0x130>)
 8004b84:	f043 0304 	orr.w	r3, r3, #4
 8004b88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b8c:	4b37      	ldr	r3, [pc, #220]	@ (8004c6c <HAL_HRTIM_MspPostInit+0x130>)
 8004b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b9a:	4b34      	ldr	r3, [pc, #208]	@ (8004c6c <HAL_HRTIM_MspPostInit+0x130>)
 8004b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ba0:	4a32      	ldr	r2, [pc, #200]	@ (8004c6c <HAL_HRTIM_MspPostInit+0x130>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004baa:	4b30      	ldr	r3, [pc, #192]	@ (8004c6c <HAL_HRTIM_MspPostInit+0x130>)
 8004bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> HRTIM_CHB2
    PA9     ------> HRTIM_CHC1
    PA10     ------> HRTIM_CHC2
    PA11     ------> HRTIM_CHD1
    */
    GPIO_InitStruct.Pin = SYNC_Pin;
 8004bb8:	2340      	movs	r3, #64	@ 0x40
 8004bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SYNC_GPIO_Port, &GPIO_InitStruct);
 8004bcc:	f107 0314 	add.w	r3, r7, #20
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4827      	ldr	r0, [pc, #156]	@ (8004c70 <HAL_HRTIM_MspPostInit+0x134>)
 8004bd4:	f001 f90c 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUCK_Pin;
 8004bd8:	2340      	movs	r3, #64	@ 0x40
 8004bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bdc:	2302      	movs	r3, #2
 8004bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be0:	2300      	movs	r3, #0
 8004be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004be4:	2303      	movs	r3, #3
 8004be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8004be8:	2301      	movs	r3, #1
 8004bea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUCK_GPIO_Port, &GPIO_InitStruct);
 8004bec:	f107 0314 	add.w	r3, r7, #20
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4820      	ldr	r0, [pc, #128]	@ (8004c74 <HAL_HRTIM_MspPostInit+0x138>)
 8004bf4:	f001 f8fc 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CN8_2_Pin;
 8004bf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfe:	2302      	movs	r3, #2
 8004c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004c06:	2301      	movs	r3, #1
 8004c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CN8_2_GPIO_Port, &GPIO_InitStruct);
 8004c0e:	f107 0314 	add.w	r3, r7, #20
 8004c12:	4619      	mov	r1, r3
 8004c14:	4817      	ldr	r0, [pc, #92]	@ (8004c74 <HAL_HRTIM_MspPostInit+0x138>)
 8004c16:	f001 f8eb 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CN12_23_Pin;
 8004c1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c20:	2302      	movs	r3, #2
 8004c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CN12_23_GPIO_Port, &GPIO_InitStruct);
 8004c30:	f107 0314 	add.w	r3, r7, #20
 8004c34:	4619      	mov	r1, r3
 8004c36:	4810      	ldr	r0, [pc, #64]	@ (8004c78 <HAL_HRTIM_MspPostInit+0x13c>)
 8004c38:	f001 f8da 	bl	8005df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004c3c:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8004c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c42:	2302      	movs	r3, #2
 8004c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8004c4e:	2302      	movs	r3, #2
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c52:	f107 0314 	add.w	r3, r7, #20
 8004c56:	4619      	mov	r1, r3
 8004c58:	4807      	ldr	r0, [pc, #28]	@ (8004c78 <HAL_HRTIM_MspPostInit+0x13c>)
 8004c5a:	f001 f8c9 	bl	8005df0 <HAL_GPIO_Init>
    /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

    /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8004c5e:	bf00      	nop
 8004c60:	3728      	adds	r7, #40	@ 0x28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40017400 	.word	0x40017400
 8004c6c:	58024400 	.word	0x58024400
 8004c70:	58021800 	.word	0x58021800
 8004c74:	58020800 	.word	0x58020800
 8004c78:	58020000 	.word	0x58020000

08004c7c <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b0b4      	sub	sp, #208	@ 0xd0
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c84:	f107 0310 	add.w	r3, r7, #16
 8004c88:	22c0      	movs	r2, #192	@ 0xc0
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f008 fab0 	bl	800d1f2 <memset>
  if(hrng->Instance==RNG)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a18      	ldr	r2, [pc, #96]	@ (8004cf8 <HAL_RNG_MspInit+0x7c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d129      	bne.n	8004cf0 <HAL_RNG_MspInit+0x74>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8004c9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cae:	f107 0310 	add.w	r3, r7, #16
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f003 fc3a 	bl	800852c <HAL_RCCEx_PeriphCLKConfig>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8004cbe:	f7ff fe91 	bl	80049e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004cfc <HAL_RNG_MspInit+0x80>)
 8004cc4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004cc8:	4a0c      	ldr	r2, [pc, #48]	@ (8004cfc <HAL_RNG_MspInit+0x80>)
 8004cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cce:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <HAL_RNG_MspInit+0x80>)
 8004cd4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 0, 0);
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	2050      	movs	r0, #80	@ 0x50
 8004ce6:	f000 fdef 	bl	80058c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8004cea:	2050      	movs	r0, #80	@ 0x50
 8004cec:	f000 fe06 	bl	80058fc <HAL_NVIC_EnableIRQ>

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8004cf0:	bf00      	nop
 8004cf2:	37d0      	adds	r7, #208	@ 0xd0
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	48021800 	.word	0x48021800
 8004cfc:	58024400 	.word	0x58024400

08004d00 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b0ba      	sub	sp, #232	@ 0xe8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d08:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	609a      	str	r2, [r3, #8]
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d18:	f107 0310 	add.w	r3, r7, #16
 8004d1c:	22c0      	movs	r2, #192	@ 0xc0
 8004d1e:	2100      	movs	r1, #0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f008 fa66 	bl	800d1f2 <memset>
  if(hspi->Instance==SPI4)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a26      	ldr	r2, [pc, #152]	@ (8004dc4 <HAL_SPI_MspInit+0xc4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d144      	bne.n	8004dba <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8004d30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d40:	f107 0310 	add.w	r3, r7, #16
 8004d44:	4618      	mov	r0, r3
 8004d46:	f003 fbf1 	bl	800852c <HAL_RCCEx_PeriphCLKConfig>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004d50:	f7ff fe48 	bl	80049e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004d54:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc8 <HAL_SPI_MspInit+0xc8>)
 8004d56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc8 <HAL_SPI_MspInit+0xc8>)
 8004d5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004d64:	4b18      	ldr	r3, [pc, #96]	@ (8004dc8 <HAL_SPI_MspInit+0xc8>)
 8004d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d72:	4b15      	ldr	r3, [pc, #84]	@ (8004dc8 <HAL_SPI_MspInit+0xc8>)
 8004d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d78:	4a13      	ldr	r2, [pc, #76]	@ (8004dc8 <HAL_SPI_MspInit+0xc8>)
 8004d7a:	f043 0310 	orr.w	r3, r3, #16
 8004d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d82:	4b11      	ldr	r3, [pc, #68]	@ (8004dc8 <HAL_SPI_MspInit+0xc8>)
 8004d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004d90:	2374      	movs	r3, #116	@ 0x74
 8004d92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d96:	2302      	movs	r3, #2
 8004d98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da2:	2300      	movs	r3, #0
 8004da4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004da8:	2305      	movs	r3, #5
 8004daa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004dae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004db2:	4619      	mov	r1, r3
 8004db4:	4805      	ldr	r0, [pc, #20]	@ (8004dcc <HAL_SPI_MspInit+0xcc>)
 8004db6:	f001 f81b 	bl	8005df0 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8004dba:	bf00      	nop
 8004dbc:	37e8      	adds	r7, #232	@ 0xe8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40013400 	.word	0x40013400
 8004dc8:	58024400 	.word	0x58024400
 8004dcc:	58021000 	.word	0x58021000

08004dd0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de0:	d10e      	bne.n	8004e00 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004de2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <HAL_TIM_Base_MspInit+0x3c>)
 8004de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004de8:	4a08      	ldr	r2, [pc, #32]	@ (8004e0c <HAL_TIM_Base_MspInit+0x3c>)
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004df2:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <HAL_TIM_Base_MspInit+0x3c>)
 8004df4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	58024400 	.word	0x58024400

08004e10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b0ba      	sub	sp, #232	@ 0xe8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	605a      	str	r2, [r3, #4]
 8004e22:	609a      	str	r2, [r3, #8]
 8004e24:	60da      	str	r2, [r3, #12]
 8004e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e28:	f107 0310 	add.w	r3, r7, #16
 8004e2c:	22c0      	movs	r2, #192	@ 0xc0
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4618      	mov	r0, r3
 8004e32:	f008 f9de 	bl	800d1f2 <memset>
  if(huart->Instance==USART3)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a27      	ldr	r2, [pc, #156]	@ (8004ed8 <HAL_UART_MspInit+0xc8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d146      	bne.n	8004ece <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004e40:	f04f 0202 	mov.w	r2, #2
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e52:	f107 0310 	add.w	r3, r7, #16
 8004e56:	4618      	mov	r0, r3
 8004e58:	f003 fb68 	bl	800852c <HAL_RCCEx_PeriphCLKConfig>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004e62:	f7ff fdbf 	bl	80049e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e66:	4b1d      	ldr	r3, [pc, #116]	@ (8004edc <HAL_UART_MspInit+0xcc>)
 8004e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8004edc <HAL_UART_MspInit+0xcc>)
 8004e6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004e76:	4b19      	ldr	r3, [pc, #100]	@ (8004edc <HAL_UART_MspInit+0xcc>)
 8004e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e84:	4b15      	ldr	r3, [pc, #84]	@ (8004edc <HAL_UART_MspInit+0xcc>)
 8004e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e8a:	4a14      	ldr	r2, [pc, #80]	@ (8004edc <HAL_UART_MspInit+0xcc>)
 8004e8c:	f043 0308 	orr.w	r3, r3, #8
 8004e90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004e94:	4b11      	ldr	r3, [pc, #68]	@ (8004edc <HAL_UART_MspInit+0xcc>)
 8004e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	60bb      	str	r3, [r7, #8]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004ea2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004ebc:	2307      	movs	r3, #7
 8004ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ec2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4805      	ldr	r0, [pc, #20]	@ (8004ee0 <HAL_UART_MspInit+0xd0>)
 8004eca:	f000 ff91 	bl	8005df0 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8004ece:	bf00      	nop
 8004ed0:	37e8      	adds	r7, #232	@ 0xe8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40004800 	.word	0x40004800
 8004edc:	58024400 	.word	0x58024400
 8004ee0:	58020c00 	.word	0x58020c00

08004ee4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08e      	sub	sp, #56	@ 0x38
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b0f      	cmp	r3, #15
 8004ef0:	d844      	bhi.n	8004f7c <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	2076      	movs	r0, #118	@ 0x76
 8004ef8:	f000 fce6 	bl	80058c8 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8004efc:	2076      	movs	r0, #118	@ 0x76
 8004efe:	f000 fcfd 	bl	80058fc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8004f02:	4a24      	ldr	r2, [pc, #144]	@ (8004f94 <HAL_InitTick+0xb0>)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8004f08:	4b23      	ldr	r3, [pc, #140]	@ (8004f98 <HAL_InitTick+0xb4>)
 8004f0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f0e:	4a22      	ldr	r2, [pc, #136]	@ (8004f98 <HAL_InitTick+0xb4>)
 8004f10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004f18:	4b1f      	ldr	r3, [pc, #124]	@ (8004f98 <HAL_InitTick+0xb4>)
 8004f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f26:	f107 020c 	add.w	r2, r7, #12
 8004f2a:	f107 0310 	add.w	r3, r7, #16
 8004f2e:	4611      	mov	r1, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f003 fab9 	bl	80084a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004f36:	f003 faa1 	bl	800847c <HAL_RCC_GetPCLK2Freq>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004f40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f42:	4a16      	ldr	r2, [pc, #88]	@ (8004f9c <HAL_InitTick+0xb8>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	0c9b      	lsrs	r3, r3, #18
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8004f4e:	4b14      	ldr	r3, [pc, #80]	@ (8004fa0 <HAL_InitTick+0xbc>)
 8004f50:	4a14      	ldr	r2, [pc, #80]	@ (8004fa4 <HAL_InitTick+0xc0>)
 8004f52:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8004f54:	4b12      	ldr	r3, [pc, #72]	@ (8004fa0 <HAL_InitTick+0xbc>)
 8004f56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004f5a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8004f5c:	4a10      	ldr	r2, [pc, #64]	@ (8004fa0 <HAL_InitTick+0xbc>)
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f60:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8004f62:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa0 <HAL_InitTick+0xbc>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f68:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa0 <HAL_InitTick+0xbc>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8004f6e:	480c      	ldr	r0, [pc, #48]	@ (8004fa0 <HAL_InitTick+0xbc>)
 8004f70:	f005 fde5 	bl	800ab3e <HAL_TIM_Base_Init>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d107      	bne.n	8004f8a <HAL_InitTick+0xa6>
 8004f7a:	e001      	b.n	8004f80 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e005      	b.n	8004f8c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8004f80:	4807      	ldr	r0, [pc, #28]	@ (8004fa0 <HAL_InitTick+0xbc>)
 8004f82:	f005 fe33 	bl	800abec <HAL_TIM_Base_Start_IT>
 8004f86:	4603      	mov	r3, r0
 8004f88:	e000      	b.n	8004f8c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3738      	adds	r7, #56	@ 0x38
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	24000028 	.word	0x24000028
 8004f98:	58024400 	.word	0x58024400
 8004f9c:	431bde83 	.word	0x431bde83
 8004fa0:	24012c30 	.word	0x24012c30
 8004fa4:	40014800 	.word	0x40014800

08004fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004fac:	bf00      	nop
 8004fae:	e7fd      	b.n	8004fac <NMI_Handler+0x4>

08004fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fb4:	bf00      	nop
 8004fb6:	e7fd      	b.n	8004fb4 <HardFault_Handler+0x4>

08004fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <MemManage_Handler+0x4>

08004fc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <BusFault_Handler+0x4>

08004fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fcc:	bf00      	nop
 8004fce:	e7fd      	b.n	8004fcc <UsageFault_Handler+0x4>

08004fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fd4:	bf00      	nop
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fe2:	bf00      	nop
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ff0:	bf00      	nop
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ffe:	bf00      	nop
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800500c:	2000      	movs	r0, #0
 800500e:	f000 fafd 	bl	800560c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 800501c:	4802      	ldr	r0, [pc, #8]	@ (8005028 <HASH_RNG_IRQHandler+0x10>)
 800501e:	f005 f913 	bl	800a248 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	24012ab4 	.word	0x24012ab4

0800502c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005030:	4802      	ldr	r0, [pc, #8]	@ (800503c <TIM17_IRQHandler+0x10>)
 8005032:	f005 feb4 	bl	800ad9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005036:	bf00      	nop
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	24012c30 	.word	0x24012c30

08005040 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  return 1;
 8005044:	2301      	movs	r3, #1
}
 8005046:	4618      	mov	r0, r3
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <_kill>:

int _kill(int pid, int sig)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800505a:	f008 f919 	bl	800d290 <__errno>
 800505e:	4603      	mov	r3, r0
 8005060:	2216      	movs	r2, #22
 8005062:	601a      	str	r2, [r3, #0]
  return -1;
 8005064:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <_exit>:

void _exit (int status)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005078:	f04f 31ff 	mov.w	r1, #4294967295
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff ffe7 	bl	8005050 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <_exit+0x12>

08005086 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b086      	sub	sp, #24
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005092:	2300      	movs	r3, #0
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	e00a      	b.n	80050ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005098:	f3af 8000 	nop.w
 800509c:	4601      	mov	r1, r0
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	60ba      	str	r2, [r7, #8]
 80050a4:	b2ca      	uxtb	r2, r1
 80050a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	3301      	adds	r3, #1
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	dbf0      	blt.n	8005098 <_read+0x12>
  }

  return len;
 80050b6:	687b      	ldr	r3, [r7, #4]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	e009      	b.n	80050e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	60ba      	str	r2, [r7, #8]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	3301      	adds	r3, #1
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	dbf1      	blt.n	80050d2 <_write+0x12>
  }
  return len;
 80050ee:	687b      	ldr	r3, [r7, #4]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <_close>:

int _close(int file)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005120:	605a      	str	r2, [r3, #4]
  return 0;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <_isatty>:

int _isatty(int file)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005138:	2301      	movs	r3, #1
}
 800513a:	4618      	mov	r0, r3
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005168:	4a14      	ldr	r2, [pc, #80]	@ (80051bc <_sbrk+0x5c>)
 800516a:	4b15      	ldr	r3, [pc, #84]	@ (80051c0 <_sbrk+0x60>)
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005174:	4b13      	ldr	r3, [pc, #76]	@ (80051c4 <_sbrk+0x64>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d102      	bne.n	8005182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800517c:	4b11      	ldr	r3, [pc, #68]	@ (80051c4 <_sbrk+0x64>)
 800517e:	4a12      	ldr	r2, [pc, #72]	@ (80051c8 <_sbrk+0x68>)
 8005180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005182:	4b10      	ldr	r3, [pc, #64]	@ (80051c4 <_sbrk+0x64>)
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4413      	add	r3, r2
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	429a      	cmp	r2, r3
 800518e:	d207      	bcs.n	80051a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005190:	f008 f87e 	bl	800d290 <__errno>
 8005194:	4603      	mov	r3, r0
 8005196:	220c      	movs	r2, #12
 8005198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800519a:	f04f 33ff 	mov.w	r3, #4294967295
 800519e:	e009      	b.n	80051b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051a0:	4b08      	ldr	r3, [pc, #32]	@ (80051c4 <_sbrk+0x64>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051a6:	4b07      	ldr	r3, [pc, #28]	@ (80051c4 <_sbrk+0x64>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4413      	add	r3, r2
 80051ae:	4a05      	ldr	r2, [pc, #20]	@ (80051c4 <_sbrk+0x64>)
 80051b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051b2:	68fb      	ldr	r3, [r7, #12]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	24080000 	.word	0x24080000
 80051c0:	00000400 	.word	0x00000400
 80051c4:	24012c7c 	.word	0x24012c7c
 80051c8:	24012dd8 	.word	0x24012dd8

080051cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80051d0:	4b43      	ldr	r3, [pc, #268]	@ (80052e0 <SystemInit+0x114>)
 80051d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d6:	4a42      	ldr	r2, [pc, #264]	@ (80052e0 <SystemInit+0x114>)
 80051d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80051e0:	4b40      	ldr	r3, [pc, #256]	@ (80052e4 <SystemInit+0x118>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	2b06      	cmp	r3, #6
 80051ea:	d807      	bhi.n	80051fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80051ec:	4b3d      	ldr	r3, [pc, #244]	@ (80052e4 <SystemInit+0x118>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f023 030f 	bic.w	r3, r3, #15
 80051f4:	4a3b      	ldr	r2, [pc, #236]	@ (80052e4 <SystemInit+0x118>)
 80051f6:	f043 0307 	orr.w	r3, r3, #7
 80051fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80051fc:	4b3a      	ldr	r3, [pc, #232]	@ (80052e8 <SystemInit+0x11c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a39      	ldr	r2, [pc, #228]	@ (80052e8 <SystemInit+0x11c>)
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005208:	4b37      	ldr	r3, [pc, #220]	@ (80052e8 <SystemInit+0x11c>)
 800520a:	2200      	movs	r2, #0
 800520c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800520e:	4b36      	ldr	r3, [pc, #216]	@ (80052e8 <SystemInit+0x11c>)
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4935      	ldr	r1, [pc, #212]	@ (80052e8 <SystemInit+0x11c>)
 8005214:	4b35      	ldr	r3, [pc, #212]	@ (80052ec <SystemInit+0x120>)
 8005216:	4013      	ands	r3, r2
 8005218:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800521a:	4b32      	ldr	r3, [pc, #200]	@ (80052e4 <SystemInit+0x118>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005226:	4b2f      	ldr	r3, [pc, #188]	@ (80052e4 <SystemInit+0x118>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f023 030f 	bic.w	r3, r3, #15
 800522e:	4a2d      	ldr	r2, [pc, #180]	@ (80052e4 <SystemInit+0x118>)
 8005230:	f043 0307 	orr.w	r3, r3, #7
 8005234:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005236:	4b2c      	ldr	r3, [pc, #176]	@ (80052e8 <SystemInit+0x11c>)
 8005238:	2200      	movs	r2, #0
 800523a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800523c:	4b2a      	ldr	r3, [pc, #168]	@ (80052e8 <SystemInit+0x11c>)
 800523e:	2200      	movs	r2, #0
 8005240:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005242:	4b29      	ldr	r3, [pc, #164]	@ (80052e8 <SystemInit+0x11c>)
 8005244:	2200      	movs	r2, #0
 8005246:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005248:	4b27      	ldr	r3, [pc, #156]	@ (80052e8 <SystemInit+0x11c>)
 800524a:	4a29      	ldr	r2, [pc, #164]	@ (80052f0 <SystemInit+0x124>)
 800524c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800524e:	4b26      	ldr	r3, [pc, #152]	@ (80052e8 <SystemInit+0x11c>)
 8005250:	4a28      	ldr	r2, [pc, #160]	@ (80052f4 <SystemInit+0x128>)
 8005252:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005254:	4b24      	ldr	r3, [pc, #144]	@ (80052e8 <SystemInit+0x11c>)
 8005256:	4a28      	ldr	r2, [pc, #160]	@ (80052f8 <SystemInit+0x12c>)
 8005258:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800525a:	4b23      	ldr	r3, [pc, #140]	@ (80052e8 <SystemInit+0x11c>)
 800525c:	2200      	movs	r2, #0
 800525e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005260:	4b21      	ldr	r3, [pc, #132]	@ (80052e8 <SystemInit+0x11c>)
 8005262:	4a25      	ldr	r2, [pc, #148]	@ (80052f8 <SystemInit+0x12c>)
 8005264:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005266:	4b20      	ldr	r3, [pc, #128]	@ (80052e8 <SystemInit+0x11c>)
 8005268:	2200      	movs	r2, #0
 800526a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800526c:	4b1e      	ldr	r3, [pc, #120]	@ (80052e8 <SystemInit+0x11c>)
 800526e:	4a22      	ldr	r2, [pc, #136]	@ (80052f8 <SystemInit+0x12c>)
 8005270:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005272:	4b1d      	ldr	r3, [pc, #116]	@ (80052e8 <SystemInit+0x11c>)
 8005274:	2200      	movs	r2, #0
 8005276:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005278:	4b1b      	ldr	r3, [pc, #108]	@ (80052e8 <SystemInit+0x11c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1a      	ldr	r2, [pc, #104]	@ (80052e8 <SystemInit+0x11c>)
 800527e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005282:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005284:	4b18      	ldr	r3, [pc, #96]	@ (80052e8 <SystemInit+0x11c>)
 8005286:	2200      	movs	r2, #0
 8005288:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800528a:	4b1c      	ldr	r3, [pc, #112]	@ (80052fc <SystemInit+0x130>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b1c      	ldr	r3, [pc, #112]	@ (8005300 <SystemInit+0x134>)
 8005290:	4013      	ands	r3, r2
 8005292:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005296:	d202      	bcs.n	800529e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005298:	4b1a      	ldr	r3, [pc, #104]	@ (8005304 <SystemInit+0x138>)
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800529e:	4b12      	ldr	r3, [pc, #72]	@ (80052e8 <SystemInit+0x11c>)
 80052a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80052a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d113      	bne.n	80052d4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80052ac:	4b0e      	ldr	r3, [pc, #56]	@ (80052e8 <SystemInit+0x11c>)
 80052ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80052b2:	4a0d      	ldr	r2, [pc, #52]	@ (80052e8 <SystemInit+0x11c>)
 80052b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80052b8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80052bc:	4b12      	ldr	r3, [pc, #72]	@ (8005308 <SystemInit+0x13c>)
 80052be:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80052c2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80052c4:	4b08      	ldr	r3, [pc, #32]	@ (80052e8 <SystemInit+0x11c>)
 80052c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80052ca:	4a07      	ldr	r2, [pc, #28]	@ (80052e8 <SystemInit+0x11c>)
 80052cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052d0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80052d4:	bf00      	nop
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	e000ed00 	.word	0xe000ed00
 80052e4:	52002000 	.word	0x52002000
 80052e8:	58024400 	.word	0x58024400
 80052ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80052f0:	02020200 	.word	0x02020200
 80052f4:	01ff0000 	.word	0x01ff0000
 80052f8:	01010280 	.word	0x01010280
 80052fc:	5c001000 	.word	0x5c001000
 8005300:	ffff0000 	.word	0xffff0000
 8005304:	51008108 	.word	0x51008108
 8005308:	52004000 	.word	0x52004000

0800530c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8005310:	4b09      	ldr	r3, [pc, #36]	@ (8005338 <ExitRun0Mode+0x2c>)
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4a08      	ldr	r2, [pc, #32]	@ (8005338 <ExitRun0Mode+0x2c>)
 8005316:	f043 0302 	orr.w	r3, r3, #2
 800531a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800531c:	bf00      	nop
 800531e:	4b06      	ldr	r3, [pc, #24]	@ (8005338 <ExitRun0Mode+0x2c>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0f9      	beq.n	800531e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	58024800 	.word	0x58024800

0800533c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800533c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8005378 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8005340:	f7ff ffe4 	bl	800530c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005344:	f7ff ff42 	bl	80051cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005348:	480c      	ldr	r0, [pc, #48]	@ (800537c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800534a:	490d      	ldr	r1, [pc, #52]	@ (8005380 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800534c:	4a0d      	ldr	r2, [pc, #52]	@ (8005384 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800534e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005350:	e002      	b.n	8005358 <LoopCopyDataInit>

08005352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005356:	3304      	adds	r3, #4

08005358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800535a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800535c:	d3f9      	bcc.n	8005352 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800535e:	4a0a      	ldr	r2, [pc, #40]	@ (8005388 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005360:	4c0a      	ldr	r4, [pc, #40]	@ (800538c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005364:	e001      	b.n	800536a <LoopFillZerobss>

08005366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005368:	3204      	adds	r2, #4

0800536a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800536a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800536c:	d3fb      	bcc.n	8005366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800536e:	f007 ff95 	bl	800d29c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005372:	f7fe fe09 	bl	8003f88 <main>
  bx  lr
 8005376:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005378:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800537c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005380:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8005384:	0800e2a0 	.word	0x0800e2a0
  ldr r2, =_sbss
 8005388:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 800538c:	24012dd8 	.word	0x24012dd8

08005390 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005390:	e7fe      	b.n	8005390 <ADC3_IRQHandler>
	...

08005394 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08c      	sub	sp, #48	@ 0x30
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800539e:	2300      	movs	r3, #0
 80053a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d009      	beq.n	80053bc <BSP_LED_Init+0x28>
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d006      	beq.n	80053bc <BSP_LED_Init+0x28>
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d003      	beq.n	80053bc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80053b4:	f06f 0301 	mvn.w	r3, #1
 80053b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ba:	e055      	b.n	8005468 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10f      	bne.n	80053e2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80053c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005474 <BSP_LED_Init+0xe0>)
 80053c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053c8:	4a2a      	ldr	r2, [pc, #168]	@ (8005474 <BSP_LED_Init+0xe0>)
 80053ca:	f043 0302 	orr.w	r3, r3, #2
 80053ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80053d2:	4b28      	ldr	r3, [pc, #160]	@ (8005474 <BSP_LED_Init+0xe0>)
 80053d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	e021      	b.n	8005426 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d10f      	bne.n	8005408 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80053e8:	4b22      	ldr	r3, [pc, #136]	@ (8005474 <BSP_LED_Init+0xe0>)
 80053ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053ee:	4a21      	ldr	r2, [pc, #132]	@ (8005474 <BSP_LED_Init+0xe0>)
 80053f0:	f043 0302 	orr.w	r3, r3, #2
 80053f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80053f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005474 <BSP_LED_Init+0xe0>)
 80053fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	e00e      	b.n	8005426 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8005408:	4b1a      	ldr	r3, [pc, #104]	@ (8005474 <BSP_LED_Init+0xe0>)
 800540a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800540e:	4a19      	ldr	r2, [pc, #100]	@ (8005474 <BSP_LED_Init+0xe0>)
 8005410:	f043 0302 	orr.w	r3, r3, #2
 8005414:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005418:	4b16      	ldr	r3, [pc, #88]	@ (8005474 <BSP_LED_Init+0xe0>)
 800541a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	4a13      	ldr	r2, [pc, #76]	@ (8005478 <BSP_LED_Init+0xe4>)
 800542a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800542e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005430:	2301      	movs	r3, #1
 8005432:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8005434:	2300      	movs	r3, #0
 8005436:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005438:	2303      	movs	r3, #3
 800543a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	4a0f      	ldr	r2, [pc, #60]	@ (800547c <BSP_LED_Init+0xe8>)
 8005440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005444:	f107 0218 	add.w	r2, r7, #24
 8005448:	4611      	mov	r1, r2
 800544a:	4618      	mov	r0, r3
 800544c:	f000 fcd0 	bl	8005df0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	4a0a      	ldr	r2, [pc, #40]	@ (800547c <BSP_LED_Init+0xe8>)
 8005454:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	4a07      	ldr	r2, [pc, #28]	@ (8005478 <BSP_LED_Init+0xe4>)
 800545c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005460:	2200      	movs	r2, #0
 8005462:	4619      	mov	r1, r3
 8005464:	f000 fe8c 	bl	8006180 <HAL_GPIO_WritePin>
  }

  return ret;
 8005468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800546a:	4618      	mov	r0, r3
 800546c:	3730      	adds	r7, #48	@ 0x30
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	58024400 	.word	0x58024400
 8005478:	0800e17c 	.word	0x0800e17c
 800547c:	24000010 	.word	0x24000010

08005480 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <BSP_LED_On+0x28>
 8005494:	79fb      	ldrb	r3, [r7, #7]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d006      	beq.n	80054a8 <BSP_LED_On+0x28>
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d003      	beq.n	80054a8 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80054a0:	f06f 0301 	mvn.w	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	e00b      	b.n	80054c0 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	4a08      	ldr	r2, [pc, #32]	@ (80054cc <BSP_LED_On+0x4c>)
 80054ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80054b0:	79fb      	ldrb	r3, [r7, #7]
 80054b2:	4a07      	ldr	r2, [pc, #28]	@ (80054d0 <BSP_LED_On+0x50>)
 80054b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054b8:	2201      	movs	r2, #1
 80054ba:	4619      	mov	r1, r3
 80054bc:	f000 fe60 	bl	8006180 <HAL_GPIO_WritePin>
  }

  return ret;
 80054c0:	68fb      	ldr	r3, [r7, #12]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	24000010 	.word	0x24000010
 80054d0:	0800e17c 	.word	0x0800e17c

080054d4 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d009      	beq.n	80054fc <BSP_LED_Toggle+0x28>
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d006      	beq.n	80054fc <BSP_LED_Toggle+0x28>
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d003      	beq.n	80054fc <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80054f4:	f06f 0301 	mvn.w	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	e00b      	b.n	8005514 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	4a08      	ldr	r2, [pc, #32]	@ (8005520 <BSP_LED_Toggle+0x4c>)
 8005500:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	4907      	ldr	r1, [pc, #28]	@ (8005524 <BSP_LED_Toggle+0x50>)
 8005508:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800550c:	4619      	mov	r1, r3
 800550e:	4610      	mov	r0, r2
 8005510:	f000 fe4f 	bl	80061b2 <HAL_GPIO_TogglePin>
  }

  return ret;
 8005514:	68fb      	ldr	r3, [r7, #12]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	24000010 	.word	0x24000010
 8005524:	0800e17c 	.word	0x0800e17c

08005528 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	460a      	mov	r2, r1
 8005532:	71fb      	strb	r3, [r7, #7]
 8005534:	4613      	mov	r3, r2
 8005536:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8005538:	4b2e      	ldr	r3, [pc, #184]	@ (80055f4 <BSP_PB_Init+0xcc>)
 800553a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800553e:	4a2d      	ldr	r2, [pc, #180]	@ (80055f4 <BSP_PB_Init+0xcc>)
 8005540:	f043 0304 	orr.w	r3, r3, #4
 8005544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005548:	4b2a      	ldr	r3, [pc, #168]	@ (80055f4 <BSP_PB_Init+0xcc>)
 800554a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	60bb      	str	r3, [r7, #8]
 8005554:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8005556:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800555a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800555c:	2302      	movs	r3, #2
 800555e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005560:	2302      	movs	r3, #2
 8005562:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8005564:	79bb      	ldrb	r3, [r7, #6]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10c      	bne.n	8005584 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800556a:	2300      	movs	r3, #0
 800556c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	4a21      	ldr	r2, [pc, #132]	@ (80055f8 <BSP_PB_Init+0xd0>)
 8005572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005576:	f107 020c 	add.w	r2, r7, #12
 800557a:	4611      	mov	r1, r2
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fc37 	bl	8005df0 <HAL_GPIO_Init>
 8005582:	e031      	b.n	80055e8 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8005584:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005588:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	4a1a      	ldr	r2, [pc, #104]	@ (80055f8 <BSP_PB_Init+0xd0>)
 800558e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005592:	f107 020c 	add.w	r2, r7, #12
 8005596:	4611      	mov	r1, r2
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fc29 	bl	8005df0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4a16      	ldr	r2, [pc, #88]	@ (80055fc <BSP_PB_Init+0xd4>)
 80055a4:	441a      	add	r2, r3
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	4915      	ldr	r1, [pc, #84]	@ (8005600 <BSP_PB_Init+0xd8>)
 80055aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055ae:	4619      	mov	r1, r3
 80055b0:	4610      	mov	r0, r2
 80055b2:	f000 fbd8 	bl	8005d66 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	00db      	lsls	r3, r3, #3
 80055ba:	4a10      	ldr	r2, [pc, #64]	@ (80055fc <BSP_PB_Init+0xd4>)
 80055bc:	1898      	adds	r0, r3, r2
 80055be:	79fb      	ldrb	r3, [r7, #7]
 80055c0:	4a10      	ldr	r2, [pc, #64]	@ (8005604 <BSP_PB_Init+0xdc>)
 80055c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c6:	461a      	mov	r2, r3
 80055c8:	2100      	movs	r1, #0
 80055ca:	f000 fbad 	bl	8005d28 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80055ce:	2028      	movs	r0, #40	@ 0x28
 80055d0:	79fb      	ldrb	r3, [r7, #7]
 80055d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005608 <BSP_PB_Init+0xe0>)
 80055d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d8:	2200      	movs	r2, #0
 80055da:	4619      	mov	r1, r3
 80055dc:	f000 f974 	bl	80058c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80055e0:	2328      	movs	r3, #40	@ 0x28
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 f98a 	bl	80058fc <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3720      	adds	r7, #32
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	58024400 	.word	0x58024400
 80055f8:	2400001c 	.word	0x2400001c
 80055fc:	24012c80 	.word	0x24012c80
 8005600:	0800e184 	.word	0x0800e184
 8005604:	24000020 	.word	0x24000020
 8005608:	24000024 	.word	0x24000024

0800560c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	4a04      	ldr	r2, [pc, #16]	@ (800562c <BSP_PB_IRQHandler+0x20>)
 800561c:	4413      	add	r3, r2
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fbb6 	bl	8005d90 <HAL_EXTI_IRQHandler>
}
 8005624:	bf00      	nop
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	24012c80 	.word	0x24012c80

08005630 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8005634:	2000      	movs	r0, #0
 8005636:	f7ff f9c1 	bl	80049bc <BSP_PB_Callback>
}
 800563a:	bf00      	nop
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005646:	2003      	movs	r0, #3
 8005648:	f000 f933 	bl	80058b2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800564c:	f002 fd56 	bl	80080fc <HAL_RCC_GetSysClockFreq>
 8005650:	4602      	mov	r2, r0
 8005652:	4b15      	ldr	r3, [pc, #84]	@ (80056a8 <HAL_Init+0x68>)
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	4913      	ldr	r1, [pc, #76]	@ (80056ac <HAL_Init+0x6c>)
 800565e:	5ccb      	ldrb	r3, [r1, r3]
 8005660:	f003 031f 	and.w	r3, r3, #31
 8005664:	fa22 f303 	lsr.w	r3, r2, r3
 8005668:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800566a:	4b0f      	ldr	r3, [pc, #60]	@ (80056a8 <HAL_Init+0x68>)
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	4a0e      	ldr	r2, [pc, #56]	@ (80056ac <HAL_Init+0x6c>)
 8005674:	5cd3      	ldrb	r3, [r2, r3]
 8005676:	f003 031f 	and.w	r3, r3, #31
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	fa22 f303 	lsr.w	r3, r2, r3
 8005680:	4a0b      	ldr	r2, [pc, #44]	@ (80056b0 <HAL_Init+0x70>)
 8005682:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005684:	4a0b      	ldr	r2, [pc, #44]	@ (80056b4 <HAL_Init+0x74>)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800568a:	200f      	movs	r0, #15
 800568c:	f7ff fc2a 	bl	8004ee4 <HAL_InitTick>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e002      	b.n	80056a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800569a:	f7ff f9a9 	bl	80049f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	58024400 	.word	0x58024400
 80056ac:	0800e16c 	.word	0x0800e16c
 80056b0:	2400000c 	.word	0x2400000c
 80056b4:	24000008 	.word	0x24000008

080056b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80056bc:	4b06      	ldr	r3, [pc, #24]	@ (80056d8 <HAL_IncTick+0x20>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b06      	ldr	r3, [pc, #24]	@ (80056dc <HAL_IncTick+0x24>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4413      	add	r3, r2
 80056c8:	4a04      	ldr	r2, [pc, #16]	@ (80056dc <HAL_IncTick+0x24>)
 80056ca:	6013      	str	r3, [r2, #0]
}
 80056cc:	bf00      	nop
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	2400002c 	.word	0x2400002c
 80056dc:	24012c88 	.word	0x24012c88

080056e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  return uwTick;
 80056e4:	4b03      	ldr	r3, [pc, #12]	@ (80056f4 <HAL_GetTick+0x14>)
 80056e6:	681b      	ldr	r3, [r3, #0]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	24012c88 	.word	0x24012c88

080056f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005700:	f7ff ffee 	bl	80056e0 <HAL_GetTick>
 8005704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005710:	d005      	beq.n	800571e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005712:	4b0a      	ldr	r3, [pc, #40]	@ (800573c <HAL_Delay+0x44>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800571e:	bf00      	nop
 8005720:	f7ff ffde 	bl	80056e0 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	429a      	cmp	r2, r3
 800572e:	d8f7      	bhi.n	8005720 <HAL_Delay+0x28>
  {
  }
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	2400002c 	.word	0x2400002c

08005740 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005744:	4b03      	ldr	r3, [pc, #12]	@ (8005754 <HAL_GetREVID+0x14>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	0c1b      	lsrs	r3, r3, #16
}
 800574a:	4618      	mov	r0, r3
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	5c001000 	.word	0x5c001000

08005758 <__NVIC_SetPriorityGrouping>:
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005768:	4b0b      	ldr	r3, [pc, #44]	@ (8005798 <__NVIC_SetPriorityGrouping+0x40>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005774:	4013      	ands	r3, r2
 8005776:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005780:	4b06      	ldr	r3, [pc, #24]	@ (800579c <__NVIC_SetPriorityGrouping+0x44>)
 8005782:	4313      	orrs	r3, r2
 8005784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005786:	4a04      	ldr	r2, [pc, #16]	@ (8005798 <__NVIC_SetPriorityGrouping+0x40>)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	60d3      	str	r3, [r2, #12]
}
 800578c:	bf00      	nop
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	e000ed00 	.word	0xe000ed00
 800579c:	05fa0000 	.word	0x05fa0000

080057a0 <__NVIC_GetPriorityGrouping>:
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057a4:	4b04      	ldr	r3, [pc, #16]	@ (80057b8 <__NVIC_GetPriorityGrouping+0x18>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	0a1b      	lsrs	r3, r3, #8
 80057aa:	f003 0307 	and.w	r3, r3, #7
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	e000ed00 	.word	0xe000ed00

080057bc <__NVIC_EnableIRQ>:
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	db0b      	blt.n	80057e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	f003 021f 	and.w	r2, r3, #31
 80057d4:	4907      	ldr	r1, [pc, #28]	@ (80057f4 <__NVIC_EnableIRQ+0x38>)
 80057d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	2001      	movs	r0, #1
 80057de:	fa00 f202 	lsl.w	r2, r0, r2
 80057e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	e000e100 	.word	0xe000e100

080057f8 <__NVIC_SetPriority>:
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	4603      	mov	r3, r0
 8005800:	6039      	str	r1, [r7, #0]
 8005802:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005808:	2b00      	cmp	r3, #0
 800580a:	db0a      	blt.n	8005822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	b2da      	uxtb	r2, r3
 8005810:	490c      	ldr	r1, [pc, #48]	@ (8005844 <__NVIC_SetPriority+0x4c>)
 8005812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005816:	0112      	lsls	r2, r2, #4
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	440b      	add	r3, r1
 800581c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005820:	e00a      	b.n	8005838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	b2da      	uxtb	r2, r3
 8005826:	4908      	ldr	r1, [pc, #32]	@ (8005848 <__NVIC_SetPriority+0x50>)
 8005828:	88fb      	ldrh	r3, [r7, #6]
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	3b04      	subs	r3, #4
 8005830:	0112      	lsls	r2, r2, #4
 8005832:	b2d2      	uxtb	r2, r2
 8005834:	440b      	add	r3, r1
 8005836:	761a      	strb	r2, [r3, #24]
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	e000e100 	.word	0xe000e100
 8005848:	e000ed00 	.word	0xe000ed00

0800584c <NVIC_EncodePriority>:
{
 800584c:	b480      	push	{r7}
 800584e:	b089      	sub	sp, #36	@ 0x24
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f003 0307 	and.w	r3, r3, #7
 800585e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f1c3 0307 	rsb	r3, r3, #7
 8005866:	2b04      	cmp	r3, #4
 8005868:	bf28      	it	cs
 800586a:	2304      	movcs	r3, #4
 800586c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	3304      	adds	r3, #4
 8005872:	2b06      	cmp	r3, #6
 8005874:	d902      	bls.n	800587c <NVIC_EncodePriority+0x30>
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	3b03      	subs	r3, #3
 800587a:	e000      	b.n	800587e <NVIC_EncodePriority+0x32>
 800587c:	2300      	movs	r3, #0
 800587e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005880:	f04f 32ff 	mov.w	r2, #4294967295
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	fa02 f303 	lsl.w	r3, r2, r3
 800588a:	43da      	mvns	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	401a      	ands	r2, r3
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005894:	f04f 31ff 	mov.w	r1, #4294967295
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	fa01 f303 	lsl.w	r3, r1, r3
 800589e:	43d9      	mvns	r1, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058a4:	4313      	orrs	r3, r2
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3724      	adds	r7, #36	@ 0x24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b082      	sub	sp, #8
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff ff4c 	bl	8005758 <__NVIC_SetPriorityGrouping>
}
 80058c0:	bf00      	nop
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b086      	sub	sp, #24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	4603      	mov	r3, r0
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80058d6:	f7ff ff63 	bl	80057a0 <__NVIC_GetPriorityGrouping>
 80058da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	6978      	ldr	r0, [r7, #20]
 80058e2:	f7ff ffb3 	bl	800584c <NVIC_EncodePriority>
 80058e6:	4602      	mov	r2, r0
 80058e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058ec:	4611      	mov	r1, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff ff82 	bl	80057f8 <__NVIC_SetPriority>
}
 80058f4:	bf00      	nop
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff ff56 	bl	80057bc <__NVIC_EnableIRQ>
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e054      	b.n	80059d4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	7f5b      	ldrb	r3, [r3, #29]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d105      	bne.n	8005940 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff f872 	bl	8004a24 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	791b      	ldrb	r3, [r3, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10c      	bne.n	8005968 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a22      	ldr	r2, [pc, #136]	@ (80059dc <HAL_CRC_Init+0xc4>)
 8005954:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0218 	bic.w	r2, r2, #24
 8005964:	609a      	str	r2, [r3, #8]
 8005966:	e00c      	b.n	8005982 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6899      	ldr	r1, [r3, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	461a      	mov	r2, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f94a 	bl	8005c0c <HAL_CRCEx_Polynomial_Set>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e028      	b.n	80059d4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	795b      	ldrb	r3, [r3, #5]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d105      	bne.n	8005996 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f04f 32ff 	mov.w	r2, #4294967295
 8005992:	611a      	str	r2, [r3, #16]
 8005994:	e004      	b.n	80059a0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	6912      	ldr	r2, [r2, #16]
 800599e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	695a      	ldr	r2, [r3, #20]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	04c11db7 	.word	0x04c11db7

080059e0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80059ec:	2300      	movs	r3, #0
 80059ee:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2202      	movs	r2, #2
 80059f4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0201 	orr.w	r2, r2, #1
 8005a04:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d006      	beq.n	8005a1c <HAL_CRC_Calculate+0x3c>
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d829      	bhi.n	8005a66 <HAL_CRC_Calculate+0x86>
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d019      	beq.n	8005a4a <HAL_CRC_Calculate+0x6a>
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d01e      	beq.n	8005a58 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8005a1a:	e024      	b.n	8005a66 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	e00a      	b.n	8005a38 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	441a      	add	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	3301      	adds	r3, #1
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d3f0      	bcc.n	8005a22 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	613b      	str	r3, [r7, #16]
      break;
 8005a48:	e00e      	b.n	8005a68 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f812 	bl	8005a78 <CRC_Handle_8>
 8005a54:	6138      	str	r0, [r7, #16]
      break;
 8005a56:	e007      	b.n	8005a68 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 f89b 	bl	8005b98 <CRC_Handle_16>
 8005a62:	6138      	str	r0, [r7, #16]
      break;
 8005a64:	e000      	b.n	8005a68 <HAL_CRC_Calculate+0x88>
      break;
 8005a66:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005a6e:	693b      	ldr	r3, [r7, #16]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b089      	sub	sp, #36	@ 0x24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	e023      	b.n	8005ad2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	4413      	add	r3, r2
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	440b      	add	r3, r1
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005aa4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	3302      	adds	r3, #2
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	440b      	add	r3, r1
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005ab4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	3303      	adds	r3, #3
 8005abc:	68b9      	ldr	r1, [r7, #8]
 8005abe:	440b      	add	r3, r1
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005ac8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005aca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	089b      	lsrs	r3, r3, #2
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d3d6      	bcc.n	8005a8a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d04f      	beq.n	8005b86 <CRC_Handle_8+0x10e>
  {
    if ((BufferLength % 4U) == 1U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f003 0303 	and.w	r3, r3, #3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d107      	bne.n	8005b00 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	4413      	add	r3, r2
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	6812      	ldr	r2, [r2, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d117      	bne.n	8005b3a <CRC_Handle_8+0xc2>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	4413      	add	r3, r2
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	b21b      	sxth	r3, r3
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	b21a      	sxth	r2, r3
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	3301      	adds	r3, #1
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	440b      	add	r3, r1
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	b21b      	sxth	r3, r3
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	b21b      	sxth	r3, r3
 8005b2c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	8b7a      	ldrh	r2, [r7, #26]
 8005b38:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d120      	bne.n	8005b86 <CRC_Handle_8+0x10e>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	b21b      	sxth	r3, r3
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	b21a      	sxth	r2, r3
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	3301      	adds	r3, #1
 8005b5a:	68b9      	ldr	r1, [r7, #8]
 8005b5c:	440b      	add	r3, r1
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	b21b      	sxth	r3, r3
 8005b62:	4313      	orrs	r3, r2
 8005b64:	b21b      	sxth	r3, r3
 8005b66:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	8b7a      	ldrh	r2, [r7, #26]
 8005b72:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	3302      	adds	r3, #2
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3724      	adds	r7, #36	@ 0x24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e013      	b.n	8005bd2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	041a      	lsls	r2, r3, #16
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	3302      	adds	r3, #2
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	440b      	add	r3, r1
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d3e6      	bcc.n	8005baa <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d009      	beq.n	8005bfa <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	881a      	ldrh	r2, [r3, #0]
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005c1c:	231f      	movs	r3, #31
 8005c1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	75fb      	strb	r3, [r7, #23]
 8005c2e:	e063      	b.n	8005cf8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005c30:	bf00      	nop
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1e5a      	subs	r2, r3, #1
 8005c36:	613a      	str	r2, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d009      	beq.n	8005c50 <HAL_CRCEx_Polynomial_Set+0x44>
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f003 031f 	and.w	r3, r3, #31
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	fa22 f303 	lsr.w	r3, r2, r3
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f0      	beq.n	8005c32 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b18      	cmp	r3, #24
 8005c54:	d846      	bhi.n	8005ce4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8005c56:	a201      	add	r2, pc, #4	@ (adr r2, 8005c5c <HAL_CRCEx_Polynomial_Set+0x50>)
 8005c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5c:	08005ceb 	.word	0x08005ceb
 8005c60:	08005ce5 	.word	0x08005ce5
 8005c64:	08005ce5 	.word	0x08005ce5
 8005c68:	08005ce5 	.word	0x08005ce5
 8005c6c:	08005ce5 	.word	0x08005ce5
 8005c70:	08005ce5 	.word	0x08005ce5
 8005c74:	08005ce5 	.word	0x08005ce5
 8005c78:	08005ce5 	.word	0x08005ce5
 8005c7c:	08005cd9 	.word	0x08005cd9
 8005c80:	08005ce5 	.word	0x08005ce5
 8005c84:	08005ce5 	.word	0x08005ce5
 8005c88:	08005ce5 	.word	0x08005ce5
 8005c8c:	08005ce5 	.word	0x08005ce5
 8005c90:	08005ce5 	.word	0x08005ce5
 8005c94:	08005ce5 	.word	0x08005ce5
 8005c98:	08005ce5 	.word	0x08005ce5
 8005c9c:	08005ccd 	.word	0x08005ccd
 8005ca0:	08005ce5 	.word	0x08005ce5
 8005ca4:	08005ce5 	.word	0x08005ce5
 8005ca8:	08005ce5 	.word	0x08005ce5
 8005cac:	08005ce5 	.word	0x08005ce5
 8005cb0:	08005ce5 	.word	0x08005ce5
 8005cb4:	08005ce5 	.word	0x08005ce5
 8005cb8:	08005ce5 	.word	0x08005ce5
 8005cbc:	08005cc1 	.word	0x08005cc1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	2b06      	cmp	r3, #6
 8005cc4:	d913      	bls.n	8005cee <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005cca:	e010      	b.n	8005cee <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	2b07      	cmp	r3, #7
 8005cd0:	d90f      	bls.n	8005cf2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005cd6:	e00c      	b.n	8005cf2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	2b0f      	cmp	r3, #15
 8005cdc:	d90b      	bls.n	8005cf6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005ce2:	e008      	b.n	8005cf6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	75fb      	strb	r3, [r7, #23]
        break;
 8005ce8:	e006      	b.n	8005cf8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005cea:	bf00      	nop
 8005cec:	e004      	b.n	8005cf8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005cee:	bf00      	nop
 8005cf0:	e002      	b.n	8005cf8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005cf2:	bf00      	nop
 8005cf4:	e000      	b.n	8005cf8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005cf6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10d      	bne.n	8005d1a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f023 0118 	bic.w	r1, r3, #24
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	460b      	mov	r3, r1
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e00a      	b.n	8005d5a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005d44:	7afb      	ldrb	r3, [r7, #11]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d103      	bne.n	8005d52 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	605a      	str	r2, [r3, #4]
      break;
 8005d50:	e002      	b.n	8005d58 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	75fb      	strb	r3, [r7, #23]
      break;
 8005d56:	bf00      	nop
  }

  return status;
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e003      	b.n	8005d82 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005d80:	2300      	movs	r3, #0
  }
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
	...

08005d90 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	0c1b      	lsrs	r3, r3, #16
 8005d9e:	f003 0303 	and.w	r3, r3, #3
 8005da2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 031f 	and.w	r3, r3, #31
 8005dac:	2201      	movs	r2, #1
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	011a      	lsls	r2, r3, #4
 8005db8:	4b0c      	ldr	r3, [pc, #48]	@ (8005dec <HAL_EXTI_IRQHandler+0x5c>)
 8005dba:	4413      	add	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	693a      	ldr	r2, [r7, #16]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4798      	blx	r3
    }
  }
}
 8005de2:	bf00      	nop
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	58000088 	.word	0x58000088

08005df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b089      	sub	sp, #36	@ 0x24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005dfe:	4b89      	ldr	r3, [pc, #548]	@ (8006024 <HAL_GPIO_Init+0x234>)
 8005e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e02:	e194      	b.n	800612e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	2101      	movs	r1, #1
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e10:	4013      	ands	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 8186 	beq.w	8006128 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f003 0303 	and.w	r3, r3, #3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d005      	beq.n	8005e34 <HAL_GPIO_Init+0x44>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d130      	bne.n	8005e96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	2203      	movs	r2, #3
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	43db      	mvns	r3, r3
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e72:	43db      	mvns	r3, r3
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	4013      	ands	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	091b      	lsrs	r3, r3, #4
 8005e80:	f003 0201 	and.w	r2, r3, #1
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d017      	beq.n	8005ed2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	2203      	movs	r2, #3
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d123      	bne.n	8005f26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	08da      	lsrs	r2, r3, #3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3208      	adds	r2, #8
 8005ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	220f      	movs	r2, #15
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	43db      	mvns	r3, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4013      	ands	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f12:	69ba      	ldr	r2, [r7, #24]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	08da      	lsrs	r2, r3, #3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3208      	adds	r2, #8
 8005f20:	69b9      	ldr	r1, [r7, #24]
 8005f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	2203      	movs	r2, #3
 8005f32:	fa02 f303 	lsl.w	r3, r2, r3
 8005f36:	43db      	mvns	r3, r3
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f003 0203 	and.w	r2, r3, #3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 80e0 	beq.w	8006128 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f68:	4b2f      	ldr	r3, [pc, #188]	@ (8006028 <HAL_GPIO_Init+0x238>)
 8005f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8006028 <HAL_GPIO_Init+0x238>)
 8005f70:	f043 0302 	orr.w	r3, r3, #2
 8005f74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005f78:	4b2b      	ldr	r3, [pc, #172]	@ (8006028 <HAL_GPIO_Init+0x238>)
 8005f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f86:	4a29      	ldr	r2, [pc, #164]	@ (800602c <HAL_GPIO_Init+0x23c>)
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	089b      	lsrs	r3, r3, #2
 8005f8c:	3302      	adds	r3, #2
 8005f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	220f      	movs	r2, #15
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a20      	ldr	r2, [pc, #128]	@ (8006030 <HAL_GPIO_Init+0x240>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d052      	beq.n	8006058 <HAL_GPIO_Init+0x268>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8006034 <HAL_GPIO_Init+0x244>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d031      	beq.n	800601e <HAL_GPIO_Init+0x22e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8006038 <HAL_GPIO_Init+0x248>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d02b      	beq.n	800601a <HAL_GPIO_Init+0x22a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800603c <HAL_GPIO_Init+0x24c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d025      	beq.n	8006016 <HAL_GPIO_Init+0x226>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8006040 <HAL_GPIO_Init+0x250>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d01f      	beq.n	8006012 <HAL_GPIO_Init+0x222>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8006044 <HAL_GPIO_Init+0x254>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d019      	beq.n	800600e <HAL_GPIO_Init+0x21e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8006048 <HAL_GPIO_Init+0x258>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <HAL_GPIO_Init+0x21a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a19      	ldr	r2, [pc, #100]	@ (800604c <HAL_GPIO_Init+0x25c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00d      	beq.n	8006006 <HAL_GPIO_Init+0x216>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a18      	ldr	r2, [pc, #96]	@ (8006050 <HAL_GPIO_Init+0x260>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d007      	beq.n	8006002 <HAL_GPIO_Init+0x212>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a17      	ldr	r2, [pc, #92]	@ (8006054 <HAL_GPIO_Init+0x264>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d101      	bne.n	8005ffe <HAL_GPIO_Init+0x20e>
 8005ffa:	2309      	movs	r3, #9
 8005ffc:	e02d      	b.n	800605a <HAL_GPIO_Init+0x26a>
 8005ffe:	230a      	movs	r3, #10
 8006000:	e02b      	b.n	800605a <HAL_GPIO_Init+0x26a>
 8006002:	2308      	movs	r3, #8
 8006004:	e029      	b.n	800605a <HAL_GPIO_Init+0x26a>
 8006006:	2307      	movs	r3, #7
 8006008:	e027      	b.n	800605a <HAL_GPIO_Init+0x26a>
 800600a:	2306      	movs	r3, #6
 800600c:	e025      	b.n	800605a <HAL_GPIO_Init+0x26a>
 800600e:	2305      	movs	r3, #5
 8006010:	e023      	b.n	800605a <HAL_GPIO_Init+0x26a>
 8006012:	2304      	movs	r3, #4
 8006014:	e021      	b.n	800605a <HAL_GPIO_Init+0x26a>
 8006016:	2303      	movs	r3, #3
 8006018:	e01f      	b.n	800605a <HAL_GPIO_Init+0x26a>
 800601a:	2302      	movs	r3, #2
 800601c:	e01d      	b.n	800605a <HAL_GPIO_Init+0x26a>
 800601e:	2301      	movs	r3, #1
 8006020:	e01b      	b.n	800605a <HAL_GPIO_Init+0x26a>
 8006022:	bf00      	nop
 8006024:	58000080 	.word	0x58000080
 8006028:	58024400 	.word	0x58024400
 800602c:	58000400 	.word	0x58000400
 8006030:	58020000 	.word	0x58020000
 8006034:	58020400 	.word	0x58020400
 8006038:	58020800 	.word	0x58020800
 800603c:	58020c00 	.word	0x58020c00
 8006040:	58021000 	.word	0x58021000
 8006044:	58021400 	.word	0x58021400
 8006048:	58021800 	.word	0x58021800
 800604c:	58021c00 	.word	0x58021c00
 8006050:	58022000 	.word	0x58022000
 8006054:	58022400 	.word	0x58022400
 8006058:	2300      	movs	r3, #0
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	f002 0203 	and.w	r2, r2, #3
 8006060:	0092      	lsls	r2, r2, #2
 8006062:	4093      	lsls	r3, r2
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	4313      	orrs	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800606a:	4938      	ldr	r1, [pc, #224]	@ (800614c <HAL_GPIO_Init+0x35c>)
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	089b      	lsrs	r3, r3, #2
 8006070:	3302      	adds	r3, #2
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	43db      	mvns	r3, r3
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4013      	ands	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4313      	orrs	r3, r2
 800609c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800609e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80060a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4013      	ands	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80060cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	43db      	mvns	r3, r3
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	4013      	ands	r3, r2
 80060e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d003      	beq.n	80060f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	43db      	mvns	r3, r3
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	4013      	ands	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	3301      	adds	r3, #1
 800612c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	f47f ae63 	bne.w	8005e04 <HAL_GPIO_Init+0x14>
  }
}
 800613e:	bf00      	nop
 8006140:	bf00      	nop
 8006142:	3724      	adds	r7, #36	@ 0x24
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	58000400 	.word	0x58000400

08006150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	887b      	ldrh	r3, [r7, #2]
 8006162:	4013      	ands	r3, r2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006168:	2301      	movs	r3, #1
 800616a:	73fb      	strb	r3, [r7, #15]
 800616c:	e001      	b.n	8006172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800616e:	2300      	movs	r3, #0
 8006170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006172:	7bfb      	ldrb	r3, [r7, #15]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	807b      	strh	r3, [r7, #2]
 800618c:	4613      	mov	r3, r2
 800618e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006190:	787b      	ldrb	r3, [r7, #1]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006196:	887a      	ldrh	r2, [r7, #2]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800619c:	e003      	b.n	80061a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800619e:	887b      	ldrh	r3, [r7, #2]
 80061a0:	041a      	lsls	r2, r3, #16
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	619a      	str	r2, [r3, #24]
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	460b      	mov	r3, r1
 80061bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80061c4:	887a      	ldrh	r2, [r7, #2]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4013      	ands	r3, r2
 80061ca:	041a      	lsls	r2, r3, #16
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	43d9      	mvns	r1, r3
 80061d0:	887b      	ldrh	r3, [r7, #2]
 80061d2:	400b      	ands	r3, r1
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	619a      	str	r2, [r3, #24]
}
 80061da:	bf00      	nop
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e0bd      	b.n	8006376 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d031      	beq.n	80062a2 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a4f      	ldr	r2, [pc, #316]	@ (8006380 <HAL_HRTIM_Init+0x198>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d10e      	bne.n	8006266 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8006248:	4b4e      	ldr	r3, [pc, #312]	@ (8006384 <HAL_HRTIM_Init+0x19c>)
 800624a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800624e:	4a4d      	ldr	r2, [pc, #308]	@ (8006384 <HAL_HRTIM_Init+0x19c>)
 8006250:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006254:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006258:	4b4a      	ldr	r3, [pc, #296]	@ (8006384 <HAL_HRTIM_Init+0x19c>)
 800625a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800625e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006274:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800628a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7fe fbe0 	bl	8004a68 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d012      	beq.n	80062da <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062c2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80062ea:	2300      	movs	r3, #0
 80062ec:	75fb      	strb	r3, [r7, #23]
 80062ee:	e03e      	b.n	800636e <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80062f0:	7dfa      	ldrb	r2, [r7, #23]
 80062f2:	6879      	ldr	r1, [r7, #4]
 80062f4:	4613      	mov	r3, r2
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	1a9b      	subs	r3, r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	440b      	add	r3, r1
 80062fe:	3318      	adds	r3, #24
 8006300:	2200      	movs	r2, #0
 8006302:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8006304:	7dfa      	ldrb	r2, [r7, #23]
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	4613      	mov	r3, r2
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	440b      	add	r3, r1
 8006312:	331c      	adds	r3, #28
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8006318:	7dfa      	ldrb	r2, [r7, #23]
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	4613      	mov	r3, r2
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	3320      	adds	r3, #32
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800632c:	7dfa      	ldrb	r2, [r7, #23]
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	4613      	mov	r3, r2
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	1a9b      	subs	r3, r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	3324      	adds	r3, #36	@ 0x24
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8006340:	7dfa      	ldrb	r2, [r7, #23]
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	4613      	mov	r3, r2
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	1a9b      	subs	r3, r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	3328      	adds	r3, #40	@ 0x28
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8006354:	7dfa      	ldrb	r2, [r7, #23]
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	4613      	mov	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	1a9b      	subs	r3, r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	3330      	adds	r3, #48	@ 0x30
 8006364:	2200      	movs	r2, #0
 8006366:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8006368:	7dfb      	ldrb	r3, [r7, #23]
 800636a:	3301      	adds	r3, #1
 800636c:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 800636e:	7dfb      	ldrb	r3, [r7, #23]
 8006370:	2b05      	cmp	r3, #5
 8006372:	d9bd      	bls.n	80062f0 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	40017400 	.word	0x40017400
 8006384:	58024400 	.word	0x58024400

08006388 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d101      	bne.n	80063a4 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 80063a0:	2302      	movs	r3, #2
 80063a2:	e015      	b.n	80063d0 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b05      	cmp	r3, #5
 80063b0:	d104      	bne.n	80063bc <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 fae0 	bl	800697a <HRTIM_MasterBase_Config>
 80063ba:	e004      	b.n	80063c6 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 fb09 	bl	80069d8 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <HAL_HRTIM_EventConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventConfig(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t Event,
                                        const HRTIM_EventCfgTypeDef *pEventCfg)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_EVENTPOLARITY(pEventCfg->Sensitivity, pEventCfg->Polarity));
  assert_param(IS_HRTIM_EVENTSENSITIVITY(pEventCfg->Sensitivity));
  assert_param(IS_HRTIM_EVENTFASTMODE(Event, pEventCfg->FastMode));
  assert_param(IS_HRTIM_EVENTFILTER(Event, pEventCfg->Filter));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d101      	bne.n	80063f4 <HAL_HRTIM_EventConfig+0x1c>
  {
    return HAL_BUSY;
 80063f0:	2302      	movs	r3, #2
 80063f2:	e01c      	b.n	800642e <HAL_HRTIM_EventConfig+0x56>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_HRTIM_EventConfig+0x2a>
 80063fe:	2302      	movs	r3, #2
 8006400:	e015      	b.n	800642e <HAL_HRTIM_EventConfig+0x56>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2202      	movs	r2, #2
 800640e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the event channel */
  HRTIM_EventConfig(hhrtim, Event, pEventCfg);
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fd9c 	bl	8006f54 <HRTIM_EventConfig>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_HRTIM_EventPrescalerConfig>:
  * @note This function must be called before starting the timer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_EventPrescalerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t Prescaler)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_EVENTPRESCALER(Prescaler));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d101      	bne.n	8006450 <HAL_HRTIM_EventPrescalerConfig+0x1a>
  {
    return HAL_BUSY;
 800644c:	2302      	movs	r3, #2
 800644e:	e025      	b.n	800649c <HAL_HRTIM_EventPrescalerConfig+0x66>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <HAL_HRTIM_EventPrescalerConfig+0x28>
 800645a:	2302      	movs	r3, #2
 800645c:	e01e      	b.n	800649c <HAL_HRTIM_EventPrescalerConfig+0x66>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2202      	movs	r2, #2
 800646a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Set the external event prescaler */
  MODIFY_REG(hhrtim->Instance->sCommonRegs.EECR3, HRTIM_EECR3_EEVSD, (Prescaler & HRTIM_EECR3_EEVSD));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8006476:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d101      	bne.n	80064c4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 80064c0:	2302      	movs	r3, #2
 80064c2:	e05f      	b.n	8006584 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e058      	b.n	8006584 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2202      	movs	r2, #2
 80064de:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b05      	cmp	r3, #5
 80064e6:	d104      	bne.n	80064f2 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 fab4 	bl	8006a58 <HRTIM_MasterWaveform_Config>
 80064f0:	e004      	b.n	80064fc <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	68b9      	ldr	r1, [r7, #8]
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 fb14 	bl	8006b24 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6819      	ldr	r1, [r3, #0]
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	4613      	mov	r3, r2
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4403      	add	r3, r0
 800650e:	3320      	adds	r3, #32
 8006510:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6859      	ldr	r1, [r3, #4]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4403      	add	r3, r0
 8006524:	3324      	adds	r3, #36	@ 0x24
 8006526:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6899      	ldr	r1, [r3, #8]
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	4613      	mov	r3, r2
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4403      	add	r3, r0
 800653a:	3328      	adds	r3, #40	@ 0x28
 800653c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68d9      	ldr	r1, [r3, #12]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	4613      	mov	r3, r2
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	1a9b      	subs	r3, r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4403      	add	r3, r0
 8006550:	332c      	adds	r3, #44	@ 0x2c
 8006552:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6919      	ldr	r1, [r3, #16]
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	4613      	mov	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	1a9b      	subs	r3, r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4403      	add	r3, r0
 8006566:	3330      	adds	r3, #48	@ 0x30
 8006568:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 ff19 	bl	80073a4 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef *pCompareCfg)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
 8006598:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d101      	bne.n	80065aa <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
    return HAL_BUSY;
 80065a6:	2302      	movs	r3, #2
 80065a8:	e157      	b.n	800685a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e150      	b.n	800685a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d140      	bne.n	8006650 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	2b07      	cmp	r3, #7
 80065d4:	d82a      	bhi.n	800662c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80065d6:	a201      	add	r2, pc, #4	@ (adr r2, 80065dc <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80065d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065dc:	080065fd 	.word	0x080065fd
 80065e0:	08006609 	.word	0x08006609
 80065e4:	0800662d 	.word	0x0800662d
 80065e8:	08006615 	.word	0x08006615
 80065ec:	0800662d 	.word	0x0800662d
 80065f0:	0800662d 	.word	0x0800662d
 80065f4:	0800662d 	.word	0x0800662d
 80065f8:	08006621 	.word	0x08006621
    {
      case HRTIM_COMPAREUNIT_1:
      {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	6812      	ldr	r2, [r2, #0]
 8006604:	61da      	str	r2, [r3, #28]
        break;
 8006606:	e01a      	b.n	800663e <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_2:
      {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8006612:	e014      	b.n	800663e <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	6812      	ldr	r2, [r2, #0]
 800661c:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 800661e:	e00e      	b.n	800663e <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_4:
      {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	6812      	ldr	r2, [r2, #0]
 8006628:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800662a:	e008      	b.n	800663e <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2207      	movs	r2, #7
 8006630:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 800663c:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b07      	cmp	r3, #7
 8006648:	f040 80fe 	bne.w	8006848 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e104      	b.n	800685a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3b01      	subs	r3, #1
 8006654:	2b07      	cmp	r3, #7
 8006656:	f200 80e3 	bhi.w	8006820 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800665a:	a201      	add	r2, pc, #4	@ (adr r2, 8006660 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 800665c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006660:	08006681 	.word	0x08006681
 8006664:	08006695 	.word	0x08006695
 8006668:	08006821 	.word	0x08006821
 800666c:	08006751 	.word	0x08006751
 8006670:	08006821 	.word	0x08006821
 8006674:	08006821 	.word	0x08006821
 8006678:	08006821 	.word	0x08006821
 800667c:	08006765 	.word	0x08006765
    {
      case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	01db      	lsls	r3, r3, #7
 800668c:	440b      	add	r3, r1
 800668e:	339c      	adds	r3, #156	@ 0x9c
 8006690:	601a      	str	r2, [r3, #0]
        break;
 8006692:	e0d1      	b.n	8006838 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6819      	ldr	r1, [r3, #0]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	01db      	lsls	r3, r3, #7
 80066a0:	440b      	add	r3, r1
 80066a2:	33a4      	adds	r3, #164	@ 0xa4
 80066a4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d03f      	beq.n	800672e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	3301      	adds	r3, #1
 80066b6:	01db      	lsls	r3, r3, #7
 80066b8:	4413      	add	r3, r2
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	6811      	ldr	r1, [r2, #0]
 80066c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	3301      	adds	r3, #1
 80066c8:	01db      	lsls	r3, r3, #7
 80066ca:	440b      	add	r3, r1
 80066cc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	3301      	adds	r3, #1
 80066d6:	01db      	lsls	r3, r3, #7
 80066d8:	4413      	add	r3, r2
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	68f9      	ldr	r1, [r7, #12]
 80066e2:	6809      	ldr	r1, [r1, #0]
 80066e4:	431a      	orrs	r2, r3
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	3301      	adds	r3, #1
 80066ea:	01db      	lsls	r3, r3, #7
 80066ec:	440b      	add	r3, r1
 80066ee:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f8:	d109      	bne.n	800670e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6819      	ldr	r1, [r3, #0]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	689a      	ldr	r2, [r3, #8]
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	01db      	lsls	r3, r3, #7
 8006706:	440b      	add	r3, r1
 8006708:	339c      	adds	r3, #156	@ 0x9c
 800670a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
        break;
 800670c:	e091      	b.n	8006832 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006716:	f040 808c 	bne.w	8006832 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6819      	ldr	r1, [r3, #0]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	01db      	lsls	r3, r3, #7
 8006726:	440b      	add	r3, r1
 8006728:	33a8      	adds	r3, #168	@ 0xa8
 800672a:	601a      	str	r2, [r3, #0]
        break;
 800672c:	e081      	b.n	8006832 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	3301      	adds	r3, #1
 8006736:	01db      	lsls	r3, r3, #7
 8006738:	4413      	add	r3, r2
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	6811      	ldr	r1, [r2, #0]
 8006740:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	3301      	adds	r3, #1
 8006748:	01db      	lsls	r3, r3, #7
 800674a:	440b      	add	r3, r1
 800674c:	601a      	str	r2, [r3, #0]
        break;
 800674e:	e070      	b.n	8006832 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6819      	ldr	r1, [r3, #0]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	01db      	lsls	r3, r3, #7
 800675c:	440b      	add	r3, r1
 800675e:	33a8      	adds	r3, #168	@ 0xa8
 8006760:	601a      	str	r2, [r3, #0]
        break;
 8006762:	e069      	b.n	8006838 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6819      	ldr	r1, [r3, #0]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	01db      	lsls	r3, r3, #7
 8006770:	440b      	add	r3, r1
 8006772:	33ac      	adds	r3, #172	@ 0xac
 8006774:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d03f      	beq.n	80067fe <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	3301      	adds	r3, #1
 8006786:	01db      	lsls	r3, r3, #7
 8006788:	4413      	add	r3, r2
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	6811      	ldr	r1, [r2, #0]
 8006790:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	3301      	adds	r3, #1
 8006798:	01db      	lsls	r3, r3, #7
 800679a:	440b      	add	r3, r1
 800679c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	3301      	adds	r3, #1
 80067a6:	01db      	lsls	r3, r3, #7
 80067a8:	4413      	add	r3, r2
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	68f9      	ldr	r1, [r7, #12]
 80067b4:	6809      	ldr	r1, [r1, #0]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	3301      	adds	r3, #1
 80067bc:	01db      	lsls	r3, r3, #7
 80067be:	440b      	add	r3, r1
 80067c0:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067ca:	d109      	bne.n	80067e0 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6819      	ldr	r1, [r3, #0]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	01db      	lsls	r3, r3, #7
 80067d8:	440b      	add	r3, r1
 80067da:	339c      	adds	r3, #156	@ 0x9c
 80067dc:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
        break;
 80067de:	e02a      	b.n	8006836 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80067e8:	d125      	bne.n	8006836 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6819      	ldr	r1, [r3, #0]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	01db      	lsls	r3, r3, #7
 80067f6:	440b      	add	r3, r1
 80067f8:	33a8      	adds	r3, #168	@ 0xa8
 80067fa:	601a      	str	r2, [r3, #0]
        break;
 80067fc:	e01b      	b.n	8006836 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	3301      	adds	r3, #1
 8006806:	01db      	lsls	r3, r3, #7
 8006808:	4413      	add	r3, r2
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	6811      	ldr	r1, [r2, #0]
 8006810:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	3301      	adds	r3, #1
 8006818:	01db      	lsls	r3, r3, #7
 800681a:	440b      	add	r3, r1
 800681c:	601a      	str	r2, [r3, #0]
        break;
 800681e:	e00a      	b.n	8006836 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2207      	movs	r2, #7
 8006824:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

        break;
 8006830:	e002      	b.n	8006838 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 8006836:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b07      	cmp	r3, #7
 8006842:	d101      	bne.n	8006848 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e008      	b.n	800685a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop

08006868 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
 8006874:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f893 30c1 	ldrb.w	r3, [r3, #193]	@ 0xc1
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d101      	bne.n	8006886 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 8006882:	2302      	movs	r3, #2
 8006884:	e01d      	b.n	80068c2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8006890:	2302      	movs	r3, #2
 8006892:	e016      	b.n	80068c2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 fa7a 	bl	8006da4 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t OutputsToStart)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b083      	sub	sp, #12
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_HRTIM_WaveformOutputStart+0x18>
 80068de:	2302      	movs	r3, #2
 80068e0:	e01a      	b.n	8006918 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2202      	movs	r2, #2
 80068ee:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef *hhrtim,
                                               uint32_t Timers)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_HRTIM_WaveformCountStart+0x18>
 8006938:	2302      	movs	r3, #2
 800693a:	e018      	b.n	800696e <HAL_HRTIM_WaveformCountStart+0x4a>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6819      	ldr	r1, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	370c      	adds	r7, #12
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 800697a:	b480      	push	{r7}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0307 	bic.w	r3, r3, #7
 8006992:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f023 0318 	bic.w	r3, r3, #24
 80069a4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	6852      	ldr	r2, [r2, #4]
 80069ca:	619a      	str	r2, [r3, #24]
}
 80069cc:	bf00      	nop
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	3301      	adds	r3, #1
 80069ec:	01db      	lsls	r3, r3, #7
 80069ee:	4413      	add	r3, r2
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f023 0307 	bic.w	r3, r3, #7
 80069fa:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f023 0318 	bic.w	r3, r3, #24
 8006a0c:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	01db      	lsls	r3, r3, #7
 8006a22:	4413      	add	r3, r2
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6819      	ldr	r1, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	01db      	lsls	r3, r3, #7
 8006a34:	440b      	add	r3, r1
 8006a36:	3394      	adds	r3, #148	@ 0x94
 8006a38:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6819      	ldr	r1, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	01db      	lsls	r3, r3, #7
 8006a46:	440b      	add	r3, r1
 8006a48:	3398      	adds	r3, #152	@ 0x98
 8006a4a:	601a      	str	r2, [r3, #0]
}
 8006a4c:	bf00      	nop
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8006a72:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0320 	bic.w	r3, r3, #32
 8006a7a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a8c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a9e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006ab0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8006ac2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006ad4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ae8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006afa:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8006b18:	bf00      	nop
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b08b      	sub	sp, #44	@ 0x2c
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	3301      	adds	r3, #1
 8006b38:	01db      	lsls	r3, r3, #7
 8006b3a:	4413      	add	r3, r2
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	6811      	ldr	r1, [r2, #0]
 8006b42:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	01db      	lsls	r3, r3, #7
 8006b4c:	440b      	add	r3, r1
 8006b4e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	3301      	adds	r3, #1
 8006b58:	01db      	lsls	r3, r3, #7
 8006b5a:	4413      	add	r3, r2
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	01db      	lsls	r3, r3, #7
 8006b68:	4413      	add	r3, r2
 8006b6a:	33e8      	adds	r3, #232	@ 0xe8
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	01db      	lsls	r3, r3, #7
 8006b78:	4413      	add	r3, r2
 8006b7a:	33e4      	adds	r3, #228	@ 0xe4
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8006b88:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8c:	f023 0320 	bic.w	r3, r3, #32
 8006b90:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006baa:	4313      	orrs	r3, r2
 8006bac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd4:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8006bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be0:	4313      	orrs	r3, r2
 8006be2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8006be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006bea:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c06:	d103      	bne.n	8006c10 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8006c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c16:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c28:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c30:	4313      	orrs	r3, r2
 8006c32:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8006c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c36:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8006c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c42:	4313      	orrs	r3, r2
 8006c44:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	f023 031f 	bic.w	r3, r3, #31
 8006c4c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c52:	f003 031f 	and.w	r3, r3, #31
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c62:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d108      	bne.n	8006c88 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c7c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c82:	6a3a      	ldr	r2, [r7, #32]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c8c:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8006c90:	d004      	beq.n	8006c9c <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c96:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8006c9a:	d103      	bne.n	8006ca4 <HRTIM_TimingUnitWaveform_Config+0x180>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ca0:	2b40      	cmp	r3, #64	@ 0x40
 8006ca2:	d108      	bne.n	8006cb6 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 8006caa:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cb0:	6a3a      	ldr	r2, [r7, #32]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cba:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	d843      	bhi.n	8006d4a <HRTIM_TimingUnitWaveform_Config+0x226>
 8006cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc8 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006cdd 	.word	0x08006cdd
 8006ccc:	08006cf3 	.word	0x08006cf3
 8006cd0:	08006d09 	.word	0x08006d09
 8006cd4:	08006d1f 	.word	0x08006d1f
 8006cd8:	08006d35 	.word	0x08006d35
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ce2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	61fb      	str	r3, [r7, #28]
      break;
 8006cf0:	e02c      	b.n	8006d4c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cf8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	61fb      	str	r3, [r7, #28]
      break;
 8006d06:	e021      	b.n	8006d4c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006d0e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	69fa      	ldr	r2, [r7, #28]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	61fb      	str	r3, [r7, #28]
      break;
 8006d1c:	e016      	b.n	8006d4c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006d24:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	61fb      	str	r3, [r7, #28]
      break;
 8006d32:	e00b      	b.n	8006d4c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d3a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d40:	015b      	lsls	r3, r3, #5
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	61fb      	str	r3, [r7, #28]
      break;
 8006d48:	e000      	b.n	8006d4c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

    default:
      break;
 8006d4a:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	3301      	adds	r3, #1
 8006d54:	01db      	lsls	r3, r3, #7
 8006d56:	4413      	add	r3, r2
 8006d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d5a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	01db      	lsls	r3, r3, #7
 8006d64:	4413      	add	r3, r2
 8006d66:	33e8      	adds	r3, #232	@ 0xe8
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	01db      	lsls	r3, r3, #7
 8006d74:	4413      	add	r3, r2
 8006d76:	33e4      	adds	r3, #228	@ 0xe4
 8006d78:	6a3a      	ldr	r2, [r7, #32]
 8006d7a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	01db      	lsls	r3, r3, #7
 8006d84:	4413      	add	r3, r2
 8006d86:	33d4      	adds	r3, #212	@ 0xd4
 8006d88:	697a      	ldr	r2, [r7, #20]
 8006d8a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 8006d96:	bf00      	nop
 8006d98:	372c      	adds	r7, #44	@ 0x2c
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop

08006da4 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b089      	sub	sp, #36	@ 0x24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	01db      	lsls	r3, r3, #7
 8006dbe:	4413      	add	r3, r2
 8006dc0:	33e4      	adds	r3, #228	@ 0xe4
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	01db      	lsls	r3, r3, #7
 8006dce:	4413      	add	r3, r2
 8006dd0:	33b8      	adds	r3, #184	@ 0xb8
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	617b      	str	r3, [r7, #20]

  switch (Output)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ddc:	d04d      	beq.n	8006e7a <HRTIM_OutputConfig+0xd6>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006de4:	d85e      	bhi.n	8006ea4 <HRTIM_OutputConfig+0x100>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dec:	d032      	beq.n	8006e54 <HRTIM_OutputConfig+0xb0>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006df4:	d856      	bhi.n	8006ea4 <HRTIM_OutputConfig+0x100>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b80      	cmp	r3, #128	@ 0x80
 8006dfa:	d03e      	beq.n	8006e7a <HRTIM_OutputConfig+0xd6>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b80      	cmp	r3, #128	@ 0x80
 8006e00:	d850      	bhi.n	8006ea4 <HRTIM_OutputConfig+0x100>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b40      	cmp	r3, #64	@ 0x40
 8006e06:	d025      	beq.n	8006e54 <HRTIM_OutputConfig+0xb0>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b40      	cmp	r3, #64	@ 0x40
 8006e0c:	d84a      	bhi.n	8006ea4 <HRTIM_OutputConfig+0x100>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d01f      	beq.n	8006e54 <HRTIM_OutputConfig+0xb0>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d044      	beq.n	8006ea4 <HRTIM_OutputConfig+0x100>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d841      	bhi.n	8006ea4 <HRTIM_OutputConfig+0x100>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d33e      	bcc.n	8006ea4 <HRTIM_OutputConfig+0x100>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	3b02      	subs	r3, #2
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	409a      	lsls	r2, r3
 8006e2e:	4b48      	ldr	r3, [pc, #288]	@ (8006f50 <HRTIM_OutputConfig+0x1ac>)
 8006e30:	4013      	ands	r3, r2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	bf14      	ite	ne
 8006e36:	2301      	movne	r3, #1
 8006e38:	2300      	moveq	r3, #0
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d11c      	bne.n	8006e7a <HRTIM_OutputConfig+0xd6>
 8006e40:	f244 0304 	movw	r3, #16388	@ 0x4004
 8006e44:	4013      	ands	r3, r2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	bf14      	ite	ne
 8006e4a:	2301      	movne	r3, #1
 8006e4c:	2300      	moveq	r3, #0
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d027      	beq.n	8006ea4 <HRTIM_OutputConfig+0x100>
    case HRTIM_OUTPUT_TC1:
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6819      	ldr	r1, [r3, #0]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	01db      	lsls	r3, r3, #7
 8006e60:	440b      	add	r3, r1
 8006e62:	33bc      	adds	r3, #188	@ 0xbc
 8006e64:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6819      	ldr	r1, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	01db      	lsls	r3, r3, #7
 8006e72:	440b      	add	r3, r1
 8006e74:	33c0      	adds	r3, #192	@ 0xc0
 8006e76:	601a      	str	r2, [r3, #0]
      break;
 8006e78:	e015      	b.n	8006ea6 <HRTIM_OutputConfig+0x102>
    case HRTIM_OUTPUT_TC2:
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6819      	ldr	r1, [r3, #0]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	01db      	lsls	r3, r3, #7
 8006e86:	440b      	add	r3, r1
 8006e88:	33c4      	adds	r3, #196	@ 0xc4
 8006e8a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6819      	ldr	r1, [r3, #0]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	01db      	lsls	r3, r3, #7
 8006e98:	440b      	add	r3, r1
 8006e9a:	33c8      	adds	r3, #200	@ 0xc8
 8006e9c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8006e9e:	2310      	movs	r3, #16
 8006ea0:	61bb      	str	r3, [r7, #24]
      break;
 8006ea2:	e000      	b.n	8006ea6 <HRTIM_OutputConfig+0x102>
    }

    default:
      break;
 8006ea4:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8006ea6:	22fe      	movs	r2, #254	@ 0xfe
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8006eae:	43db      	mvns	r3, r3
 8006eb0:	69fa      	ldr	r2, [r7, #28]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec0:	69fa      	ldr	r2, [r7, #28]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed0:	69fa      	ldr	r2, [r7, #28]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	691a      	ldr	r2, [r3, #16]
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	695a      	ldr	r2, [r3, #20]
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef0:	69fa      	ldr	r2, [r7, #28]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	fa02 f303 	lsl.w	r3, r2, r3
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	2b08      	cmp	r3, #8
 8006f0c:	d111      	bne.n	8006f32 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10c      	bne.n	8006f32 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d107      	bne.n	8006f32 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	69da      	ldr	r2, [r3, #28]
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	01db      	lsls	r3, r3, #7
 8006f3a:	4413      	add	r3, r2
 8006f3c:	33e4      	adds	r3, #228	@ 0xe4
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	601a      	str	r2, [r3, #0]
}
 8006f42:	bf00      	nop
 8006f44:	3724      	adds	r7, #36	@ 0x24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40000041 	.word	0x40000041

08006f54 <HRTIM_EventConfig>:
  * @retval None
  */
static void HRTIM_EventConfig(HRTIM_HandleTypeDef *hhrtim,
                              uint32_t Event,
                              const HRTIM_EventCfgTypeDef *pEventCfg)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b089      	sub	sp, #36	@ 0x24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_eecr1;
  uint32_t hrtim_eecr2;
  uint32_t hrtim_eecr3;

  /* Configure external event channel */
  hrtim_eecr1 = hhrtim->Instance->sCommonRegs.EECR1;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 8006f68:	61fb      	str	r3, [r7, #28]
  hrtim_eecr2 = hhrtim->Instance->sCommonRegs.EECR2;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 8006f72:	61bb      	str	r3, [r7, #24]
  hrtim_eecr3 = hhrtim->Instance->sCommonRegs.EECR3;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f8d3 33b8 	ldr.w	r3, [r3, #952]	@ 0x3b8
 8006f7c:	617b      	str	r3, [r7, #20]

  switch (Event)
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2b0a      	cmp	r3, #10
 8006f82:	f200 8208 	bhi.w	8007396 <HRTIM_EventConfig+0x442>
 8006f86:	a201      	add	r2, pc, #4	@ (adr r2, 8006f8c <HRTIM_EventConfig+0x38>)
 8006f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8c:	08006fb9 	.word	0x08006fb9
 8006f90:	08006fd9 	.word	0x08006fd9
 8006f94:	0800702f 	.word	0x0800702f
 8006f98:	0800708b 	.word	0x0800708b
 8006f9c:	080070e9 	.word	0x080070e9
 8006fa0:	08007147 	.word	0x08007147
 8006fa4:	080071a5 	.word	0x080071a5
 8006fa8:	08007203 	.word	0x08007203
 8006fac:	08007267 	.word	0x08007267
 8006fb0:	080072cb 	.word	0x080072cb
 8006fb4:	08007331 	.word	0x08007331
  {
    case HRTIM_EVENT_NONE:
    {
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR1 = 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      hhrtim->Instance->sCommonRegs.EECR2 = 0U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = 0U;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8006fd6:	e1df      	b.n	8007398 <HRTIM_EventConfig+0x444>
    }

    case HRTIM_EVENT_1:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE1SRC | HRTIM_EECR1_EE1POL | HRTIM_EECR1_EE1SNS | HRTIM_EECR1_EE1FAST);
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006fde:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Source & HRTIM_EECR1_EE1SRC);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	69fa      	ldr	r2, [r7, #28]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Polarity & HRTIM_EECR1_EE1POL);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f003 0304 	and.w	r3, r3, #4
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= (pEventCfg->Sensitivity & HRTIM_EECR1_EE1SNS);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f003 0318 	and.w	r3, r3, #24
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	4313      	orrs	r3, r2
 8007008:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE1FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69fa      	ldr	r2, [r7, #28]
 8007010:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE1FAST bit) */
      hrtim_eecr1 |= (pEventCfg->FastMode  & HRTIM_EECR1_EE1FAST);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	4313      	orrs	r3, r2
 8007020:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 800702c:	e1b4      	b.n	8007398 <HRTIM_EventConfig+0x444>
    }

    case HRTIM_EVENT_2:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE2SRC | HRTIM_EECR1_EE2POL | HRTIM_EECR1_EE2SNS | HRTIM_EECR1_EE2FAST);
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	f423 637c 	bic.w	r3, r3, #4032	@ 0xfc0
 8007034:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 6U) & HRTIM_EECR1_EE2SRC);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	019b      	lsls	r3, r3, #6
 800703c:	b2db      	uxtb	r3, r3
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	4313      	orrs	r3, r2
 8007042:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR1_EE2POL);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	019b      	lsls	r3, r3, #6
 800704a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800704e:	69fa      	ldr	r2, [r7, #28]
 8007050:	4313      	orrs	r3, r2
 8007052:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR1_EE2SNS);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	019b      	lsls	r3, r3, #6
 800705a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	4313      	orrs	r3, r2
 8007062:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE2FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	69fa      	ldr	r2, [r7, #28]
 800706a:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE2FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 6U) & HRTIM_EECR1_EE2FAST);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	019b      	lsls	r3, r3, #6
 8007074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007078:	69fa      	ldr	r2, [r7, #28]
 800707a:	4313      	orrs	r3, r2
 800707c:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8007088:	e186      	b.n	8007398 <HRTIM_EventConfig+0x444>
    }

    case HRTIM_EVENT_3:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE3SRC | HRTIM_EECR1_EE3POL | HRTIM_EECR1_EE3SNS | HRTIM_EECR1_EE3FAST);
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007090:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 12U) & HRTIM_EECR1_EE3SRC);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	031b      	lsls	r3, r3, #12
 8007098:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800709c:	69fa      	ldr	r2, [r7, #28]
 800709e:	4313      	orrs	r3, r2
 80070a0:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR1_EE3POL);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	031b      	lsls	r3, r3, #12
 80070a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070ac:	69fa      	ldr	r2, [r7, #28]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR1_EE3SNS);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	031b      	lsls	r3, r3, #12
 80070b8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80070bc:	69fa      	ldr	r2, [r7, #28]
 80070be:	4313      	orrs	r3, r2
 80070c0:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE3FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE3FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 12U) & HRTIM_EECR1_EE3FAST);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	031b      	lsls	r3, r3, #12
 80070d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d6:	69fa      	ldr	r2, [r7, #28]
 80070d8:	4313      	orrs	r3, r2
 80070da:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	69fa      	ldr	r2, [r7, #28]
 80070e2:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 80070e6:	e157      	b.n	8007398 <HRTIM_EventConfig+0x444>
    }

    case HRTIM_EVENT_4:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE4SRC | HRTIM_EECR1_EE4POL | HRTIM_EECR1_EE4SNS | HRTIM_EECR1_EE4FAST);
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	f423 037c 	bic.w	r3, r3, #16515072	@ 0xfc0000
 80070ee:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 18U) & HRTIM_EECR1_EE4SRC);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	049b      	lsls	r3, r3, #18
 80070f6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80070fa:	69fa      	ldr	r2, [r7, #28]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR1_EE4POL);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	049b      	lsls	r3, r3, #18
 8007106:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	4313      	orrs	r3, r2
 800710e:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR1_EE4SNS);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	049b      	lsls	r3, r3, #18
 8007116:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	4313      	orrs	r3, r2
 800711e:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE4FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	69fa      	ldr	r2, [r7, #28]
 8007126:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE4FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 18U) & HRTIM_EECR1_EE4FAST);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	049b      	lsls	r3, r3, #18
 8007130:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	4313      	orrs	r3, r2
 8007138:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 8007144:	e128      	b.n	8007398 <HRTIM_EventConfig+0x444>
    }

    case HRTIM_EVENT_5:
    {
      hrtim_eecr1 &= ~(HRTIM_EECR1_EE5SRC | HRTIM_EECR1_EE5POL | HRTIM_EECR1_EE5SNS | HRTIM_EECR1_EE5FAST);
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800714c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Source << 24U) & HRTIM_EECR1_EE5SRC);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	061b      	lsls	r3, r3, #24
 8007154:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	4313      	orrs	r3, r2
 800715c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR1_EE5POL);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	061b      	lsls	r3, r3, #24
 8007164:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007168:	69fa      	ldr	r2, [r7, #28]
 800716a:	4313      	orrs	r3, r2
 800716c:	61fb      	str	r3, [r7, #28]
      hrtim_eecr1 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR1_EE5SNS);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	061b      	lsls	r3, r3, #24
 8007174:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8007178:	69fa      	ldr	r2, [r7, #28]
 800717a:	4313      	orrs	r3, r2
 800717c:	61fb      	str	r3, [r7, #28]
      /* Update the HRTIM registers (all bitfields but EE5FAST bit) */
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69fa      	ldr	r2, [r7, #28]
 8007184:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      /* Update the HRTIM registers (EE5FAST bit) */
      hrtim_eecr1 |= ((pEventCfg->FastMode << 24U) & HRTIM_EECR1_EE5FAST);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	061b      	lsls	r3, r3, #24
 800718e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007192:	69fa      	ldr	r2, [r7, #28]
 8007194:	4313      	orrs	r3, r2
 8007196:	61fb      	str	r3, [r7, #28]
      hhrtim->Instance->sCommonRegs.EECR1 = hrtim_eecr1;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	69fa      	ldr	r2, [r7, #28]
 800719e:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
      break;
 80071a2:	e0f9      	b.n	8007398 <HRTIM_EventConfig+0x444>
    }

    case HRTIM_EVENT_6:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE6SRC | HRTIM_EECR2_EE6POL | HRTIM_EECR2_EE6SNS);
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	f023 031f 	bic.w	r3, r3, #31
 80071aa:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Source & HRTIM_EECR2_EE6SRC);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0303 	and.w	r3, r3, #3
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Polarity & HRTIM_EECR2_EE6POL);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= (pEventCfg->Sensitivity & HRTIM_EECR2_EE6SNS);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 0318 	and.w	r3, r3, #24
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE6F);
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f023 030f 	bic.w	r3, r3, #15
 80071dc:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= (pEventCfg->Filter & HRTIM_EECR3_EE6F);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8007200:	e0ca      	b.n	8007398 <HRTIM_EventConfig+0x444>
    }

    case HRTIM_EVENT_7:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE7SRC | HRTIM_EECR2_EE7POL | HRTIM_EECR2_EE7SNS);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	f423 63f8 	bic.w	r3, r3, #1984	@ 0x7c0
 8007208:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 6U) & HRTIM_EECR2_EE7SRC);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	019b      	lsls	r3, r3, #6
 8007210:	b2db      	uxtb	r3, r3
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	4313      	orrs	r3, r2
 8007216:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 6U) & HRTIM_EECR2_EE7POL);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	019b      	lsls	r3, r3, #6
 800721e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	4313      	orrs	r3, r2
 8007226:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 6U) & HRTIM_EECR2_EE7SNS);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	019b      	lsls	r3, r3, #6
 800722e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	4313      	orrs	r3, r2
 8007236:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE7F);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 800723e:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 6U) & HRTIM_EECR3_EE7F);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	019b      	lsls	r3, r3, #6
 8007246:	f403 7370 	and.w	r3, r3, #960	@ 0x3c0
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	4313      	orrs	r3, r2
 800724e:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8007264:	e098      	b.n	8007398 <HRTIM_EventConfig+0x444>
    }

    case HRTIM_EVENT_8:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE8SRC | HRTIM_EECR2_EE8POL | HRTIM_EECR2_EE8SNS);
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	f423 33f8 	bic.w	r3, r3, #126976	@ 0x1f000
 800726c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 12U) & HRTIM_EECR2_EE8SRC);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	031b      	lsls	r3, r3, #12
 8007274:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	4313      	orrs	r3, r2
 800727c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 12U) & HRTIM_EECR2_EE8POL);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	031b      	lsls	r3, r3, #12
 8007284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	4313      	orrs	r3, r2
 800728c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 12U) & HRTIM_EECR2_EE8SNS);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	031b      	lsls	r3, r3, #12
 8007294:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	4313      	orrs	r3, r2
 800729c:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE8F);
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072a4:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 12U) & HRTIM_EECR3_EE8F);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	031b      	lsls	r3, r3, #12
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 80072c8:	e066      	b.n	8007398 <HRTIM_EventConfig+0x444>
    }

    case HRTIM_EVENT_9:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE9SRC | HRTIM_EECR2_EE9POL | HRTIM_EECR2_EE9SNS);
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	f423 03f8 	bic.w	r3, r3, #8126464	@ 0x7c0000
 80072d0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 18U) & HRTIM_EECR2_EE9SRC);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	049b      	lsls	r3, r3, #18
 80072d8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	4313      	orrs	r3, r2
 80072e0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 18U) & HRTIM_EECR2_EE9POL);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	049b      	lsls	r3, r3, #18
 80072e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 18U) & HRTIM_EECR2_EE9SNS);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	049b      	lsls	r3, r3, #18
 80072f8:	f403 03c0 	and.w	r3, r3, #6291456	@ 0x600000
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	4313      	orrs	r3, r2
 8007300:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE9F);
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f423 1370 	bic.w	r3, r3, #3932160	@ 0x3c0000
 8007308:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 18U) & HRTIM_EECR3_EE9F);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	049b      	lsls	r3, r3, #18
 8007310:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 800732e:	e033      	b.n	8007398 <HRTIM_EventConfig+0x444>
    }

    case HRTIM_EVENT_10:
    {
      hrtim_eecr2 &= ~(HRTIM_EECR2_EE10SRC | HRTIM_EECR2_EE10POL | HRTIM_EECR2_EE10SNS);
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 8007336:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Source << 24U) & HRTIM_EECR2_EE10SRC);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	061b      	lsls	r3, r3, #24
 800733e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	4313      	orrs	r3, r2
 8007346:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Polarity << 24U) & HRTIM_EECR2_EE10POL);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	061b      	lsls	r3, r3, #24
 800734e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	4313      	orrs	r3, r2
 8007356:	61bb      	str	r3, [r7, #24]
      hrtim_eecr2 |= ((pEventCfg->Sensitivity << 24U) & HRTIM_EECR2_EE10SNS);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	061b      	lsls	r3, r3, #24
 800735e:	f003 53c0 	and.w	r3, r3, #402653184	@ 0x18000000
 8007362:	69ba      	ldr	r2, [r7, #24]
 8007364:	4313      	orrs	r3, r2
 8007366:	61bb      	str	r3, [r7, #24]
      hrtim_eecr3 &= ~(HRTIM_EECR3_EE10F);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800736e:	617b      	str	r3, [r7, #20]
      hrtim_eecr3 |= ((pEventCfg->Filter << 24U) & HRTIM_EECR3_EE10F);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	061b      	lsls	r3, r3, #24
 8007376:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	4313      	orrs	r3, r2
 800737e:	617b      	str	r3, [r7, #20]
      /* Update the HRTIM registers */
      hhrtim->Instance->sCommonRegs.EECR2 = hrtim_eecr2;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	69ba      	ldr	r2, [r7, #24]
 8007386:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
      hhrtim->Instance->sCommonRegs.EECR3 = hrtim_eecr3;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
      break;
 8007394:	e000      	b.n	8007398 <HRTIM_EventConfig+0x444>
    }

    default:
      break;
 8007396:	bf00      	nop
  }
}
 8007398:	bf00      	nop
 800739a:	3724      	adds	r7, #36	@ 0x24
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b05      	cmp	r3, #5
 80073b2:	d851      	bhi.n	8007458 <HRTIM_ForceRegistersUpdate+0xb4>
 80073b4:	a201      	add	r2, pc, #4	@ (adr r2, 80073bc <HRTIM_ForceRegistersUpdate+0x18>)
 80073b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ba:	bf00      	nop
 80073bc:	080073eb 	.word	0x080073eb
 80073c0:	08007401 	.word	0x08007401
 80073c4:	08007417 	.word	0x08007417
 80073c8:	0800742d 	.word	0x0800742d
 80073cc:	08007443 	.word	0x08007443
 80073d0:	080073d5 	.word	0x080073d5
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 0201 	orr.w	r2, r2, #1
 80073e4:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80073e8:	e037      	b.n	800745a <HRTIM_ForceRegistersUpdate+0xb6>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0202 	orr.w	r2, r2, #2
 80073fa:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80073fe:	e02c      	b.n	800745a <HRTIM_ForceRegistersUpdate+0xb6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f042 0204 	orr.w	r2, r2, #4
 8007410:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8007414:	e021      	b.n	800745a <HRTIM_ForceRegistersUpdate+0xb6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0208 	orr.w	r2, r2, #8
 8007426:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800742a:	e016      	b.n	800745a <HRTIM_ForceRegistersUpdate+0xb6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0210 	orr.w	r2, r2, #16
 800743c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8007440:	e00b      	b.n	800745a <HRTIM_ForceRegistersUpdate+0xb6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0220 	orr.w	r2, r2, #32
 8007452:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8007456:	e000      	b.n	800745a <HRTIM_ForceRegistersUpdate+0xb6>
    }

    default:
      break;
 8007458:	bf00      	nop
  }
}
 800745a:	bf00      	nop
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop

08007468 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007470:	4b19      	ldr	r3, [pc, #100]	@ (80074d8 <HAL_PWREx_ConfigSupply+0x70>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f003 0304 	and.w	r3, r3, #4
 8007478:	2b04      	cmp	r3, #4
 800747a:	d00a      	beq.n	8007492 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800747c:	4b16      	ldr	r3, [pc, #88]	@ (80074d8 <HAL_PWREx_ConfigSupply+0x70>)
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f003 0307 	and.w	r3, r3, #7
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	429a      	cmp	r2, r3
 8007488:	d001      	beq.n	800748e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e01f      	b.n	80074ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	e01d      	b.n	80074ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007492:	4b11      	ldr	r3, [pc, #68]	@ (80074d8 <HAL_PWREx_ConfigSupply+0x70>)
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f023 0207 	bic.w	r2, r3, #7
 800749a:	490f      	ldr	r1, [pc, #60]	@ (80074d8 <HAL_PWREx_ConfigSupply+0x70>)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80074a2:	f7fe f91d 	bl	80056e0 <HAL_GetTick>
 80074a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80074a8:	e009      	b.n	80074be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80074aa:	f7fe f919 	bl	80056e0 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074b8:	d901      	bls.n	80074be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e007      	b.n	80074ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80074be:	4b06      	ldr	r3, [pc, #24]	@ (80074d8 <HAL_PWREx_ConfigSupply+0x70>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074ca:	d1ee      	bne.n	80074aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	58024800 	.word	0x58024800

080074dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08c      	sub	sp, #48	@ 0x30
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d102      	bne.n	80074f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	f000 bc48 	b.w	8007d80 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 8088 	beq.w	800760e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074fe:	4b99      	ldr	r3, [pc, #612]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007508:	4b96      	ldr	r3, [pc, #600]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 800750a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800750e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007510:	2b10      	cmp	r3, #16
 8007512:	d007      	beq.n	8007524 <HAL_RCC_OscConfig+0x48>
 8007514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007516:	2b18      	cmp	r3, #24
 8007518:	d111      	bne.n	800753e <HAL_RCC_OscConfig+0x62>
 800751a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751c:	f003 0303 	and.w	r3, r3, #3
 8007520:	2b02      	cmp	r3, #2
 8007522:	d10c      	bne.n	800753e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007524:	4b8f      	ldr	r3, [pc, #572]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d06d      	beq.n	800760c <HAL_RCC_OscConfig+0x130>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d169      	bne.n	800760c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	f000 bc21 	b.w	8007d80 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007546:	d106      	bne.n	8007556 <HAL_RCC_OscConfig+0x7a>
 8007548:	4b86      	ldr	r3, [pc, #536]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a85      	ldr	r2, [pc, #532]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 800754e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	e02e      	b.n	80075b4 <HAL_RCC_OscConfig+0xd8>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10c      	bne.n	8007578 <HAL_RCC_OscConfig+0x9c>
 800755e:	4b81      	ldr	r3, [pc, #516]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a80      	ldr	r2, [pc, #512]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007564:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	4b7e      	ldr	r3, [pc, #504]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a7d      	ldr	r2, [pc, #500]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007570:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007574:	6013      	str	r3, [r2, #0]
 8007576:	e01d      	b.n	80075b4 <HAL_RCC_OscConfig+0xd8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007580:	d10c      	bne.n	800759c <HAL_RCC_OscConfig+0xc0>
 8007582:	4b78      	ldr	r3, [pc, #480]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a77      	ldr	r2, [pc, #476]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	4b75      	ldr	r3, [pc, #468]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a74      	ldr	r2, [pc, #464]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	e00b      	b.n	80075b4 <HAL_RCC_OscConfig+0xd8>
 800759c:	4b71      	ldr	r3, [pc, #452]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a70      	ldr	r2, [pc, #448]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 80075a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	4b6e      	ldr	r3, [pc, #440]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a6d      	ldr	r2, [pc, #436]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 80075ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d013      	beq.n	80075e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075bc:	f7fe f890 	bl	80056e0 <HAL_GetTick>
 80075c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075c2:	e008      	b.n	80075d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075c4:	f7fe f88c 	bl	80056e0 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	2b64      	cmp	r3, #100	@ 0x64
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e3d4      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075d6:	4b63      	ldr	r3, [pc, #396]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0f0      	beq.n	80075c4 <HAL_RCC_OscConfig+0xe8>
 80075e2:	e014      	b.n	800760e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e4:	f7fe f87c 	bl	80056e0 <HAL_GetTick>
 80075e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80075ea:	e008      	b.n	80075fe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075ec:	f7fe f878 	bl	80056e0 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b64      	cmp	r3, #100	@ 0x64
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e3c0      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80075fe:	4b59      	ldr	r3, [pc, #356]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1f0      	bne.n	80075ec <HAL_RCC_OscConfig+0x110>
 800760a:	e000      	b.n	800760e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800760c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	f000 80ca 	beq.w	80077b0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800761c:	4b51      	ldr	r3, [pc, #324]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007624:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007626:	4b4f      	ldr	r3, [pc, #316]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800762c:	6a3b      	ldr	r3, [r7, #32]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d007      	beq.n	8007642 <HAL_RCC_OscConfig+0x166>
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	2b18      	cmp	r3, #24
 8007636:	d156      	bne.n	80076e6 <HAL_RCC_OscConfig+0x20a>
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	f003 0303 	and.w	r3, r3, #3
 800763e:	2b00      	cmp	r3, #0
 8007640:	d151      	bne.n	80076e6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007642:	4b48      	ldr	r3, [pc, #288]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0304 	and.w	r3, r3, #4
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <HAL_RCC_OscConfig+0x17e>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e392      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800765a:	4b42      	ldr	r3, [pc, #264]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f023 0219 	bic.w	r2, r3, #25
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	493f      	ldr	r1, [pc, #252]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007668:	4313      	orrs	r3, r2
 800766a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800766c:	f7fe f838 	bl	80056e0 <HAL_GetTick>
 8007670:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007672:	e008      	b.n	8007686 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007674:	f7fe f834 	bl	80056e0 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b02      	cmp	r3, #2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e37c      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007686:	4b37      	ldr	r3, [pc, #220]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0304 	and.w	r3, r3, #4
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0f0      	beq.n	8007674 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007692:	f7fe f855 	bl	8005740 <HAL_GetREVID>
 8007696:	4603      	mov	r3, r0
 8007698:	f241 0203 	movw	r2, #4099	@ 0x1003
 800769c:	4293      	cmp	r3, r2
 800769e:	d817      	bhi.n	80076d0 <HAL_RCC_OscConfig+0x1f4>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	2b40      	cmp	r3, #64	@ 0x40
 80076a6:	d108      	bne.n	80076ba <HAL_RCC_OscConfig+0x1de>
 80076a8:	4b2e      	ldr	r3, [pc, #184]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80076b0:	4a2c      	ldr	r2, [pc, #176]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 80076b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076b6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076b8:	e07a      	b.n	80077b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	031b      	lsls	r3, r3, #12
 80076c8:	4926      	ldr	r1, [pc, #152]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076ce:	e06f      	b.n	80077b0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076d0:	4b24      	ldr	r3, [pc, #144]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	061b      	lsls	r3, r3, #24
 80076de:	4921      	ldr	r1, [pc, #132]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076e4:	e064      	b.n	80077b0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d047      	beq.n	800777e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80076ee:	4b1d      	ldr	r3, [pc, #116]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f023 0219 	bic.w	r2, r3, #25
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	491a      	ldr	r1, [pc, #104]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007700:	f7fd ffee 	bl	80056e0 <HAL_GetTick>
 8007704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007708:	f7fd ffea 	bl	80056e0 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e332      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800771a:	4b12      	ldr	r3, [pc, #72]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f0      	beq.n	8007708 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007726:	f7fe f80b 	bl	8005740 <HAL_GetREVID>
 800772a:	4603      	mov	r3, r0
 800772c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007730:	4293      	cmp	r3, r2
 8007732:	d819      	bhi.n	8007768 <HAL_RCC_OscConfig+0x28c>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	2b40      	cmp	r3, #64	@ 0x40
 800773a:	d108      	bne.n	800774e <HAL_RCC_OscConfig+0x272>
 800773c:	4b09      	ldr	r3, [pc, #36]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007744:	4a07      	ldr	r2, [pc, #28]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800774a:	6053      	str	r3, [r2, #4]
 800774c:	e030      	b.n	80077b0 <HAL_RCC_OscConfig+0x2d4>
 800774e:	4b05      	ldr	r3, [pc, #20]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	031b      	lsls	r3, r3, #12
 800775c:	4901      	ldr	r1, [pc, #4]	@ (8007764 <HAL_RCC_OscConfig+0x288>)
 800775e:	4313      	orrs	r3, r2
 8007760:	604b      	str	r3, [r1, #4]
 8007762:	e025      	b.n	80077b0 <HAL_RCC_OscConfig+0x2d4>
 8007764:	58024400 	.word	0x58024400
 8007768:	4b9a      	ldr	r3, [pc, #616]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	061b      	lsls	r3, r3, #24
 8007776:	4997      	ldr	r1, [pc, #604]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 8007778:	4313      	orrs	r3, r2
 800777a:	604b      	str	r3, [r1, #4]
 800777c:	e018      	b.n	80077b0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800777e:	4b95      	ldr	r3, [pc, #596]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a94      	ldr	r2, [pc, #592]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 8007784:	f023 0301 	bic.w	r3, r3, #1
 8007788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800778a:	f7fd ffa9 	bl	80056e0 <HAL_GetTick>
 800778e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007790:	e008      	b.n	80077a4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007792:	f7fd ffa5 	bl	80056e0 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	2b02      	cmp	r3, #2
 800779e:	d901      	bls.n	80077a4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e2ed      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80077a4:	4b8b      	ldr	r3, [pc, #556]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1f0      	bne.n	8007792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0310 	and.w	r3, r3, #16
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 80a9 	beq.w	8007910 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077be:	4b85      	ldr	r3, [pc, #532]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077c8:	4b82      	ldr	r3, [pc, #520]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80077ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d007      	beq.n	80077e4 <HAL_RCC_OscConfig+0x308>
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	2b18      	cmp	r3, #24
 80077d8:	d13a      	bne.n	8007850 <HAL_RCC_OscConfig+0x374>
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d135      	bne.n	8007850 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80077e4:	4b7b      	ldr	r3, [pc, #492]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d005      	beq.n	80077fc <HAL_RCC_OscConfig+0x320>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	2b80      	cmp	r3, #128	@ 0x80
 80077f6:	d001      	beq.n	80077fc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e2c1      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80077fc:	f7fd ffa0 	bl	8005740 <HAL_GetREVID>
 8007800:	4603      	mov	r3, r0
 8007802:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007806:	4293      	cmp	r3, r2
 8007808:	d817      	bhi.n	800783a <HAL_RCC_OscConfig+0x35e>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	2b20      	cmp	r3, #32
 8007810:	d108      	bne.n	8007824 <HAL_RCC_OscConfig+0x348>
 8007812:	4b70      	ldr	r3, [pc, #448]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800781a:	4a6e      	ldr	r2, [pc, #440]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 800781c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007820:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007822:	e075      	b.n	8007910 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007824:	4b6b      	ldr	r3, [pc, #428]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	069b      	lsls	r3, r3, #26
 8007832:	4968      	ldr	r1, [pc, #416]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 8007834:	4313      	orrs	r3, r2
 8007836:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007838:	e06a      	b.n	8007910 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800783a:	4b66      	ldr	r3, [pc, #408]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	061b      	lsls	r3, r3, #24
 8007848:	4962      	ldr	r1, [pc, #392]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 800784a:	4313      	orrs	r3, r2
 800784c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800784e:	e05f      	b.n	8007910 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d042      	beq.n	80078de <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007858:	4b5e      	ldr	r3, [pc, #376]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a5d      	ldr	r2, [pc, #372]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 800785e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007864:	f7fd ff3c 	bl	80056e0 <HAL_GetTick>
 8007868:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800786a:	e008      	b.n	800787e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800786c:	f7fd ff38 	bl	80056e0 <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	2b02      	cmp	r3, #2
 8007878:	d901      	bls.n	800787e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e280      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800787e:	4b55      	ldr	r3, [pc, #340]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007886:	2b00      	cmp	r3, #0
 8007888:	d0f0      	beq.n	800786c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800788a:	f7fd ff59 	bl	8005740 <HAL_GetREVID>
 800788e:	4603      	mov	r3, r0
 8007890:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007894:	4293      	cmp	r3, r2
 8007896:	d817      	bhi.n	80078c8 <HAL_RCC_OscConfig+0x3ec>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	2b20      	cmp	r3, #32
 800789e:	d108      	bne.n	80078b2 <HAL_RCC_OscConfig+0x3d6>
 80078a0:	4b4c      	ldr	r3, [pc, #304]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80078a8:	4a4a      	ldr	r2, [pc, #296]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80078aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078ae:	6053      	str	r3, [r2, #4]
 80078b0:	e02e      	b.n	8007910 <HAL_RCC_OscConfig+0x434>
 80078b2:	4b48      	ldr	r3, [pc, #288]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	069b      	lsls	r3, r3, #26
 80078c0:	4944      	ldr	r1, [pc, #272]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	604b      	str	r3, [r1, #4]
 80078c6:	e023      	b.n	8007910 <HAL_RCC_OscConfig+0x434>
 80078c8:	4b42      	ldr	r3, [pc, #264]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	061b      	lsls	r3, r3, #24
 80078d6:	493f      	ldr	r1, [pc, #252]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	60cb      	str	r3, [r1, #12]
 80078dc:	e018      	b.n	8007910 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80078de:	4b3d      	ldr	r3, [pc, #244]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a3c      	ldr	r2, [pc, #240]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80078e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ea:	f7fd fef9 	bl	80056e0 <HAL_GetTick>
 80078ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80078f0:	e008      	b.n	8007904 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80078f2:	f7fd fef5 	bl	80056e0 <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d901      	bls.n	8007904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e23d      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007904:	4b33      	ldr	r3, [pc, #204]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1f0      	bne.n	80078f2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d036      	beq.n	800798a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d019      	beq.n	8007958 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007924:	4b2b      	ldr	r3, [pc, #172]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 8007926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007928:	4a2a      	ldr	r2, [pc, #168]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 800792a:	f043 0301 	orr.w	r3, r3, #1
 800792e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007930:	f7fd fed6 	bl	80056e0 <HAL_GetTick>
 8007934:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007936:	e008      	b.n	800794a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007938:	f7fd fed2 	bl	80056e0 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	2b02      	cmp	r3, #2
 8007944:	d901      	bls.n	800794a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e21a      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800794a:	4b22      	ldr	r3, [pc, #136]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 800794c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0f0      	beq.n	8007938 <HAL_RCC_OscConfig+0x45c>
 8007956:	e018      	b.n	800798a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007958:	4b1e      	ldr	r3, [pc, #120]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 800795a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800795c:	4a1d      	ldr	r2, [pc, #116]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 800795e:	f023 0301 	bic.w	r3, r3, #1
 8007962:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007964:	f7fd febc 	bl	80056e0 <HAL_GetTick>
 8007968:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800796a:	e008      	b.n	800797e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800796c:	f7fd feb8 	bl	80056e0 <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	2b02      	cmp	r3, #2
 8007978:	d901      	bls.n	800797e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e200      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800797e:	4b15      	ldr	r3, [pc, #84]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 8007980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1f0      	bne.n	800796c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b00      	cmp	r3, #0
 8007994:	d039      	beq.n	8007a0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d01c      	beq.n	80079d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800799e:	4b0d      	ldr	r3, [pc, #52]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a0c      	ldr	r2, [pc, #48]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80079a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80079a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80079aa:	f7fd fe99 	bl	80056e0 <HAL_GetTick>
 80079ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80079b0:	e008      	b.n	80079c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079b2:	f7fd fe95 	bl	80056e0 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d901      	bls.n	80079c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e1dd      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80079c4:	4b03      	ldr	r3, [pc, #12]	@ (80079d4 <HAL_RCC_OscConfig+0x4f8>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d0f0      	beq.n	80079b2 <HAL_RCC_OscConfig+0x4d6>
 80079d0:	e01b      	b.n	8007a0a <HAL_RCC_OscConfig+0x52e>
 80079d2:	bf00      	nop
 80079d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80079d8:	4b9b      	ldr	r3, [pc, #620]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a9a      	ldr	r2, [pc, #616]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 80079de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80079e4:	f7fd fe7c 	bl	80056e0 <HAL_GetTick>
 80079e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80079ea:	e008      	b.n	80079fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079ec:	f7fd fe78 	bl	80056e0 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d901      	bls.n	80079fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e1c0      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80079fe:	4b92      	ldr	r3, [pc, #584]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1f0      	bne.n	80079ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0304 	and.w	r3, r3, #4
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 8081 	beq.w	8007b1a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a18:	4b8c      	ldr	r3, [pc, #560]	@ (8007c4c <HAL_RCC_OscConfig+0x770>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a8b      	ldr	r2, [pc, #556]	@ (8007c4c <HAL_RCC_OscConfig+0x770>)
 8007a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a24:	f7fd fe5c 	bl	80056e0 <HAL_GetTick>
 8007a28:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a2a:	e008      	b.n	8007a3e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a2c:	f7fd fe58 	bl	80056e0 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b64      	cmp	r3, #100	@ 0x64
 8007a38:	d901      	bls.n	8007a3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e1a0      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007a3e:	4b83      	ldr	r3, [pc, #524]	@ (8007c4c <HAL_RCC_OscConfig+0x770>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0f0      	beq.n	8007a2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d106      	bne.n	8007a60 <HAL_RCC_OscConfig+0x584>
 8007a52:	4b7d      	ldr	r3, [pc, #500]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a56:	4a7c      	ldr	r2, [pc, #496]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007a58:	f043 0301 	orr.w	r3, r3, #1
 8007a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a5e:	e02d      	b.n	8007abc <HAL_RCC_OscConfig+0x5e0>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10c      	bne.n	8007a82 <HAL_RCC_OscConfig+0x5a6>
 8007a68:	4b77      	ldr	r3, [pc, #476]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a6c:	4a76      	ldr	r2, [pc, #472]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007a6e:	f023 0301 	bic.w	r3, r3, #1
 8007a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a74:	4b74      	ldr	r3, [pc, #464]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a78:	4a73      	ldr	r2, [pc, #460]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007a7a:	f023 0304 	bic.w	r3, r3, #4
 8007a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a80:	e01c      	b.n	8007abc <HAL_RCC_OscConfig+0x5e0>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	2b05      	cmp	r3, #5
 8007a88:	d10c      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x5c8>
 8007a8a:	4b6f      	ldr	r3, [pc, #444]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a8e:	4a6e      	ldr	r2, [pc, #440]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007a90:	f043 0304 	orr.w	r3, r3, #4
 8007a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a96:	4b6c      	ldr	r3, [pc, #432]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a9a:	4a6b      	ldr	r2, [pc, #428]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007a9c:	f043 0301 	orr.w	r3, r3, #1
 8007aa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007aa2:	e00b      	b.n	8007abc <HAL_RCC_OscConfig+0x5e0>
 8007aa4:	4b68      	ldr	r3, [pc, #416]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aa8:	4a67      	ldr	r2, [pc, #412]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007aaa:	f023 0301 	bic.w	r3, r3, #1
 8007aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ab0:	4b65      	ldr	r3, [pc, #404]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ab4:	4a64      	ldr	r2, [pc, #400]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007ab6:	f023 0304 	bic.w	r3, r3, #4
 8007aba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d015      	beq.n	8007af0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac4:	f7fd fe0c 	bl	80056e0 <HAL_GetTick>
 8007ac8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007aca:	e00a      	b.n	8007ae2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007acc:	f7fd fe08 	bl	80056e0 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e14e      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ae2:	4b59      	ldr	r3, [pc, #356]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d0ee      	beq.n	8007acc <HAL_RCC_OscConfig+0x5f0>
 8007aee:	e014      	b.n	8007b1a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007af0:	f7fd fdf6 	bl	80056e0 <HAL_GetTick>
 8007af4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007af6:	e00a      	b.n	8007b0e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007af8:	f7fd fdf2 	bl	80056e0 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d901      	bls.n	8007b0e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e138      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007b0e:	4b4e      	ldr	r3, [pc, #312]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1ee      	bne.n	8007af8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 812d 	beq.w	8007d7e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007b24:	4b48      	ldr	r3, [pc, #288]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b2c:	2b18      	cmp	r3, #24
 8007b2e:	f000 80bd 	beq.w	8007cac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	f040 809e 	bne.w	8007c78 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b3c:	4b42      	ldr	r3, [pc, #264]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a41      	ldr	r2, [pc, #260]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007b42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b48:	f7fd fdca 	bl	80056e0 <HAL_GetTick>
 8007b4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b4e:	e008      	b.n	8007b62 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b50:	f7fd fdc6 	bl	80056e0 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d901      	bls.n	8007b62 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e10e      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b62:	4b39      	ldr	r3, [pc, #228]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1f0      	bne.n	8007b50 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b6e:	4b36      	ldr	r3, [pc, #216]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007b70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b72:	4b37      	ldr	r3, [pc, #220]	@ (8007c50 <HAL_RCC_OscConfig+0x774>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007b7e:	0112      	lsls	r2, r2, #4
 8007b80:	430a      	orrs	r2, r1
 8007b82:	4931      	ldr	r1, [pc, #196]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b96:	3b01      	subs	r3, #1
 8007b98:	025b      	lsls	r3, r3, #9
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	041b      	lsls	r3, r3, #16
 8007ba6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	061b      	lsls	r3, r3, #24
 8007bb4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007bb8:	4923      	ldr	r1, [pc, #140]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007bbe:	4b22      	ldr	r3, [pc, #136]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc2:	4a21      	ldr	r2, [pc, #132]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007bc4:	f023 0301 	bic.w	r3, r3, #1
 8007bc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007bca:	4b1f      	ldr	r3, [pc, #124]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bce:	4b21      	ldr	r3, [pc, #132]	@ (8007c54 <HAL_RCC_OscConfig+0x778>)
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007bd6:	00d2      	lsls	r2, r2, #3
 8007bd8:	491b      	ldr	r1, [pc, #108]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007bde:	4b1a      	ldr	r3, [pc, #104]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007be2:	f023 020c 	bic.w	r2, r3, #12
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bea:	4917      	ldr	r1, [pc, #92]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007bf0:	4b15      	ldr	r3, [pc, #84]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf4:	f023 0202 	bic.w	r2, r3, #2
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bfc:	4912      	ldr	r1, [pc, #72]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007c02:	4b11      	ldr	r3, [pc, #68]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c06:	4a10      	ldr	r2, [pc, #64]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c12:	4a0d      	ldr	r2, [pc, #52]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007c20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007c24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007c26:	4b08      	ldr	r3, [pc, #32]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2a:	4a07      	ldr	r2, [pc, #28]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007c2c:	f043 0301 	orr.w	r3, r3, #1
 8007c30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c32:	4b05      	ldr	r3, [pc, #20]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a04      	ldr	r2, [pc, #16]	@ (8007c48 <HAL_RCC_OscConfig+0x76c>)
 8007c38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c3e:	f7fd fd4f 	bl	80056e0 <HAL_GetTick>
 8007c42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c44:	e011      	b.n	8007c6a <HAL_RCC_OscConfig+0x78e>
 8007c46:	bf00      	nop
 8007c48:	58024400 	.word	0x58024400
 8007c4c:	58024800 	.word	0x58024800
 8007c50:	fffffc0c 	.word	0xfffffc0c
 8007c54:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c58:	f7fd fd42 	bl	80056e0 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d901      	bls.n	8007c6a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e08a      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c6a:	4b47      	ldr	r3, [pc, #284]	@ (8007d88 <HAL_RCC_OscConfig+0x8ac>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0f0      	beq.n	8007c58 <HAL_RCC_OscConfig+0x77c>
 8007c76:	e082      	b.n	8007d7e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c78:	4b43      	ldr	r3, [pc, #268]	@ (8007d88 <HAL_RCC_OscConfig+0x8ac>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a42      	ldr	r2, [pc, #264]	@ (8007d88 <HAL_RCC_OscConfig+0x8ac>)
 8007c7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c84:	f7fd fd2c 	bl	80056e0 <HAL_GetTick>
 8007c88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c8a:	e008      	b.n	8007c9e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c8c:	f7fd fd28 	bl	80056e0 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d901      	bls.n	8007c9e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e070      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8007d88 <HAL_RCC_OscConfig+0x8ac>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1f0      	bne.n	8007c8c <HAL_RCC_OscConfig+0x7b0>
 8007caa:	e068      	b.n	8007d7e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007cac:	4b36      	ldr	r3, [pc, #216]	@ (8007d88 <HAL_RCC_OscConfig+0x8ac>)
 8007cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007cb2:	4b35      	ldr	r3, [pc, #212]	@ (8007d88 <HAL_RCC_OscConfig+0x8ac>)
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d031      	beq.n	8007d24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f003 0203 	and.w	r2, r3, #3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d12a      	bne.n	8007d24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	091b      	lsrs	r3, r3, #4
 8007cd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d122      	bne.n	8007d24 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d11a      	bne.n	8007d24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	0a5b      	lsrs	r3, r3, #9
 8007cf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cfa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d111      	bne.n	8007d24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	0c1b      	lsrs	r3, r3, #16
 8007d04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d108      	bne.n	8007d24 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	0e1b      	lsrs	r3, r3, #24
 8007d16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d001      	beq.n	8007d28 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e02b      	b.n	8007d80 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007d28:	4b17      	ldr	r3, [pc, #92]	@ (8007d88 <HAL_RCC_OscConfig+0x8ac>)
 8007d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d2c:	08db      	lsrs	r3, r3, #3
 8007d2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d01f      	beq.n	8007d7e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007d3e:	4b12      	ldr	r3, [pc, #72]	@ (8007d88 <HAL_RCC_OscConfig+0x8ac>)
 8007d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d42:	4a11      	ldr	r2, [pc, #68]	@ (8007d88 <HAL_RCC_OscConfig+0x8ac>)
 8007d44:	f023 0301 	bic.w	r3, r3, #1
 8007d48:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d4a:	f7fd fcc9 	bl	80056e0 <HAL_GetTick>
 8007d4e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007d50:	bf00      	nop
 8007d52:	f7fd fcc5 	bl	80056e0 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d0f9      	beq.n	8007d52 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d88 <HAL_RCC_OscConfig+0x8ac>)
 8007d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d62:	4b0a      	ldr	r3, [pc, #40]	@ (8007d8c <HAL_RCC_OscConfig+0x8b0>)
 8007d64:	4013      	ands	r3, r2
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007d6a:	00d2      	lsls	r2, r2, #3
 8007d6c:	4906      	ldr	r1, [pc, #24]	@ (8007d88 <HAL_RCC_OscConfig+0x8ac>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007d72:	4b05      	ldr	r3, [pc, #20]	@ (8007d88 <HAL_RCC_OscConfig+0x8ac>)
 8007d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d76:	4a04      	ldr	r2, [pc, #16]	@ (8007d88 <HAL_RCC_OscConfig+0x8ac>)
 8007d78:	f043 0301 	orr.w	r3, r3, #1
 8007d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3730      	adds	r7, #48	@ 0x30
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	58024400 	.word	0x58024400
 8007d8c:	ffff0007 	.word	0xffff0007

08007d90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d101      	bne.n	8007da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e19c      	b.n	80080de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007da4:	4b8a      	ldr	r3, [pc, #552]	@ (8007fd0 <HAL_RCC_ClockConfig+0x240>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 030f 	and.w	r3, r3, #15
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d910      	bls.n	8007dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007db2:	4b87      	ldr	r3, [pc, #540]	@ (8007fd0 <HAL_RCC_ClockConfig+0x240>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f023 020f 	bic.w	r2, r3, #15
 8007dba:	4985      	ldr	r1, [pc, #532]	@ (8007fd0 <HAL_RCC_ClockConfig+0x240>)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dc2:	4b83      	ldr	r3, [pc, #524]	@ (8007fd0 <HAL_RCC_ClockConfig+0x240>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 030f 	and.w	r3, r3, #15
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d001      	beq.n	8007dd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e184      	b.n	80080de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d010      	beq.n	8007e02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	691a      	ldr	r2, [r3, #16]
 8007de4:	4b7b      	ldr	r3, [pc, #492]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d908      	bls.n	8007e02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007df0:	4b78      	ldr	r3, [pc, #480]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	4975      	ldr	r1, [pc, #468]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0308 	and.w	r3, r3, #8
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d010      	beq.n	8007e30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	695a      	ldr	r2, [r3, #20]
 8007e12:	4b70      	ldr	r3, [pc, #448]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d908      	bls.n	8007e30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	695b      	ldr	r3, [r3, #20]
 8007e2a:	496a      	ldr	r1, [pc, #424]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0310 	and.w	r3, r3, #16
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d010      	beq.n	8007e5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699a      	ldr	r2, [r3, #24]
 8007e40:	4b64      	ldr	r3, [pc, #400]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d908      	bls.n	8007e5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007e4c:	4b61      	ldr	r3, [pc, #388]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	495e      	ldr	r1, [pc, #376]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0320 	and.w	r3, r3, #32
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d010      	beq.n	8007e8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	69da      	ldr	r2, [r3, #28]
 8007e6e:	4b59      	ldr	r3, [pc, #356]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d908      	bls.n	8007e8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007e7a:	4b56      	ldr	r3, [pc, #344]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	4953      	ldr	r1, [pc, #332]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d010      	beq.n	8007eba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68da      	ldr	r2, [r3, #12]
 8007e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	f003 030f 	and.w	r3, r3, #15
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d908      	bls.n	8007eba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ea8:	4b4a      	ldr	r3, [pc, #296]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	f023 020f 	bic.w	r2, r3, #15
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	4947      	ldr	r1, [pc, #284]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d055      	beq.n	8007f72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007ec6:	4b43      	ldr	r3, [pc, #268]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	4940      	ldr	r1, [pc, #256]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d107      	bne.n	8007ef0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d121      	bne.n	8007f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e0f6      	b.n	80080de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d107      	bne.n	8007f08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ef8:	4b36      	ldr	r3, [pc, #216]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d115      	bne.n	8007f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e0ea      	b.n	80080de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d107      	bne.n	8007f20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007f10:	4b30      	ldr	r3, [pc, #192]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d109      	bne.n	8007f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e0de      	b.n	80080de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f20:	4b2c      	ldr	r3, [pc, #176]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e0d6      	b.n	80080de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f30:	4b28      	ldr	r3, [pc, #160]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	f023 0207 	bic.w	r2, r3, #7
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	4925      	ldr	r1, [pc, #148]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f42:	f7fd fbcd 	bl	80056e0 <HAL_GetTick>
 8007f46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f48:	e00a      	b.n	8007f60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f4a:	f7fd fbc9 	bl	80056e0 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d901      	bls.n	8007f60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e0be      	b.n	80080de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f60:	4b1c      	ldr	r3, [pc, #112]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	00db      	lsls	r3, r3, #3
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d1eb      	bne.n	8007f4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d010      	beq.n	8007fa0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68da      	ldr	r2, [r3, #12]
 8007f82:	4b14      	ldr	r3, [pc, #80]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	f003 030f 	and.w	r3, r3, #15
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d208      	bcs.n	8007fa0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f8e:	4b11      	ldr	r3, [pc, #68]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	f023 020f 	bic.w	r2, r3, #15
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	490e      	ldr	r1, [pc, #56]	@ (8007fd4 <HAL_RCC_ClockConfig+0x244>)
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd0 <HAL_RCC_ClockConfig+0x240>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d214      	bcs.n	8007fd8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fae:	4b08      	ldr	r3, [pc, #32]	@ (8007fd0 <HAL_RCC_ClockConfig+0x240>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f023 020f 	bic.w	r2, r3, #15
 8007fb6:	4906      	ldr	r1, [pc, #24]	@ (8007fd0 <HAL_RCC_ClockConfig+0x240>)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fbe:	4b04      	ldr	r3, [pc, #16]	@ (8007fd0 <HAL_RCC_ClockConfig+0x240>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d005      	beq.n	8007fd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e086      	b.n	80080de <HAL_RCC_ClockConfig+0x34e>
 8007fd0:	52002000 	.word	0x52002000
 8007fd4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d010      	beq.n	8008006 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	4b3f      	ldr	r3, [pc, #252]	@ (80080e8 <HAL_RCC_ClockConfig+0x358>)
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d208      	bcs.n	8008006 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ff4:	4b3c      	ldr	r3, [pc, #240]	@ (80080e8 <HAL_RCC_ClockConfig+0x358>)
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	4939      	ldr	r1, [pc, #228]	@ (80080e8 <HAL_RCC_ClockConfig+0x358>)
 8008002:	4313      	orrs	r3, r2
 8008004:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0308 	and.w	r3, r3, #8
 800800e:	2b00      	cmp	r3, #0
 8008010:	d010      	beq.n	8008034 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	695a      	ldr	r2, [r3, #20]
 8008016:	4b34      	ldr	r3, [pc, #208]	@ (80080e8 <HAL_RCC_ClockConfig+0x358>)
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800801e:	429a      	cmp	r2, r3
 8008020:	d208      	bcs.n	8008034 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008022:	4b31      	ldr	r3, [pc, #196]	@ (80080e8 <HAL_RCC_ClockConfig+0x358>)
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	492e      	ldr	r1, [pc, #184]	@ (80080e8 <HAL_RCC_ClockConfig+0x358>)
 8008030:	4313      	orrs	r3, r2
 8008032:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0310 	and.w	r3, r3, #16
 800803c:	2b00      	cmp	r3, #0
 800803e:	d010      	beq.n	8008062 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	699a      	ldr	r2, [r3, #24]
 8008044:	4b28      	ldr	r3, [pc, #160]	@ (80080e8 <HAL_RCC_ClockConfig+0x358>)
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800804c:	429a      	cmp	r2, r3
 800804e:	d208      	bcs.n	8008062 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008050:	4b25      	ldr	r3, [pc, #148]	@ (80080e8 <HAL_RCC_ClockConfig+0x358>)
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	4922      	ldr	r1, [pc, #136]	@ (80080e8 <HAL_RCC_ClockConfig+0x358>)
 800805e:	4313      	orrs	r3, r2
 8008060:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0320 	and.w	r3, r3, #32
 800806a:	2b00      	cmp	r3, #0
 800806c:	d010      	beq.n	8008090 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69da      	ldr	r2, [r3, #28]
 8008072:	4b1d      	ldr	r3, [pc, #116]	@ (80080e8 <HAL_RCC_ClockConfig+0x358>)
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800807a:	429a      	cmp	r2, r3
 800807c:	d208      	bcs.n	8008090 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800807e:	4b1a      	ldr	r3, [pc, #104]	@ (80080e8 <HAL_RCC_ClockConfig+0x358>)
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	4917      	ldr	r1, [pc, #92]	@ (80080e8 <HAL_RCC_ClockConfig+0x358>)
 800808c:	4313      	orrs	r3, r2
 800808e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008090:	f000 f834 	bl	80080fc <HAL_RCC_GetSysClockFreq>
 8008094:	4602      	mov	r2, r0
 8008096:	4b14      	ldr	r3, [pc, #80]	@ (80080e8 <HAL_RCC_ClockConfig+0x358>)
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	0a1b      	lsrs	r3, r3, #8
 800809c:	f003 030f 	and.w	r3, r3, #15
 80080a0:	4912      	ldr	r1, [pc, #72]	@ (80080ec <HAL_RCC_ClockConfig+0x35c>)
 80080a2:	5ccb      	ldrb	r3, [r1, r3]
 80080a4:	f003 031f 	and.w	r3, r3, #31
 80080a8:	fa22 f303 	lsr.w	r3, r2, r3
 80080ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80080ae:	4b0e      	ldr	r3, [pc, #56]	@ (80080e8 <HAL_RCC_ClockConfig+0x358>)
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	f003 030f 	and.w	r3, r3, #15
 80080b6:	4a0d      	ldr	r2, [pc, #52]	@ (80080ec <HAL_RCC_ClockConfig+0x35c>)
 80080b8:	5cd3      	ldrb	r3, [r2, r3]
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	fa22 f303 	lsr.w	r3, r2, r3
 80080c4:	4a0a      	ldr	r2, [pc, #40]	@ (80080f0 <HAL_RCC_ClockConfig+0x360>)
 80080c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80080c8:	4a0a      	ldr	r2, [pc, #40]	@ (80080f4 <HAL_RCC_ClockConfig+0x364>)
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80080ce:	4b0a      	ldr	r3, [pc, #40]	@ (80080f8 <HAL_RCC_ClockConfig+0x368>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fc ff06 	bl	8004ee4 <HAL_InitTick>
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	58024400 	.word	0x58024400
 80080ec:	0800e16c 	.word	0x0800e16c
 80080f0:	2400000c 	.word	0x2400000c
 80080f4:	24000008 	.word	0x24000008
 80080f8:	24000028 	.word	0x24000028

080080fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b089      	sub	sp, #36	@ 0x24
 8008100:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008102:	4bb3      	ldr	r3, [pc, #716]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800810a:	2b18      	cmp	r3, #24
 800810c:	f200 8155 	bhi.w	80083ba <HAL_RCC_GetSysClockFreq+0x2be>
 8008110:	a201      	add	r2, pc, #4	@ (adr r2, 8008118 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008116:	bf00      	nop
 8008118:	0800817d 	.word	0x0800817d
 800811c:	080083bb 	.word	0x080083bb
 8008120:	080083bb 	.word	0x080083bb
 8008124:	080083bb 	.word	0x080083bb
 8008128:	080083bb 	.word	0x080083bb
 800812c:	080083bb 	.word	0x080083bb
 8008130:	080083bb 	.word	0x080083bb
 8008134:	080083bb 	.word	0x080083bb
 8008138:	080081a3 	.word	0x080081a3
 800813c:	080083bb 	.word	0x080083bb
 8008140:	080083bb 	.word	0x080083bb
 8008144:	080083bb 	.word	0x080083bb
 8008148:	080083bb 	.word	0x080083bb
 800814c:	080083bb 	.word	0x080083bb
 8008150:	080083bb 	.word	0x080083bb
 8008154:	080083bb 	.word	0x080083bb
 8008158:	080081a9 	.word	0x080081a9
 800815c:	080083bb 	.word	0x080083bb
 8008160:	080083bb 	.word	0x080083bb
 8008164:	080083bb 	.word	0x080083bb
 8008168:	080083bb 	.word	0x080083bb
 800816c:	080083bb 	.word	0x080083bb
 8008170:	080083bb 	.word	0x080083bb
 8008174:	080083bb 	.word	0x080083bb
 8008178:	080081af 	.word	0x080081af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800817c:	4b94      	ldr	r3, [pc, #592]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0320 	and.w	r3, r3, #32
 8008184:	2b00      	cmp	r3, #0
 8008186:	d009      	beq.n	800819c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008188:	4b91      	ldr	r3, [pc, #580]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	08db      	lsrs	r3, r3, #3
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	4a90      	ldr	r2, [pc, #576]	@ (80083d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008194:	fa22 f303 	lsr.w	r3, r2, r3
 8008198:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800819a:	e111      	b.n	80083c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800819c:	4b8d      	ldr	r3, [pc, #564]	@ (80083d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800819e:	61bb      	str	r3, [r7, #24]
      break;
 80081a0:	e10e      	b.n	80083c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80081a2:	4b8d      	ldr	r3, [pc, #564]	@ (80083d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80081a4:	61bb      	str	r3, [r7, #24]
      break;
 80081a6:	e10b      	b.n	80083c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80081a8:	4b8c      	ldr	r3, [pc, #560]	@ (80083dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80081aa:	61bb      	str	r3, [r7, #24]
      break;
 80081ac:	e108      	b.n	80083c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081ae:	4b88      	ldr	r3, [pc, #544]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80081b8:	4b85      	ldr	r3, [pc, #532]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081bc:	091b      	lsrs	r3, r3, #4
 80081be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80081c4:	4b82      	ldr	r3, [pc, #520]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80081ce:	4b80      	ldr	r3, [pc, #512]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081d2:	08db      	lsrs	r3, r3, #3
 80081d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	fb02 f303 	mul.w	r3, r2, r3
 80081de:	ee07 3a90 	vmov	s15, r3
 80081e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 80e1 	beq.w	80083b4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	f000 8083 	beq.w	8008300 <HAL_RCC_GetSysClockFreq+0x204>
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	f200 80a1 	bhi.w	8008344 <HAL_RCC_GetSysClockFreq+0x248>
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <HAL_RCC_GetSysClockFreq+0x114>
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d056      	beq.n	80082bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800820e:	e099      	b.n	8008344 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008210:	4b6f      	ldr	r3, [pc, #444]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0320 	and.w	r3, r3, #32
 8008218:	2b00      	cmp	r3, #0
 800821a:	d02d      	beq.n	8008278 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800821c:	4b6c      	ldr	r3, [pc, #432]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	08db      	lsrs	r3, r3, #3
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	4a6b      	ldr	r2, [pc, #428]	@ (80083d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008228:	fa22 f303 	lsr.w	r3, r2, r3
 800822c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	ee07 3a90 	vmov	s15, r3
 8008234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	ee07 3a90 	vmov	s15, r3
 800823e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008246:	4b62      	ldr	r3, [pc, #392]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800824e:	ee07 3a90 	vmov	s15, r3
 8008252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008256:	ed97 6a02 	vldr	s12, [r7, #8]
 800825a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80083e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800825e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800826a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800826e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008272:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008276:	e087      	b.n	8008388 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008282:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80083e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800828a:	4b51      	ldr	r3, [pc, #324]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800828c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800829a:	ed97 6a02 	vldr	s12, [r7, #8]
 800829e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80083e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80082ba:	e065      	b.n	8008388 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80083e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80082ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ce:	4b40      	ldr	r3, [pc, #256]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082d6:	ee07 3a90 	vmov	s15, r3
 80082da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082de:	ed97 6a02 	vldr	s12, [r7, #8]
 80082e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80083e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80082e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80082fe:	e043      	b.n	8008388 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	ee07 3a90 	vmov	s15, r3
 8008306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80083ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800830e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008312:	4b2f      	ldr	r3, [pc, #188]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008322:	ed97 6a02 	vldr	s12, [r7, #8]
 8008326:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80083e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800832a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800832e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800833a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800833e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008342:	e021      	b.n	8008388 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80083e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008356:	4b1e      	ldr	r3, [pc, #120]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800835a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800835e:	ee07 3a90 	vmov	s15, r3
 8008362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008366:	ed97 6a02 	vldr	s12, [r7, #8]
 800836a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80083e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800836e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800837a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800837e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008382:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008386:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008388:	4b11      	ldr	r3, [pc, #68]	@ (80083d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800838a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800838c:	0a5b      	lsrs	r3, r3, #9
 800838e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008392:	3301      	adds	r3, #1
 8008394:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	ee07 3a90 	vmov	s15, r3
 800839c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80083a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ac:	ee17 3a90 	vmov	r3, s15
 80083b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80083b2:	e005      	b.n	80083c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	61bb      	str	r3, [r7, #24]
      break;
 80083b8:	e002      	b.n	80083c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80083ba:	4b07      	ldr	r3, [pc, #28]	@ (80083d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80083bc:	61bb      	str	r3, [r7, #24]
      break;
 80083be:	bf00      	nop
  }

  return sysclockfreq;
 80083c0:	69bb      	ldr	r3, [r7, #24]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3724      	adds	r7, #36	@ 0x24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	58024400 	.word	0x58024400
 80083d4:	03d09000 	.word	0x03d09000
 80083d8:	003d0900 	.word	0x003d0900
 80083dc:	007a1200 	.word	0x007a1200
 80083e0:	46000000 	.word	0x46000000
 80083e4:	4c742400 	.word	0x4c742400
 80083e8:	4a742400 	.word	0x4a742400
 80083ec:	4af42400 	.word	0x4af42400

080083f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80083f6:	f7ff fe81 	bl	80080fc <HAL_RCC_GetSysClockFreq>
 80083fa:	4602      	mov	r2, r0
 80083fc:	4b10      	ldr	r3, [pc, #64]	@ (8008440 <HAL_RCC_GetHCLKFreq+0x50>)
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	0a1b      	lsrs	r3, r3, #8
 8008402:	f003 030f 	and.w	r3, r3, #15
 8008406:	490f      	ldr	r1, [pc, #60]	@ (8008444 <HAL_RCC_GetHCLKFreq+0x54>)
 8008408:	5ccb      	ldrb	r3, [r1, r3]
 800840a:	f003 031f 	and.w	r3, r3, #31
 800840e:	fa22 f303 	lsr.w	r3, r2, r3
 8008412:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008414:	4b0a      	ldr	r3, [pc, #40]	@ (8008440 <HAL_RCC_GetHCLKFreq+0x50>)
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	f003 030f 	and.w	r3, r3, #15
 800841c:	4a09      	ldr	r2, [pc, #36]	@ (8008444 <HAL_RCC_GetHCLKFreq+0x54>)
 800841e:	5cd3      	ldrb	r3, [r2, r3]
 8008420:	f003 031f 	and.w	r3, r3, #31
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	fa22 f303 	lsr.w	r3, r2, r3
 800842a:	4a07      	ldr	r2, [pc, #28]	@ (8008448 <HAL_RCC_GetHCLKFreq+0x58>)
 800842c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800842e:	4a07      	ldr	r2, [pc, #28]	@ (800844c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008434:	4b04      	ldr	r3, [pc, #16]	@ (8008448 <HAL_RCC_GetHCLKFreq+0x58>)
 8008436:	681b      	ldr	r3, [r3, #0]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3708      	adds	r7, #8
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	58024400 	.word	0x58024400
 8008444:	0800e16c 	.word	0x0800e16c
 8008448:	2400000c 	.word	0x2400000c
 800844c:	24000008 	.word	0x24000008

08008450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008454:	f7ff ffcc 	bl	80083f0 <HAL_RCC_GetHCLKFreq>
 8008458:	4602      	mov	r2, r0
 800845a:	4b06      	ldr	r3, [pc, #24]	@ (8008474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	091b      	lsrs	r3, r3, #4
 8008460:	f003 0307 	and.w	r3, r3, #7
 8008464:	4904      	ldr	r1, [pc, #16]	@ (8008478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008466:	5ccb      	ldrb	r3, [r1, r3]
 8008468:	f003 031f 	and.w	r3, r3, #31
 800846c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008470:	4618      	mov	r0, r3
 8008472:	bd80      	pop	{r7, pc}
 8008474:	58024400 	.word	0x58024400
 8008478:	0800e16c 	.word	0x0800e16c

0800847c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008480:	f7ff ffb6 	bl	80083f0 <HAL_RCC_GetHCLKFreq>
 8008484:	4602      	mov	r2, r0
 8008486:	4b06      	ldr	r3, [pc, #24]	@ (80084a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008488:	69db      	ldr	r3, [r3, #28]
 800848a:	0a1b      	lsrs	r3, r3, #8
 800848c:	f003 0307 	and.w	r3, r3, #7
 8008490:	4904      	ldr	r1, [pc, #16]	@ (80084a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008492:	5ccb      	ldrb	r3, [r1, r3]
 8008494:	f003 031f 	and.w	r3, r3, #31
 8008498:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800849c:	4618      	mov	r0, r3
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	58024400 	.word	0x58024400
 80084a4:	0800e16c 	.word	0x0800e16c

080084a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	223f      	movs	r2, #63	@ 0x3f
 80084b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80084b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008524 <HAL_RCC_GetClockConfig+0x7c>)
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	f003 0207 	and.w	r2, r3, #7
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80084c4:	4b17      	ldr	r3, [pc, #92]	@ (8008524 <HAL_RCC_GetClockConfig+0x7c>)
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80084d0:	4b14      	ldr	r3, [pc, #80]	@ (8008524 <HAL_RCC_GetClockConfig+0x7c>)
 80084d2:	699b      	ldr	r3, [r3, #24]
 80084d4:	f003 020f 	and.w	r2, r3, #15
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80084dc:	4b11      	ldr	r3, [pc, #68]	@ (8008524 <HAL_RCC_GetClockConfig+0x7c>)
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80084e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008524 <HAL_RCC_GetClockConfig+0x7c>)
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80084f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008524 <HAL_RCC_GetClockConfig+0x7c>)
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008500:	4b08      	ldr	r3, [pc, #32]	@ (8008524 <HAL_RCC_GetClockConfig+0x7c>)
 8008502:	6a1b      	ldr	r3, [r3, #32]
 8008504:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800850c:	4b06      	ldr	r3, [pc, #24]	@ (8008528 <HAL_RCC_GetClockConfig+0x80>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 020f 	and.w	r2, r3, #15
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	601a      	str	r2, [r3, #0]
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	58024400 	.word	0x58024400
 8008528:	52002000 	.word	0x52002000

0800852c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800852c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008530:	b0ca      	sub	sp, #296	@ 0x128
 8008532:	af00      	add	r7, sp, #0
 8008534:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008538:	2300      	movs	r3, #0
 800853a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800853e:	2300      	movs	r3, #0
 8008540:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008550:	2500      	movs	r5, #0
 8008552:	ea54 0305 	orrs.w	r3, r4, r5
 8008556:	d049      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800855c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800855e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008562:	d02f      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008564:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008568:	d828      	bhi.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800856a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800856e:	d01a      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008570:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008574:	d822      	bhi.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800857a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800857e:	d007      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008580:	e01c      	b.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008582:	4bb8      	ldr	r3, [pc, #736]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008586:	4ab7      	ldr	r2, [pc, #732]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800858c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800858e:	e01a      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008594:	3308      	adds	r3, #8
 8008596:	2102      	movs	r1, #2
 8008598:	4618      	mov	r0, r3
 800859a:	f001 fc8f 	bl	8009ebc <RCCEx_PLL2_Config>
 800859e:	4603      	mov	r3, r0
 80085a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80085a4:	e00f      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085aa:	3328      	adds	r3, #40	@ 0x28
 80085ac:	2102      	movs	r1, #2
 80085ae:	4618      	mov	r0, r3
 80085b0:	f001 fd36 	bl	800a020 <RCCEx_PLL3_Config>
 80085b4:	4603      	mov	r3, r0
 80085b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80085ba:	e004      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085c2:	e000      	b.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80085c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10a      	bne.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80085ce:	4ba5      	ldr	r3, [pc, #660]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80085d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085dc:	4aa1      	ldr	r2, [pc, #644]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085de:	430b      	orrs	r3, r1
 80085e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80085e2:	e003      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80085ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80085f8:	f04f 0900 	mov.w	r9, #0
 80085fc:	ea58 0309 	orrs.w	r3, r8, r9
 8008600:	d047      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008608:	2b04      	cmp	r3, #4
 800860a:	d82a      	bhi.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800860c:	a201      	add	r2, pc, #4	@ (adr r2, 8008614 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800860e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008612:	bf00      	nop
 8008614:	08008629 	.word	0x08008629
 8008618:	08008637 	.word	0x08008637
 800861c:	0800864d 	.word	0x0800864d
 8008620:	0800866b 	.word	0x0800866b
 8008624:	0800866b 	.word	0x0800866b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008628:	4b8e      	ldr	r3, [pc, #568]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800862a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862c:	4a8d      	ldr	r2, [pc, #564]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800862e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008632:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008634:	e01a      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863a:	3308      	adds	r3, #8
 800863c:	2100      	movs	r1, #0
 800863e:	4618      	mov	r0, r3
 8008640:	f001 fc3c 	bl	8009ebc <RCCEx_PLL2_Config>
 8008644:	4603      	mov	r3, r0
 8008646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800864a:	e00f      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800864c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008650:	3328      	adds	r3, #40	@ 0x28
 8008652:	2100      	movs	r1, #0
 8008654:	4618      	mov	r0, r3
 8008656:	f001 fce3 	bl	800a020 <RCCEx_PLL3_Config>
 800865a:	4603      	mov	r3, r0
 800865c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008660:	e004      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008668:	e000      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800866a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800866c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10a      	bne.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008674:	4b7b      	ldr	r3, [pc, #492]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008678:	f023 0107 	bic.w	r1, r3, #7
 800867c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008682:	4a78      	ldr	r2, [pc, #480]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008684:	430b      	orrs	r3, r1
 8008686:	6513      	str	r3, [r2, #80]	@ 0x50
 8008688:	e003      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800868e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800869e:	f04f 0b00 	mov.w	fp, #0
 80086a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80086a6:	d04c      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80086a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086b2:	d030      	beq.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80086b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086b8:	d829      	bhi.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80086ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80086bc:	d02d      	beq.n	800871a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80086be:	2bc0      	cmp	r3, #192	@ 0xc0
 80086c0:	d825      	bhi.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80086c2:	2b80      	cmp	r3, #128	@ 0x80
 80086c4:	d018      	beq.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80086c6:	2b80      	cmp	r3, #128	@ 0x80
 80086c8:	d821      	bhi.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d002      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80086ce:	2b40      	cmp	r3, #64	@ 0x40
 80086d0:	d007      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80086d2:	e01c      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086d4:	4b63      	ldr	r3, [pc, #396]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d8:	4a62      	ldr	r2, [pc, #392]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80086e0:	e01c      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e6:	3308      	adds	r3, #8
 80086e8:	2100      	movs	r1, #0
 80086ea:	4618      	mov	r0, r3
 80086ec:	f001 fbe6 	bl	8009ebc <RCCEx_PLL2_Config>
 80086f0:	4603      	mov	r3, r0
 80086f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80086f6:	e011      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80086f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fc:	3328      	adds	r3, #40	@ 0x28
 80086fe:	2100      	movs	r1, #0
 8008700:	4618      	mov	r0, r3
 8008702:	f001 fc8d 	bl	800a020 <RCCEx_PLL3_Config>
 8008706:	4603      	mov	r3, r0
 8008708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800870c:	e006      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008714:	e002      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008716:	bf00      	nop
 8008718:	e000      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800871a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800871c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10a      	bne.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008724:	4b4f      	ldr	r3, [pc, #316]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008728:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800872c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008732:	4a4c      	ldr	r2, [pc, #304]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008734:	430b      	orrs	r3, r1
 8008736:	6513      	str	r3, [r2, #80]	@ 0x50
 8008738:	e003      	b.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800873a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800873e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800874e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008752:	2300      	movs	r3, #0
 8008754:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008758:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800875c:	460b      	mov	r3, r1
 800875e:	4313      	orrs	r3, r2
 8008760:	d053      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008766:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800876a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800876e:	d035      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008770:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008774:	d82e      	bhi.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008776:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800877a:	d031      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800877c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008780:	d828      	bhi.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008782:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008786:	d01a      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008788:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800878c:	d822      	bhi.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008792:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008796:	d007      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008798:	e01c      	b.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800879a:	4b32      	ldr	r3, [pc, #200]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800879c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879e:	4a31      	ldr	r2, [pc, #196]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087a6:	e01c      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ac:	3308      	adds	r3, #8
 80087ae:	2100      	movs	r1, #0
 80087b0:	4618      	mov	r0, r3
 80087b2:	f001 fb83 	bl	8009ebc <RCCEx_PLL2_Config>
 80087b6:	4603      	mov	r3, r0
 80087b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80087bc:	e011      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087c2:	3328      	adds	r3, #40	@ 0x28
 80087c4:	2100      	movs	r1, #0
 80087c6:	4618      	mov	r0, r3
 80087c8:	f001 fc2a 	bl	800a020 <RCCEx_PLL3_Config>
 80087cc:	4603      	mov	r3, r0
 80087ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087d2:	e006      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087da:	e002      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80087dc:	bf00      	nop
 80087de:	e000      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80087e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10b      	bne.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80087ea:	4b1e      	ldr	r3, [pc, #120]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087ee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80087f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80087fa:	4a1a      	ldr	r2, [pc, #104]	@ (8008864 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087fc:	430b      	orrs	r3, r1
 80087fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8008800:	e003      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008806:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800880a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008812:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008816:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800881a:	2300      	movs	r3, #0
 800881c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008820:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008824:	460b      	mov	r3, r1
 8008826:	4313      	orrs	r3, r2
 8008828:	d056      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800882a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800882e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008832:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008836:	d038      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008838:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800883c:	d831      	bhi.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800883e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008842:	d034      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008844:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008848:	d82b      	bhi.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800884a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800884e:	d01d      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008850:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008854:	d825      	bhi.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008856:	2b00      	cmp	r3, #0
 8008858:	d006      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800885a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800885e:	d00a      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008860:	e01f      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008862:	bf00      	nop
 8008864:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008868:	4ba2      	ldr	r3, [pc, #648]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800886a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886c:	4aa1      	ldr	r2, [pc, #644]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800886e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008874:	e01c      	b.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800887a:	3308      	adds	r3, #8
 800887c:	2100      	movs	r1, #0
 800887e:	4618      	mov	r0, r3
 8008880:	f001 fb1c 	bl	8009ebc <RCCEx_PLL2_Config>
 8008884:	4603      	mov	r3, r0
 8008886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800888a:	e011      	b.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800888c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008890:	3328      	adds	r3, #40	@ 0x28
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f001 fbc3 	bl	800a020 <RCCEx_PLL3_Config>
 800889a:	4603      	mov	r3, r0
 800889c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088a0:	e006      	b.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088a8:	e002      	b.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80088aa:	bf00      	nop
 80088ac:	e000      	b.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80088ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10b      	bne.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80088b8:	4b8e      	ldr	r3, [pc, #568]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80088c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80088c8:	4a8a      	ldr	r2, [pc, #552]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088ca:	430b      	orrs	r3, r1
 80088cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80088ce:	e003      	b.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80088d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80088e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80088e8:	2300      	movs	r3, #0
 80088ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80088ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80088f2:	460b      	mov	r3, r1
 80088f4:	4313      	orrs	r3, r2
 80088f6:	d03a      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80088f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088fe:	2b30      	cmp	r3, #48	@ 0x30
 8008900:	d01f      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008902:	2b30      	cmp	r3, #48	@ 0x30
 8008904:	d819      	bhi.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008906:	2b20      	cmp	r3, #32
 8008908:	d00c      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800890a:	2b20      	cmp	r3, #32
 800890c:	d815      	bhi.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800890e:	2b00      	cmp	r3, #0
 8008910:	d019      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008912:	2b10      	cmp	r3, #16
 8008914:	d111      	bne.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008916:	4b77      	ldr	r3, [pc, #476]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891a:	4a76      	ldr	r2, [pc, #472]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800891c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008920:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008922:	e011      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008928:	3308      	adds	r3, #8
 800892a:	2102      	movs	r1, #2
 800892c:	4618      	mov	r0, r3
 800892e:	f001 fac5 	bl	8009ebc <RCCEx_PLL2_Config>
 8008932:	4603      	mov	r3, r0
 8008934:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008938:	e006      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008940:	e002      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008942:	bf00      	nop
 8008944:	e000      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008950:	4b68      	ldr	r3, [pc, #416]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008954:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800895c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800895e:	4a65      	ldr	r2, [pc, #404]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008960:	430b      	orrs	r3, r1
 8008962:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008964:	e003      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800896a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800896e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800897a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800897e:	2300      	movs	r3, #0
 8008980:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008984:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008988:	460b      	mov	r3, r1
 800898a:	4313      	orrs	r3, r2
 800898c:	d051      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800898e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008994:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008998:	d035      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800899a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800899e:	d82e      	bhi.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80089a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089a4:	d031      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80089a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089aa:	d828      	bhi.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80089ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089b0:	d01a      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80089b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089b6:	d822      	bhi.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80089bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089c0:	d007      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80089c2:	e01c      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089c4:	4b4b      	ldr	r3, [pc, #300]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c8:	4a4a      	ldr	r2, [pc, #296]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80089d0:	e01c      	b.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d6:	3308      	adds	r3, #8
 80089d8:	2100      	movs	r1, #0
 80089da:	4618      	mov	r0, r3
 80089dc:	f001 fa6e 	bl	8009ebc <RCCEx_PLL2_Config>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80089e6:	e011      	b.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ec:	3328      	adds	r3, #40	@ 0x28
 80089ee:	2100      	movs	r1, #0
 80089f0:	4618      	mov	r0, r3
 80089f2:	f001 fb15 	bl	800a020 <RCCEx_PLL3_Config>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80089fc:	e006      	b.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a04:	e002      	b.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008a06:	bf00      	nop
 8008a08:	e000      	b.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008a0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10a      	bne.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008a14:	4b37      	ldr	r3, [pc, #220]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a22:	4a34      	ldr	r2, [pc, #208]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a24:	430b      	orrs	r3, r1
 8008a26:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a28:	e003      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008a42:	2300      	movs	r3, #0
 8008a44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008a48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	d056      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a5c:	d033      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008a5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a62:	d82c      	bhi.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a68:	d02f      	beq.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008a6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a6e:	d826      	bhi.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a74:	d02b      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008a76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a7a:	d820      	bhi.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a80:	d012      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008a82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a86:	d81a      	bhi.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d022      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a90:	d115      	bne.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a96:	3308      	adds	r3, #8
 8008a98:	2101      	movs	r1, #1
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f001 fa0e 	bl	8009ebc <RCCEx_PLL2_Config>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008aa6:	e015      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aac:	3328      	adds	r3, #40	@ 0x28
 8008aae:	2101      	movs	r1, #1
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f001 fab5 	bl	800a020 <RCCEx_PLL3_Config>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008abc:	e00a      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ac4:	e006      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ac6:	bf00      	nop
 8008ac8:	e004      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008aca:	bf00      	nop
 8008acc:	e002      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ace:	bf00      	nop
 8008ad0:	e000      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10d      	bne.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008adc:	4b05      	ldr	r3, [pc, #20]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ae0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ae8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008aea:	4a02      	ldr	r2, [pc, #8]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008aec:	430b      	orrs	r3, r1
 8008aee:	6513      	str	r3, [r2, #80]	@ 0x50
 8008af0:	e006      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008af2:	bf00      	nop
 8008af4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b10:	2300      	movs	r3, #0
 8008b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008b16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	d055      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b2c:	d033      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b32:	d82c      	bhi.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b38:	d02f      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b3e:	d826      	bhi.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b44:	d02b      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008b46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b4a:	d820      	bhi.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b50:	d012      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008b52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b56:	d81a      	bhi.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d022      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008b5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b60:	d115      	bne.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b66:	3308      	adds	r3, #8
 8008b68:	2101      	movs	r1, #1
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f001 f9a6 	bl	8009ebc <RCCEx_PLL2_Config>
 8008b70:	4603      	mov	r3, r0
 8008b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b76:	e015      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b7c:	3328      	adds	r3, #40	@ 0x28
 8008b7e:	2101      	movs	r1, #1
 8008b80:	4618      	mov	r0, r3
 8008b82:	f001 fa4d 	bl	800a020 <RCCEx_PLL3_Config>
 8008b86:	4603      	mov	r3, r0
 8008b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b8c:	e00a      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b94:	e006      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b96:	bf00      	nop
 8008b98:	e004      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b9a:	bf00      	nop
 8008b9c:	e002      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008b9e:	bf00      	nop
 8008ba0:	e000      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10b      	bne.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008bac:	4ba3      	ldr	r3, [pc, #652]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008bbc:	4a9f      	ldr	r2, [pc, #636]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bbe:	430b      	orrs	r3, r1
 8008bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bc2:	e003      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008be6:	460b      	mov	r3, r1
 8008be8:	4313      	orrs	r3, r2
 8008bea:	d037      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bf6:	d00e      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bfc:	d816      	bhi.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d018      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008c02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c06:	d111      	bne.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c08:	4b8c      	ldr	r3, [pc, #560]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0c:	4a8b      	ldr	r2, [pc, #556]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008c14:	e00f      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f001 f94c 	bl	8009ebc <RCCEx_PLL2_Config>
 8008c24:	4603      	mov	r3, r0
 8008c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008c2a:	e004      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c32:	e000      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10a      	bne.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c4c:	4a7b      	ldr	r2, [pc, #492]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c4e:	430b      	orrs	r3, r1
 8008c50:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c52:	e003      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008c72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	d039      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	d81c      	bhi.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008c86:	a201      	add	r2, pc, #4	@ (adr r2, 8008c8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8c:	08008cc9 	.word	0x08008cc9
 8008c90:	08008c9d 	.word	0x08008c9d
 8008c94:	08008cab 	.word	0x08008cab
 8008c98:	08008cc9 	.word	0x08008cc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c9c:	4b67      	ldr	r3, [pc, #412]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca0:	4a66      	ldr	r2, [pc, #408]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008ca8:	e00f      	b.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cae:	3308      	adds	r3, #8
 8008cb0:	2102      	movs	r1, #2
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f001 f902 	bl	8009ebc <RCCEx_PLL2_Config>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008cbe:	e004      	b.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cc6:	e000      	b.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10a      	bne.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008cd2:	4b5a      	ldr	r3, [pc, #360]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cd6:	f023 0103 	bic.w	r1, r3, #3
 8008cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ce0:	4a56      	ldr	r2, [pc, #344]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ce2:	430b      	orrs	r3, r1
 8008ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ce6:	e003      	b.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d00:	2300      	movs	r3, #0
 8008d02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	f000 809f 	beq.w	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d12:	4b4b      	ldr	r3, [pc, #300]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a4a      	ldr	r2, [pc, #296]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d1e:	f7fc fcdf 	bl	80056e0 <HAL_GetTick>
 8008d22:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d26:	e00b      	b.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d28:	f7fc fcda 	bl	80056e0 <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008d32:	1ad3      	subs	r3, r2, r3
 8008d34:	2b64      	cmp	r3, #100	@ 0x64
 8008d36:	d903      	bls.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d3e:	e005      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d40:	4b3f      	ldr	r3, [pc, #252]	@ (8008e40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d0ed      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d179      	bne.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d54:	4b39      	ldr	r3, [pc, #228]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008d60:	4053      	eors	r3, r2
 8008d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d015      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d6a:	4b34      	ldr	r3, [pc, #208]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d76:	4b31      	ldr	r3, [pc, #196]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d7a:	4a30      	ldr	r2, [pc, #192]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d80:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d82:	4b2e      	ldr	r3, [pc, #184]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d86:	4a2d      	ldr	r2, [pc, #180]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d8c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008d94:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008da2:	d118      	bne.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da4:	f7fc fc9c 	bl	80056e0 <HAL_GetTick>
 8008da8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dac:	e00d      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dae:	f7fc fc97 	bl	80056e0 <HAL_GetTick>
 8008db2:	4602      	mov	r2, r0
 8008db4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008db8:	1ad2      	subs	r2, r2, r3
 8008dba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d903      	bls.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008dc8:	e005      	b.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dca:	4b1c      	ldr	r3, [pc, #112]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dce:	f003 0302 	and.w	r3, r3, #2
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0eb      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d129      	bne.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dee:	d10e      	bne.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008df0:	4b12      	ldr	r3, [pc, #72]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e00:	091a      	lsrs	r2, r3, #4
 8008e02:	4b10      	ldr	r3, [pc, #64]	@ (8008e44 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008e04:	4013      	ands	r3, r2
 8008e06:	4a0d      	ldr	r2, [pc, #52]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	6113      	str	r3, [r2, #16]
 8008e0c:	e005      	b.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	4a0a      	ldr	r2, [pc, #40]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008e18:	6113      	str	r3, [r2, #16]
 8008e1a:	4b08      	ldr	r3, [pc, #32]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e1c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e2a:	4a04      	ldr	r2, [pc, #16]	@ (8008e3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e2c:	430b      	orrs	r3, r1
 8008e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e30:	e00e      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008e3a:	e009      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008e3c:	58024400 	.word	0x58024400
 8008e40:	58024800 	.word	0x58024800
 8008e44:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f002 0301 	and.w	r3, r2, #1
 8008e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e60:	2300      	movs	r3, #0
 8008e62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e66:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	f000 8089 	beq.w	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e78:	2b28      	cmp	r3, #40	@ 0x28
 8008e7a:	d86b      	bhi.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e82:	bf00      	nop
 8008e84:	08008f5d 	.word	0x08008f5d
 8008e88:	08008f55 	.word	0x08008f55
 8008e8c:	08008f55 	.word	0x08008f55
 8008e90:	08008f55 	.word	0x08008f55
 8008e94:	08008f55 	.word	0x08008f55
 8008e98:	08008f55 	.word	0x08008f55
 8008e9c:	08008f55 	.word	0x08008f55
 8008ea0:	08008f55 	.word	0x08008f55
 8008ea4:	08008f29 	.word	0x08008f29
 8008ea8:	08008f55 	.word	0x08008f55
 8008eac:	08008f55 	.word	0x08008f55
 8008eb0:	08008f55 	.word	0x08008f55
 8008eb4:	08008f55 	.word	0x08008f55
 8008eb8:	08008f55 	.word	0x08008f55
 8008ebc:	08008f55 	.word	0x08008f55
 8008ec0:	08008f55 	.word	0x08008f55
 8008ec4:	08008f3f 	.word	0x08008f3f
 8008ec8:	08008f55 	.word	0x08008f55
 8008ecc:	08008f55 	.word	0x08008f55
 8008ed0:	08008f55 	.word	0x08008f55
 8008ed4:	08008f55 	.word	0x08008f55
 8008ed8:	08008f55 	.word	0x08008f55
 8008edc:	08008f55 	.word	0x08008f55
 8008ee0:	08008f55 	.word	0x08008f55
 8008ee4:	08008f5d 	.word	0x08008f5d
 8008ee8:	08008f55 	.word	0x08008f55
 8008eec:	08008f55 	.word	0x08008f55
 8008ef0:	08008f55 	.word	0x08008f55
 8008ef4:	08008f55 	.word	0x08008f55
 8008ef8:	08008f55 	.word	0x08008f55
 8008efc:	08008f55 	.word	0x08008f55
 8008f00:	08008f55 	.word	0x08008f55
 8008f04:	08008f5d 	.word	0x08008f5d
 8008f08:	08008f55 	.word	0x08008f55
 8008f0c:	08008f55 	.word	0x08008f55
 8008f10:	08008f55 	.word	0x08008f55
 8008f14:	08008f55 	.word	0x08008f55
 8008f18:	08008f55 	.word	0x08008f55
 8008f1c:	08008f55 	.word	0x08008f55
 8008f20:	08008f55 	.word	0x08008f55
 8008f24:	08008f5d 	.word	0x08008f5d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f2c:	3308      	adds	r3, #8
 8008f2e:	2101      	movs	r1, #1
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 ffc3 	bl	8009ebc <RCCEx_PLL2_Config>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008f3c:	e00f      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f42:	3328      	adds	r3, #40	@ 0x28
 8008f44:	2101      	movs	r1, #1
 8008f46:	4618      	mov	r0, r3
 8008f48:	f001 f86a 	bl	800a020 <RCCEx_PLL3_Config>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008f52:	e004      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f5a:	e000      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10a      	bne.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f66:	4bbf      	ldr	r3, [pc, #764]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f6a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f74:	4abb      	ldr	r2, [pc, #748]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f76:	430b      	orrs	r3, r1
 8008f78:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f7a:	e003      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8c:	f002 0302 	and.w	r3, r2, #2
 8008f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f94:	2300      	movs	r3, #0
 8008f96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008f9a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	d041      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008faa:	2b05      	cmp	r3, #5
 8008fac:	d824      	bhi.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008fae:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb4:	08009001 	.word	0x08009001
 8008fb8:	08008fcd 	.word	0x08008fcd
 8008fbc:	08008fe3 	.word	0x08008fe3
 8008fc0:	08009001 	.word	0x08009001
 8008fc4:	08009001 	.word	0x08009001
 8008fc8:	08009001 	.word	0x08009001
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd0:	3308      	adds	r3, #8
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 ff71 	bl	8009ebc <RCCEx_PLL2_Config>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008fe0:	e00f      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe6:	3328      	adds	r3, #40	@ 0x28
 8008fe8:	2101      	movs	r1, #1
 8008fea:	4618      	mov	r0, r3
 8008fec:	f001 f818 	bl	800a020 <RCCEx_PLL3_Config>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008ff6:	e004      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ffe:	e000      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10a      	bne.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800900a:	4b96      	ldr	r3, [pc, #600]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800900c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800900e:	f023 0107 	bic.w	r1, r3, #7
 8009012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009016:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009018:	4a92      	ldr	r2, [pc, #584]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800901a:	430b      	orrs	r3, r1
 800901c:	6553      	str	r3, [r2, #84]	@ 0x54
 800901e:	e003      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009024:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009030:	f002 0304 	and.w	r3, r2, #4
 8009034:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009038:	2300      	movs	r3, #0
 800903a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800903e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009042:	460b      	mov	r3, r1
 8009044:	4313      	orrs	r3, r2
 8009046:	d044      	beq.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800904c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009050:	2b05      	cmp	r3, #5
 8009052:	d825      	bhi.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009054:	a201      	add	r2, pc, #4	@ (adr r2, 800905c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905a:	bf00      	nop
 800905c:	080090a9 	.word	0x080090a9
 8009060:	08009075 	.word	0x08009075
 8009064:	0800908b 	.word	0x0800908b
 8009068:	080090a9 	.word	0x080090a9
 800906c:	080090a9 	.word	0x080090a9
 8009070:	080090a9 	.word	0x080090a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009078:	3308      	adds	r3, #8
 800907a:	2101      	movs	r1, #1
 800907c:	4618      	mov	r0, r3
 800907e:	f000 ff1d 	bl	8009ebc <RCCEx_PLL2_Config>
 8009082:	4603      	mov	r3, r0
 8009084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009088:	e00f      	b.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800908a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800908e:	3328      	adds	r3, #40	@ 0x28
 8009090:	2101      	movs	r1, #1
 8009092:	4618      	mov	r0, r3
 8009094:	f000 ffc4 	bl	800a020 <RCCEx_PLL3_Config>
 8009098:	4603      	mov	r3, r0
 800909a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800909e:	e004      	b.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090a6:	e000      	b.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80090a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10b      	bne.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80090b2:	4b6c      	ldr	r3, [pc, #432]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090b6:	f023 0107 	bic.w	r1, r3, #7
 80090ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090c2:	4a68      	ldr	r2, [pc, #416]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090c4:	430b      	orrs	r3, r1
 80090c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80090c8:	e003      	b.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80090d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090da:	f002 0320 	and.w	r3, r2, #32
 80090de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80090e2:	2300      	movs	r3, #0
 80090e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80090ec:	460b      	mov	r3, r1
 80090ee:	4313      	orrs	r3, r2
 80090f0:	d055      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80090f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090fe:	d033      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009100:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009104:	d82c      	bhi.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800910a:	d02f      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800910c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009110:	d826      	bhi.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009112:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009116:	d02b      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009118:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800911c:	d820      	bhi.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800911e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009122:	d012      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009128:	d81a      	bhi.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800912a:	2b00      	cmp	r3, #0
 800912c:	d022      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800912e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009132:	d115      	bne.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009138:	3308      	adds	r3, #8
 800913a:	2100      	movs	r1, #0
 800913c:	4618      	mov	r0, r3
 800913e:	f000 febd 	bl	8009ebc <RCCEx_PLL2_Config>
 8009142:	4603      	mov	r3, r0
 8009144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009148:	e015      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800914a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800914e:	3328      	adds	r3, #40	@ 0x28
 8009150:	2102      	movs	r1, #2
 8009152:	4618      	mov	r0, r3
 8009154:	f000 ff64 	bl	800a020 <RCCEx_PLL3_Config>
 8009158:	4603      	mov	r3, r0
 800915a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800915e:	e00a      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009166:	e006      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009168:	bf00      	nop
 800916a:	e004      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800916c:	bf00      	nop
 800916e:	e002      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009170:	bf00      	nop
 8009172:	e000      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10b      	bne.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800917e:	4b39      	ldr	r3, [pc, #228]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009182:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800918a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800918e:	4a35      	ldr	r2, [pc, #212]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009190:	430b      	orrs	r3, r1
 8009192:	6553      	str	r3, [r2, #84]	@ 0x54
 8009194:	e003      	b.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800919a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800919e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80091aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80091ae:	2300      	movs	r3, #0
 80091b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80091b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4313      	orrs	r3, r2
 80091bc:	d058      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80091be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80091c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80091ca:	d033      	beq.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80091cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80091d0:	d82c      	bhi.n	800922c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80091d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091d6:	d02f      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80091d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091dc:	d826      	bhi.n	800922c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80091de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80091e2:	d02b      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80091e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80091e8:	d820      	bhi.n	800922c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80091ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091ee:	d012      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80091f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091f4:	d81a      	bhi.n	800922c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d022      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80091fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091fe:	d115      	bne.n	800922c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009204:	3308      	adds	r3, #8
 8009206:	2100      	movs	r1, #0
 8009208:	4618      	mov	r0, r3
 800920a:	f000 fe57 	bl	8009ebc <RCCEx_PLL2_Config>
 800920e:	4603      	mov	r3, r0
 8009210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009214:	e015      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800921a:	3328      	adds	r3, #40	@ 0x28
 800921c:	2102      	movs	r1, #2
 800921e:	4618      	mov	r0, r3
 8009220:	f000 fefe 	bl	800a020 <RCCEx_PLL3_Config>
 8009224:	4603      	mov	r3, r0
 8009226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800922a:	e00a      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009232:	e006      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009234:	bf00      	nop
 8009236:	e004      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009238:	bf00      	nop
 800923a:	e002      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800923c:	bf00      	nop
 800923e:	e000      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10e      	bne.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800924a:	4b06      	ldr	r3, [pc, #24]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800924c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800924e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009256:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800925a:	4a02      	ldr	r2, [pc, #8]	@ (8009264 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800925c:	430b      	orrs	r3, r1
 800925e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009260:	e006      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009262:	bf00      	nop
 8009264:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800926c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009278:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800927c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009280:	2300      	movs	r3, #0
 8009282:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009286:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800928a:	460b      	mov	r3, r1
 800928c:	4313      	orrs	r3, r2
 800928e:	d055      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009294:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009298:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800929c:	d033      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800929e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80092a2:	d82c      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092a8:	d02f      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80092aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092ae:	d826      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80092b4:	d02b      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80092b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80092ba:	d820      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092c0:	d012      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80092c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092c6:	d81a      	bhi.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d022      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80092cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d0:	d115      	bne.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d6:	3308      	adds	r3, #8
 80092d8:	2100      	movs	r1, #0
 80092da:	4618      	mov	r0, r3
 80092dc:	f000 fdee 	bl	8009ebc <RCCEx_PLL2_Config>
 80092e0:	4603      	mov	r3, r0
 80092e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80092e6:	e015      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ec:	3328      	adds	r3, #40	@ 0x28
 80092ee:	2102      	movs	r1, #2
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 fe95 	bl	800a020 <RCCEx_PLL3_Config>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80092fc:	e00a      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009304:	e006      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009306:	bf00      	nop
 8009308:	e004      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800930a:	bf00      	nop
 800930c:	e002      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800930e:	bf00      	nop
 8009310:	e000      	b.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10b      	bne.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800931c:	4ba1      	ldr	r3, [pc, #644]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800931e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009320:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009328:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800932c:	4a9d      	ldr	r2, [pc, #628]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800932e:	430b      	orrs	r3, r1
 8009330:	6593      	str	r3, [r2, #88]	@ 0x58
 8009332:	e003      	b.n	800933c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009338:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800933c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009344:	f002 0308 	and.w	r3, r2, #8
 8009348:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800934c:	2300      	movs	r3, #0
 800934e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009352:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009356:	460b      	mov	r3, r1
 8009358:	4313      	orrs	r3, r2
 800935a:	d01e      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800935c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009368:	d10c      	bne.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800936a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800936e:	3328      	adds	r3, #40	@ 0x28
 8009370:	2102      	movs	r1, #2
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fe54 	bl	800a020 <RCCEx_PLL3_Config>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009384:	4b87      	ldr	r3, [pc, #540]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009388:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800938c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009394:	4a83      	ldr	r2, [pc, #524]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009396:	430b      	orrs	r3, r1
 8009398:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800939a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	f002 0310 	and.w	r3, r2, #16
 80093a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093aa:	2300      	movs	r3, #0
 80093ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80093b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80093b4:	460b      	mov	r3, r1
 80093b6:	4313      	orrs	r3, r2
 80093b8:	d01e      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80093ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093c6:	d10c      	bne.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80093c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093cc:	3328      	adds	r3, #40	@ 0x28
 80093ce:	2102      	movs	r1, #2
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 fe25 	bl	800a020 <RCCEx_PLL3_Config>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d002      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80093e2:	4b70      	ldr	r3, [pc, #448]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80093ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093f2:	4a6c      	ldr	r2, [pc, #432]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093f4:	430b      	orrs	r3, r1
 80093f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80093f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009400:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009404:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009408:	2300      	movs	r3, #0
 800940a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800940e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009412:	460b      	mov	r3, r1
 8009414:	4313      	orrs	r3, r2
 8009416:	d03e      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800941c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009420:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009424:	d022      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009426:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800942a:	d81b      	bhi.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800942c:	2b00      	cmp	r3, #0
 800942e:	d003      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009434:	d00b      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009436:	e015      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943c:	3308      	adds	r3, #8
 800943e:	2100      	movs	r1, #0
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fd3b 	bl	8009ebc <RCCEx_PLL2_Config>
 8009446:	4603      	mov	r3, r0
 8009448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800944c:	e00f      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800944e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009452:	3328      	adds	r3, #40	@ 0x28
 8009454:	2102      	movs	r1, #2
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fde2 	bl	800a020 <RCCEx_PLL3_Config>
 800945c:	4603      	mov	r3, r0
 800945e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009462:	e004      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800946a:	e000      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800946c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800946e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10b      	bne.n	800948e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009476:	4b4b      	ldr	r3, [pc, #300]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800947a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800947e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009482:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009486:	4a47      	ldr	r2, [pc, #284]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009488:	430b      	orrs	r3, r1
 800948a:	6593      	str	r3, [r2, #88]	@ 0x58
 800948c:	e003      	b.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009492:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80094a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80094a4:	2300      	movs	r3, #0
 80094a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80094ac:	460b      	mov	r3, r1
 80094ae:	4313      	orrs	r3, r2
 80094b0:	d03b      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80094b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80094be:	d01f      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80094c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80094c4:	d818      	bhi.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80094c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094ca:	d003      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80094cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094d0:	d007      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80094d2:	e011      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094d4:	4b33      	ldr	r3, [pc, #204]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d8:	4a32      	ldr	r2, [pc, #200]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80094e0:	e00f      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e6:	3328      	adds	r3, #40	@ 0x28
 80094e8:	2101      	movs	r1, #1
 80094ea:	4618      	mov	r0, r3
 80094ec:	f000 fd98 	bl	800a020 <RCCEx_PLL3_Config>
 80094f0:	4603      	mov	r3, r0
 80094f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80094f6:	e004      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094fe:	e000      	b.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10b      	bne.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800950a:	4b26      	ldr	r3, [pc, #152]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800950c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800950e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800951a:	4a22      	ldr	r2, [pc, #136]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800951c:	430b      	orrs	r3, r1
 800951e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009520:	e003      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009526:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800952a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009536:	673b      	str	r3, [r7, #112]	@ 0x70
 8009538:	2300      	movs	r3, #0
 800953a:	677b      	str	r3, [r7, #116]	@ 0x74
 800953c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009540:	460b      	mov	r3, r1
 8009542:	4313      	orrs	r3, r2
 8009544:	d034      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800954a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800954c:	2b00      	cmp	r3, #0
 800954e:	d003      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009554:	d007      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009556:	e011      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009558:	4b12      	ldr	r3, [pc, #72]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800955a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800955c:	4a11      	ldr	r2, [pc, #68]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800955e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009564:	e00e      	b.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800956a:	3308      	adds	r3, #8
 800956c:	2102      	movs	r1, #2
 800956e:	4618      	mov	r0, r3
 8009570:	f000 fca4 	bl	8009ebc <RCCEx_PLL2_Config>
 8009574:	4603      	mov	r3, r0
 8009576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800957a:	e003      	b.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10d      	bne.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800958c:	4b05      	ldr	r3, [pc, #20]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800958e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009590:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800959a:	4a02      	ldr	r2, [pc, #8]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800959c:	430b      	orrs	r3, r1
 800959e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095a0:	e006      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80095a2:	bf00      	nop
 80095a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80095b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80095bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80095be:	2300      	movs	r3, #0
 80095c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80095c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80095c6:	460b      	mov	r3, r1
 80095c8:	4313      	orrs	r3, r2
 80095ca:	d00c      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80095cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d0:	3328      	adds	r3, #40	@ 0x28
 80095d2:	2102      	movs	r1, #2
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 fd23 	bl	800a020 <RCCEx_PLL3_Config>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80095e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80095f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80095f4:	2300      	movs	r3, #0
 80095f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80095f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80095fc:	460b      	mov	r3, r1
 80095fe:	4313      	orrs	r3, r2
 8009600:	d038      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800960a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800960e:	d018      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009610:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009614:	d811      	bhi.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009616:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800961a:	d014      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800961c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009620:	d80b      	bhi.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009622:	2b00      	cmp	r3, #0
 8009624:	d011      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800962a:	d106      	bne.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800962c:	4bc3      	ldr	r3, [pc, #780]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800962e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009630:	4ac2      	ldr	r2, [pc, #776]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009638:	e008      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009640:	e004      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009642:	bf00      	nop
 8009644:	e002      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009646:	bf00      	nop
 8009648:	e000      	b.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800964a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800964c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10b      	bne.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009654:	4bb9      	ldr	r3, [pc, #740]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009658:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800965c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009664:	4ab5      	ldr	r2, [pc, #724]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009666:	430b      	orrs	r3, r1
 8009668:	6553      	str	r3, [r2, #84]	@ 0x54
 800966a:	e003      	b.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800966c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009670:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009680:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009682:	2300      	movs	r3, #0
 8009684:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009686:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800968a:	460b      	mov	r3, r1
 800968c:	4313      	orrs	r3, r2
 800968e:	d009      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009690:	4baa      	ldr	r3, [pc, #680]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009694:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800969c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800969e:	4aa7      	ldr	r2, [pc, #668]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096a0:	430b      	orrs	r3, r1
 80096a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80096a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80096b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80096b2:	2300      	movs	r3, #0
 80096b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80096b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80096ba:	460b      	mov	r3, r1
 80096bc:	4313      	orrs	r3, r2
 80096be:	d00a      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80096c0:	4b9e      	ldr	r3, [pc, #632]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80096c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80096d0:	4a9a      	ldr	r2, [pc, #616]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096d2:	430b      	orrs	r3, r1
 80096d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80096d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80096e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096e4:	2300      	movs	r3, #0
 80096e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80096ec:	460b      	mov	r3, r1
 80096ee:	4313      	orrs	r3, r2
 80096f0:	d009      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80096f2:	4b92      	ldr	r3, [pc, #584]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096f6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80096fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009700:	4a8e      	ldr	r2, [pc, #568]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009702:	430b      	orrs	r3, r1
 8009704:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009712:	643b      	str	r3, [r7, #64]	@ 0x40
 8009714:	2300      	movs	r3, #0
 8009716:	647b      	str	r3, [r7, #68]	@ 0x44
 8009718:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800971c:	460b      	mov	r3, r1
 800971e:	4313      	orrs	r3, r2
 8009720:	d00e      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009722:	4b86      	ldr	r3, [pc, #536]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	4a85      	ldr	r2, [pc, #532]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009728:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800972c:	6113      	str	r3, [r2, #16]
 800972e:	4b83      	ldr	r3, [pc, #524]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009730:	6919      	ldr	r1, [r3, #16]
 8009732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009736:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800973a:	4a80      	ldr	r2, [pc, #512]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800973c:	430b      	orrs	r3, r1
 800973e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800974c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800974e:	2300      	movs	r3, #0
 8009750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009752:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009756:	460b      	mov	r3, r1
 8009758:	4313      	orrs	r3, r2
 800975a:	d009      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800975c:	4b77      	ldr	r3, [pc, #476]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800975e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009760:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800976a:	4a74      	ldr	r2, [pc, #464]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800976c:	430b      	orrs	r3, r1
 800976e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800977c:	633b      	str	r3, [r7, #48]	@ 0x30
 800977e:	2300      	movs	r3, #0
 8009780:	637b      	str	r3, [r7, #52]	@ 0x34
 8009782:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009786:	460b      	mov	r3, r1
 8009788:	4313      	orrs	r3, r2
 800978a:	d00a      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800978c:	4b6b      	ldr	r3, [pc, #428]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800978e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009790:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800979c:	4a67      	ldr	r2, [pc, #412]	@ (800993c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800979e:	430b      	orrs	r3, r1
 80097a0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80097a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	2100      	movs	r1, #0
 80097ac:	62b9      	str	r1, [r7, #40]	@ 0x28
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80097b8:	460b      	mov	r3, r1
 80097ba:	4313      	orrs	r3, r2
 80097bc:	d011      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c2:	3308      	adds	r3, #8
 80097c4:	2100      	movs	r1, #0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 fb78 	bl	8009ebc <RCCEx_PLL2_Config>
 80097cc:	4603      	mov	r3, r0
 80097ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80097d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80097e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ea:	2100      	movs	r1, #0
 80097ec:	6239      	str	r1, [r7, #32]
 80097ee:	f003 0302 	and.w	r3, r3, #2
 80097f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80097f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80097f8:	460b      	mov	r3, r1
 80097fa:	4313      	orrs	r3, r2
 80097fc:	d011      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009802:	3308      	adds	r3, #8
 8009804:	2101      	movs	r1, #1
 8009806:	4618      	mov	r0, r3
 8009808:	f000 fb58 	bl	8009ebc <RCCEx_PLL2_Config>
 800980c:	4603      	mov	r3, r0
 800980e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800981a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800981e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	2100      	movs	r1, #0
 800982c:	61b9      	str	r1, [r7, #24]
 800982e:	f003 0304 	and.w	r3, r3, #4
 8009832:	61fb      	str	r3, [r7, #28]
 8009834:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009838:	460b      	mov	r3, r1
 800983a:	4313      	orrs	r3, r2
 800983c:	d011      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800983e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009842:	3308      	adds	r3, #8
 8009844:	2102      	movs	r1, #2
 8009846:	4618      	mov	r0, r3
 8009848:	f000 fb38 	bl	8009ebc <RCCEx_PLL2_Config>
 800984c:	4603      	mov	r3, r0
 800984e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800985a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800985e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986a:	2100      	movs	r1, #0
 800986c:	6139      	str	r1, [r7, #16]
 800986e:	f003 0308 	and.w	r3, r3, #8
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009878:	460b      	mov	r3, r1
 800987a:	4313      	orrs	r3, r2
 800987c:	d011      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800987e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009882:	3328      	adds	r3, #40	@ 0x28
 8009884:	2100      	movs	r1, #0
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fbca 	bl	800a020 <RCCEx_PLL3_Config>
 800988c:	4603      	mov	r3, r0
 800988e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800989a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800989e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80098a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098aa:	2100      	movs	r1, #0
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	f003 0310 	and.w	r3, r3, #16
 80098b2:	60fb      	str	r3, [r7, #12]
 80098b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80098b8:	460b      	mov	r3, r1
 80098ba:	4313      	orrs	r3, r2
 80098bc:	d011      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c2:	3328      	adds	r3, #40	@ 0x28
 80098c4:	2101      	movs	r1, #1
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fbaa 	bl	800a020 <RCCEx_PLL3_Config>
 80098cc:	4603      	mov	r3, r0
 80098ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80098d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80098e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ea:	2100      	movs	r1, #0
 80098ec:	6039      	str	r1, [r7, #0]
 80098ee:	f003 0320 	and.w	r3, r3, #32
 80098f2:	607b      	str	r3, [r7, #4]
 80098f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80098f8:	460b      	mov	r3, r1
 80098fa:	4313      	orrs	r3, r2
 80098fc:	d011      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009902:	3328      	adds	r3, #40	@ 0x28
 8009904:	2102      	movs	r1, #2
 8009906:	4618      	mov	r0, r3
 8009908:	f000 fb8a 	bl	800a020 <RCCEx_PLL3_Config>
 800990c:	4603      	mov	r3, r0
 800990e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800991a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800991e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009922:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	e000      	b.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
}
 8009930:	4618      	mov	r0, r3
 8009932:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009936:	46bd      	mov	sp, r7
 8009938:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800993c:	58024400 	.word	0x58024400

08009940 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009944:	f7fe fd54 	bl	80083f0 <HAL_RCC_GetHCLKFreq>
 8009948:	4602      	mov	r2, r0
 800994a:	4b06      	ldr	r3, [pc, #24]	@ (8009964 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	091b      	lsrs	r3, r3, #4
 8009950:	f003 0307 	and.w	r3, r3, #7
 8009954:	4904      	ldr	r1, [pc, #16]	@ (8009968 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009956:	5ccb      	ldrb	r3, [r1, r3]
 8009958:	f003 031f 	and.w	r3, r3, #31
 800995c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009960:	4618      	mov	r0, r3
 8009962:	bd80      	pop	{r7, pc}
 8009964:	58024400 	.word	0x58024400
 8009968:	0800e16c 	.word	0x0800e16c

0800996c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800996c:	b480      	push	{r7}
 800996e:	b089      	sub	sp, #36	@ 0x24
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009974:	4ba1      	ldr	r3, [pc, #644]	@ (8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009978:	f003 0303 	and.w	r3, r3, #3
 800997c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800997e:	4b9f      	ldr	r3, [pc, #636]	@ (8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009982:	0b1b      	lsrs	r3, r3, #12
 8009984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009988:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800998a:	4b9c      	ldr	r3, [pc, #624]	@ (8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800998c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800998e:	091b      	lsrs	r3, r3, #4
 8009990:	f003 0301 	and.w	r3, r3, #1
 8009994:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009996:	4b99      	ldr	r3, [pc, #612]	@ (8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800999a:	08db      	lsrs	r3, r3, #3
 800999c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	fb02 f303 	mul.w	r3, r2, r3
 80099a6:	ee07 3a90 	vmov	s15, r3
 80099aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 8111 	beq.w	8009bdc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	2b02      	cmp	r3, #2
 80099be:	f000 8083 	beq.w	8009ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	f200 80a1 	bhi.w	8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d056      	beq.n	8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80099d6:	e099      	b.n	8009b0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099d8:	4b88      	ldr	r3, [pc, #544]	@ (8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0320 	and.w	r3, r3, #32
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d02d      	beq.n	8009a40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099e4:	4b85      	ldr	r3, [pc, #532]	@ (8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	08db      	lsrs	r3, r3, #3
 80099ea:	f003 0303 	and.w	r3, r3, #3
 80099ee:	4a84      	ldr	r2, [pc, #528]	@ (8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80099f0:	fa22 f303 	lsr.w	r3, r2, r3
 80099f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	ee07 3a90 	vmov	s15, r3
 80099fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	ee07 3a90 	vmov	s15, r3
 8009a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a0e:	4b7b      	ldr	r3, [pc, #492]	@ (8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a16:	ee07 3a90 	vmov	s15, r3
 8009a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009a3e:	e087      	b.n	8009b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	ee07 3a90 	vmov	s15, r3
 8009a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009c08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a52:	4b6a      	ldr	r3, [pc, #424]	@ (8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a5a:	ee07 3a90 	vmov	s15, r3
 8009a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a82:	e065      	b.n	8009b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	ee07 3a90 	vmov	s15, r3
 8009a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009c0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a96:	4b59      	ldr	r3, [pc, #356]	@ (8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a9e:	ee07 3a90 	vmov	s15, r3
 8009aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aaa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ac6:	e043      	b.n	8009b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	ee07 3a90 	vmov	s15, r3
 8009ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ada:	4b48      	ldr	r3, [pc, #288]	@ (8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae2:	ee07 3a90 	vmov	s15, r3
 8009ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009aee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b0a:	e021      	b.n	8009b50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	ee07 3a90 	vmov	s15, r3
 8009b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009c0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b1e:	4b37      	ldr	r3, [pc, #220]	@ (8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b26:	ee07 3a90 	vmov	s15, r3
 8009b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009c04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009b50:	4b2a      	ldr	r3, [pc, #168]	@ (8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b54:	0a5b      	lsrs	r3, r3, #9
 8009b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b5a:	ee07 3a90 	vmov	s15, r3
 8009b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b76:	ee17 2a90 	vmov	r2, s15
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b82:	0c1b      	lsrs	r3, r3, #16
 8009b84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b88:	ee07 3a90 	vmov	s15, r3
 8009b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009b94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b98:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ba4:	ee17 2a90 	vmov	r2, s15
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009bac:	4b13      	ldr	r3, [pc, #76]	@ (8009bfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb0:	0e1b      	lsrs	r3, r3, #24
 8009bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bb6:	ee07 3a90 	vmov	s15, r3
 8009bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009bc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bd2:	ee17 2a90 	vmov	r2, s15
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009bda:	e008      	b.n	8009bee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	609a      	str	r2, [r3, #8]
}
 8009bee:	bf00      	nop
 8009bf0:	3724      	adds	r7, #36	@ 0x24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	58024400 	.word	0x58024400
 8009c00:	03d09000 	.word	0x03d09000
 8009c04:	46000000 	.word	0x46000000
 8009c08:	4c742400 	.word	0x4c742400
 8009c0c:	4a742400 	.word	0x4a742400
 8009c10:	4af42400 	.word	0x4af42400

08009c14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b089      	sub	sp, #36	@ 0x24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c1c:	4ba1      	ldr	r3, [pc, #644]	@ (8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c20:	f003 0303 	and.w	r3, r3, #3
 8009c24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009c26:	4b9f      	ldr	r3, [pc, #636]	@ (8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c2a:	0d1b      	lsrs	r3, r3, #20
 8009c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c32:	4b9c      	ldr	r3, [pc, #624]	@ (8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c36:	0a1b      	lsrs	r3, r3, #8
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009c3e:	4b99      	ldr	r3, [pc, #612]	@ (8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c42:	08db      	lsrs	r3, r3, #3
 8009c44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	fb02 f303 	mul.w	r3, r2, r3
 8009c4e:	ee07 3a90 	vmov	s15, r3
 8009c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 8111 	beq.w	8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	f000 8083 	beq.w	8009d70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	f200 80a1 	bhi.w	8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d003      	beq.n	8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d056      	beq.n	8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009c7e:	e099      	b.n	8009db4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c80:	4b88      	ldr	r3, [pc, #544]	@ (8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0320 	and.w	r3, r3, #32
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d02d      	beq.n	8009ce8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c8c:	4b85      	ldr	r3, [pc, #532]	@ (8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	08db      	lsrs	r3, r3, #3
 8009c92:	f003 0303 	and.w	r3, r3, #3
 8009c96:	4a84      	ldr	r2, [pc, #528]	@ (8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009c98:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	ee07 3a90 	vmov	s15, r3
 8009ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb6:	4b7b      	ldr	r3, [pc, #492]	@ (8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cbe:	ee07 3a90 	vmov	s15, r3
 8009cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ce6:	e087      	b.n	8009df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	ee07 3a90 	vmov	s15, r3
 8009cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d02:	ee07 3a90 	vmov	s15, r3
 8009d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d2a:	e065      	b.n	8009df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d3e:	4b59      	ldr	r3, [pc, #356]	@ (8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d6e:	e043      	b.n	8009df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d82:	4b48      	ldr	r3, [pc, #288]	@ (8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8a:	ee07 3a90 	vmov	s15, r3
 8009d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009db2:	e021      	b.n	8009df8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	ee07 3a90 	vmov	s15, r3
 8009dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc6:	4b37      	ldr	r3, [pc, #220]	@ (8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009eac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009df6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009df8:	4b2a      	ldr	r3, [pc, #168]	@ (8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dfc:	0a5b      	lsrs	r3, r3, #9
 8009dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e02:	ee07 3a90 	vmov	s15, r3
 8009e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e1e:	ee17 2a90 	vmov	r2, s15
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009e26:	4b1f      	ldr	r3, [pc, #124]	@ (8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e2a:	0c1b      	lsrs	r3, r3, #16
 8009e2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e30:	ee07 3a90 	vmov	s15, r3
 8009e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e40:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e4c:	ee17 2a90 	vmov	r2, s15
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009e54:	4b13      	ldr	r3, [pc, #76]	@ (8009ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e58:	0e1b      	lsrs	r3, r3, #24
 8009e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e5e:	ee07 3a90 	vmov	s15, r3
 8009e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e7a:	ee17 2a90 	vmov	r2, s15
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009e82:	e008      	b.n	8009e96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	609a      	str	r2, [r3, #8]
}
 8009e96:	bf00      	nop
 8009e98:	3724      	adds	r7, #36	@ 0x24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	58024400 	.word	0x58024400
 8009ea8:	03d09000 	.word	0x03d09000
 8009eac:	46000000 	.word	0x46000000
 8009eb0:	4c742400 	.word	0x4c742400
 8009eb4:	4a742400 	.word	0x4a742400
 8009eb8:	4af42400 	.word	0x4af42400

08009ebc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009eca:	4b53      	ldr	r3, [pc, #332]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ece:	f003 0303 	and.w	r3, r3, #3
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d101      	bne.n	8009eda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e099      	b.n	800a00e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009eda:	4b4f      	ldr	r3, [pc, #316]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a4e      	ldr	r2, [pc, #312]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009ee0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ee6:	f7fb fbfb 	bl	80056e0 <HAL_GetTick>
 8009eea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009eec:	e008      	b.n	8009f00 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009eee:	f7fb fbf7 	bl	80056e0 <HAL_GetTick>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d901      	bls.n	8009f00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e086      	b.n	800a00e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f00:	4b45      	ldr	r3, [pc, #276]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d1f0      	bne.n	8009eee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009f0c:	4b42      	ldr	r3, [pc, #264]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f10:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	031b      	lsls	r3, r3, #12
 8009f1a:	493f      	ldr	r1, [pc, #252]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	025b      	lsls	r3, r3, #9
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	431a      	orrs	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	041b      	lsls	r3, r3, #16
 8009f3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009f42:	431a      	orrs	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	061b      	lsls	r3, r3, #24
 8009f4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009f50:	4931      	ldr	r1, [pc, #196]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f52:	4313      	orrs	r3, r2
 8009f54:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009f56:	4b30      	ldr	r3, [pc, #192]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	492d      	ldr	r1, [pc, #180]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009f68:	4b2b      	ldr	r3, [pc, #172]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f6c:	f023 0220 	bic.w	r2, r3, #32
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	699b      	ldr	r3, [r3, #24]
 8009f74:	4928      	ldr	r1, [pc, #160]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f76:	4313      	orrs	r3, r2
 8009f78:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009f7a:	4b27      	ldr	r3, [pc, #156]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f7e:	4a26      	ldr	r2, [pc, #152]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f80:	f023 0310 	bic.w	r3, r3, #16
 8009f84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009f86:	4b24      	ldr	r3, [pc, #144]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f8a:	4b24      	ldr	r3, [pc, #144]	@ (800a01c <RCCEx_PLL2_Config+0x160>)
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	69d2      	ldr	r2, [r2, #28]
 8009f92:	00d2      	lsls	r2, r2, #3
 8009f94:	4920      	ldr	r1, [pc, #128]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009f9a:	4b1f      	ldr	r3, [pc, #124]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f9e:	4a1e      	ldr	r2, [pc, #120]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fa0:	f043 0310 	orr.w	r3, r3, #16
 8009fa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d106      	bne.n	8009fba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009fac:	4b1a      	ldr	r3, [pc, #104]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb0:	4a19      	ldr	r2, [pc, #100]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009fb8:	e00f      	b.n	8009fda <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d106      	bne.n	8009fce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009fc0:	4b15      	ldr	r3, [pc, #84]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc4:	4a14      	ldr	r2, [pc, #80]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009fca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009fcc:	e005      	b.n	8009fda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009fce:	4b12      	ldr	r3, [pc, #72]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd2:	4a11      	ldr	r2, [pc, #68]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009fda:	4b0f      	ldr	r3, [pc, #60]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a0e      	ldr	r2, [pc, #56]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 8009fe0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fe6:	f7fb fb7b 	bl	80056e0 <HAL_GetTick>
 8009fea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009fec:	e008      	b.n	800a000 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009fee:	f7fb fb77 	bl	80056e0 <HAL_GetTick>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d901      	bls.n	800a000 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	e006      	b.n	800a00e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a000:	4b05      	ldr	r3, [pc, #20]	@ (800a018 <RCCEx_PLL2_Config+0x15c>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d0f0      	beq.n	8009fee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	58024400 	.word	0x58024400
 800a01c:	ffff0007 	.word	0xffff0007

0800a020 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a02e:	4b53      	ldr	r3, [pc, #332]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a032:	f003 0303 	and.w	r3, r3, #3
 800a036:	2b03      	cmp	r3, #3
 800a038:	d101      	bne.n	800a03e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e099      	b.n	800a172 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a03e:	4b4f      	ldr	r3, [pc, #316]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a4e      	ldr	r2, [pc, #312]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a044:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a048:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a04a:	f7fb fb49 	bl	80056e0 <HAL_GetTick>
 800a04e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a050:	e008      	b.n	800a064 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a052:	f7fb fb45 	bl	80056e0 <HAL_GetTick>
 800a056:	4602      	mov	r2, r0
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d901      	bls.n	800a064 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e086      	b.n	800a172 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a064:	4b45      	ldr	r3, [pc, #276]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1f0      	bne.n	800a052 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a070:	4b42      	ldr	r3, [pc, #264]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a074:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	051b      	lsls	r3, r3, #20
 800a07e:	493f      	ldr	r1, [pc, #252]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a080:	4313      	orrs	r3, r2
 800a082:	628b      	str	r3, [r1, #40]	@ 0x28
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	3b01      	subs	r3, #1
 800a08a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	3b01      	subs	r3, #1
 800a094:	025b      	lsls	r3, r3, #9
 800a096:	b29b      	uxth	r3, r3
 800a098:	431a      	orrs	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	041b      	lsls	r3, r3, #16
 800a0a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	061b      	lsls	r3, r3, #24
 800a0b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a0b4:	4931      	ldr	r1, [pc, #196]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a0ba:	4b30      	ldr	r3, [pc, #192]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	695b      	ldr	r3, [r3, #20]
 800a0c6:	492d      	ldr	r1, [pc, #180]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a0cc:	4b2b      	ldr	r3, [pc, #172]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	4928      	ldr	r1, [pc, #160]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a0de:	4b27      	ldr	r3, [pc, #156]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e2:	4a26      	ldr	r2, [pc, #152]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a0ea:	4b24      	ldr	r3, [pc, #144]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0ee:	4b24      	ldr	r3, [pc, #144]	@ (800a180 <RCCEx_PLL3_Config+0x160>)
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	69d2      	ldr	r2, [r2, #28]
 800a0f6:	00d2      	lsls	r2, r2, #3
 800a0f8:	4920      	ldr	r1, [pc, #128]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a0fe:	4b1f      	ldr	r3, [pc, #124]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a102:	4a1e      	ldr	r2, [pc, #120]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a108:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d106      	bne.n	800a11e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a110:	4b1a      	ldr	r3, [pc, #104]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a114:	4a19      	ldr	r2, [pc, #100]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a116:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a11a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a11c:	e00f      	b.n	800a13e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d106      	bne.n	800a132 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a124:	4b15      	ldr	r3, [pc, #84]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a128:	4a14      	ldr	r2, [pc, #80]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a12a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a12e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a130:	e005      	b.n	800a13e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a132:	4b12      	ldr	r3, [pc, #72]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a136:	4a11      	ldr	r2, [pc, #68]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a138:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a13c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a13e:	4b0f      	ldr	r3, [pc, #60]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a0e      	ldr	r2, [pc, #56]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a14a:	f7fb fac9 	bl	80056e0 <HAL_GetTick>
 800a14e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a150:	e008      	b.n	800a164 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a152:	f7fb fac5 	bl	80056e0 <HAL_GetTick>
 800a156:	4602      	mov	r2, r0
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	1ad3      	subs	r3, r2, r3
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d901      	bls.n	800a164 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	e006      	b.n	800a172 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a164:	4b05      	ldr	r3, [pc, #20]	@ (800a17c <RCCEx_PLL3_Config+0x15c>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d0f0      	beq.n	800a152 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a170:	7bfb      	ldrb	r3, [r7, #15]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	58024400 	.word	0x58024400
 800a180:	ffff0007 	.word	0xffff0007

0800a184 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e054      	b.n	800a240 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	7a5b      	ldrb	r3, [r3, #9]
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d105      	bne.n	800a1ac <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7fa fd68 	bl	8004c7c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f023 0120 	bic.w	r1, r3, #32
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685a      	ldr	r2, [r3, #4]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f042 0204 	orr.w	r2, r2, #4
 800a1d6:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1e2:	2b40      	cmp	r3, #64	@ 0x40
 800a1e4:	d104      	bne.n	800a1f0 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2204      	movs	r2, #4
 800a1ea:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e027      	b.n	800a240 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a1f0:	f7fb fa76 	bl	80056e0 <HAL_GetTick>
 800a1f4:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a1f6:	e015      	b.n	800a224 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a1f8:	f7fb fa72 	bl	80056e0 <HAL_GetTick>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	1ad3      	subs	r3, r2, r3
 800a202:	2b02      	cmp	r3, #2
 800a204:	d90e      	bls.n	800a224 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	f003 0301 	and.w	r3, r3, #1
 800a210:	2b01      	cmp	r3, #1
 800a212:	d007      	beq.n	800a224 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2204      	movs	r2, #4
 800a218:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2202      	movs	r2, #2
 800a21e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e00d      	b.n	800a240 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d1e2      	bne.n	800a1f8 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3710      	adds	r7, #16
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 800a250:	2300      	movs	r3, #0
 800a252:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	f003 0320 	and.w	r3, r3, #32
 800a262:	2b00      	cmp	r3, #0
 800a264:	d005      	beq.n	800a272 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2210      	movs	r2, #16
 800a26a:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 800a26c:	2301      	movs	r3, #1
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	e01f      	b.n	800a2b2 <HAL_RNG_IRQHandler+0x6a>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01a      	beq.n	800a2b2 <HAL_RNG_IRQHandler+0x6a>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if ((itflag & RNG_FLAG_SECS) != RNG_FLAG_SECS)
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	f003 0304 	and.w	r3, r3, #4
 800a282:	2b00      	cmp	r3, #0
 800a284:	d108      	bne.n	800a298 <HAL_RNG_IRQHandler+0x50>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	685a      	ldr	r2, [r3, #4]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a294:	605a      	str	r2, [r3, #4]
 800a296:	e00c      	b.n	800a2b2 <HAL_RNG_IRQHandler+0x6a>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2208      	movs	r2, #8
 800a29c:	60da      	str	r2, [r3, #12]
      rngclockerror = 1U;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f022 0208 	bic.w	r2, r2, #8
 800a2b0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d10b      	bne.n	800a2d0 <HAL_RNG_IRQHandler+0x88>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2204      	movs	r2, #4
 800a2bc:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f837 	bl	800a332 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 800a2cc:	605a      	str	r2, [r3, #4]

    return;
 800a2ce:	e022      	b.n	800a316 <HAL_RNG_IRQHandler+0xce>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	f003 0301 	and.w	r3, r3, #1
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d01d      	beq.n	800a316 <HAL_RNG_IRQHandler+0xce>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f022 0208 	bic.w	r2, r2, #8
 800a2e8:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689a      	ldr	r2, [r3, #8]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	7a5b      	ldrb	r3, [r3, #9]
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b04      	cmp	r3, #4
 800a2fc:	d00b      	beq.n	800a316 <HAL_RNG_IRQHandler+0xce>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2200      	movs	r2, #0
 800a308:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f803 	bl	800a31c <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 800a326:	bf00      	nop
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800a332:	b480      	push	{r7}
 800a334:	b083      	sub	sp, #12
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800a33a:	bf00      	nop
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	e10f      	b.n	800a57a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a87      	ldr	r2, [pc, #540]	@ (800a584 <HAL_SPI_Init+0x23c>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d00f      	beq.n	800a38a <HAL_SPI_Init+0x42>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a86      	ldr	r2, [pc, #536]	@ (800a588 <HAL_SPI_Init+0x240>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d00a      	beq.n	800a38a <HAL_SPI_Init+0x42>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a84      	ldr	r2, [pc, #528]	@ (800a58c <HAL_SPI_Init+0x244>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d005      	beq.n	800a38a <HAL_SPI_Init+0x42>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	2b0f      	cmp	r3, #15
 800a384:	d901      	bls.n	800a38a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e0f7      	b.n	800a57a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fbbc 	bl	800ab08 <SPI_GetPacketSize>
 800a390:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a7b      	ldr	r2, [pc, #492]	@ (800a584 <HAL_SPI_Init+0x23c>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d00c      	beq.n	800a3b6 <HAL_SPI_Init+0x6e>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a79      	ldr	r2, [pc, #484]	@ (800a588 <HAL_SPI_Init+0x240>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d007      	beq.n	800a3b6 <HAL_SPI_Init+0x6e>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a78      	ldr	r2, [pc, #480]	@ (800a58c <HAL_SPI_Init+0x244>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d002      	beq.n	800a3b6 <HAL_SPI_Init+0x6e>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2b08      	cmp	r3, #8
 800a3b4:	d811      	bhi.n	800a3da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a3ba:	4a72      	ldr	r2, [pc, #456]	@ (800a584 <HAL_SPI_Init+0x23c>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d009      	beq.n	800a3d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a70      	ldr	r2, [pc, #448]	@ (800a588 <HAL_SPI_Init+0x240>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d004      	beq.n	800a3d4 <HAL_SPI_Init+0x8c>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a6f      	ldr	r2, [pc, #444]	@ (800a58c <HAL_SPI_Init+0x244>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d104      	bne.n	800a3de <HAL_SPI_Init+0x96>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b10      	cmp	r3, #16
 800a3d8:	d901      	bls.n	800a3de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e0cd      	b.n	800a57a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d106      	bne.n	800a3f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7fa fc84 	bl	8004d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f022 0201 	bic.w	r2, r2, #1
 800a40e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a41a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a424:	d119      	bne.n	800a45a <HAL_SPI_Init+0x112>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a42e:	d103      	bne.n	800a438 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a434:	2b00      	cmp	r3, #0
 800a436:	d008      	beq.n	800a44a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10c      	bne.n	800a45a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a444:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a448:	d107      	bne.n	800a45a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a458:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00f      	beq.n	800a486 <HAL_SPI_Init+0x13e>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	2b06      	cmp	r3, #6
 800a46c:	d90b      	bls.n	800a486 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	430a      	orrs	r2, r1
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	e007      	b.n	800a496 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a494:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	69da      	ldr	r2, [r3, #28]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4a8:	ea42 0103 	orr.w	r1, r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c0:	431a      	orrs	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	431a      	orrs	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	431a      	orrs	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	695b      	ldr	r3, [r3, #20]
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	431a      	orrs	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	431a      	orrs	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4ea:	431a      	orrs	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	431a      	orrs	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4f6:	ea42 0103 	orr.w	r1, r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	430a      	orrs	r2, r1
 800a504:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d113      	bne.n	800a536 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a520:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a534:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f022 0201 	bic.w	r2, r2, #1
 800a544:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00a      	beq.n	800a568 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	40013000 	.word	0x40013000
 800a588:	40003800 	.word	0x40003800
 800a58c:	40003c00 	.word	0x40003c00

0800a590 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af02      	add	r7, sp, #8
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	603b      	str	r3, [r7, #0]
 800a59c:	4613      	mov	r3, r2
 800a59e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3320      	adds	r3, #32
 800a5a6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5a8:	f7fb f89a 	bl	80056e0 <HAL_GetTick>
 800a5ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d001      	beq.n	800a5be <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	e1d1      	b.n	800a962 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <HAL_SPI_Transmit+0x3a>
 800a5c4:	88fb      	ldrh	r3, [r7, #6]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e1c9      	b.n	800a962 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d101      	bne.n	800a5dc <HAL_SPI_Transmit+0x4c>
 800a5d8:	2302      	movs	r3, #2
 800a5da:	e1c2      	b.n	800a962 <HAL_SPI_Transmit+0x3d2>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2203      	movs	r2, #3
 800a5e8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	88fa      	ldrh	r2, [r7, #6]
 800a5fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	88fa      	ldrh	r2, [r7, #6]
 800a606:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a634:	d108      	bne.n	800a648 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	e009      	b.n	800a65c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a65a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	4b96      	ldr	r3, [pc, #600]	@ (800a8bc <HAL_SPI_Transmit+0x32c>)
 800a664:	4013      	ands	r3, r2
 800a666:	88f9      	ldrh	r1, [r7, #6]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	6812      	ldr	r2, [r2, #0]
 800a66c:	430b      	orrs	r3, r1
 800a66e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f042 0201 	orr.w	r2, r2, #1
 800a67e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a688:	d107      	bne.n	800a69a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a698:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	2b0f      	cmp	r3, #15
 800a6a0:	d947      	bls.n	800a732 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a6a2:	e03f      	b.n	800a724 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	695b      	ldr	r3, [r3, #20]
 800a6aa:	f003 0302 	and.w	r3, r3, #2
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d114      	bne.n	800a6dc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	6812      	ldr	r2, [r2, #0]
 800a6bc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6c2:	1d1a      	adds	r2, r3, #4
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a6da:	e023      	b.n	800a724 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a6dc:	f7fb f800 	bl	80056e0 <HAL_GetTick>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	683a      	ldr	r2, [r7, #0]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d803      	bhi.n	800a6f4 <HAL_SPI_Transmit+0x164>
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f2:	d102      	bne.n	800a6fa <HAL_SPI_Transmit+0x16a>
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d114      	bne.n	800a724 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 f936 	bl	800a96c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a706:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a720:	2303      	movs	r3, #3
 800a722:	e11e      	b.n	800a962 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d1b9      	bne.n	800a6a4 <HAL_SPI_Transmit+0x114>
 800a730:	e0f1      	b.n	800a916 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	2b07      	cmp	r3, #7
 800a738:	f240 80e6 	bls.w	800a908 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a73c:	e05d      	b.n	800a7fa <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	f003 0302 	and.w	r3, r3, #2
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d132      	bne.n	800a7b2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a752:	b29b      	uxth	r3, r3
 800a754:	2b01      	cmp	r3, #1
 800a756:	d918      	bls.n	800a78a <HAL_SPI_Transmit+0x1fa>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d014      	beq.n	800a78a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	6812      	ldr	r2, [r2, #0]
 800a76a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a770:	1d1a      	adds	r2, r3, #4
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	3b02      	subs	r3, #2
 800a780:	b29a      	uxth	r2, r3
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a788:	e037      	b.n	800a7fa <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a78e:	881a      	ldrh	r2, [r3, #0]
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a798:	1c9a      	adds	r2, r3, #2
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a7b0:	e023      	b.n	800a7fa <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7b2:	f7fa ff95 	bl	80056e0 <HAL_GetTick>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d803      	bhi.n	800a7ca <HAL_SPI_Transmit+0x23a>
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c8:	d102      	bne.n	800a7d0 <HAL_SPI_Transmit+0x240>
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d114      	bne.n	800a7fa <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f000 f8cb 	bl	800a96c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	e0b3      	b.n	800a962 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a800:	b29b      	uxth	r3, r3
 800a802:	2b00      	cmp	r3, #0
 800a804:	d19b      	bne.n	800a73e <HAL_SPI_Transmit+0x1ae>
 800a806:	e086      	b.n	800a916 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	f003 0302 	and.w	r3, r3, #2
 800a812:	2b02      	cmp	r3, #2
 800a814:	d154      	bne.n	800a8c0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d918      	bls.n	800a854 <HAL_SPI_Transmit+0x2c4>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a826:	2b40      	cmp	r3, #64	@ 0x40
 800a828:	d914      	bls.n	800a854 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	6812      	ldr	r2, [r2, #0]
 800a834:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a83a:	1d1a      	adds	r2, r3, #4
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a846:	b29b      	uxth	r3, r3
 800a848:	3b04      	subs	r3, #4
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a852:	e059      	b.n	800a908 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d917      	bls.n	800a890 <HAL_SPI_Transmit+0x300>
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a864:	2b00      	cmp	r3, #0
 800a866:	d013      	beq.n	800a890 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a86c:	881a      	ldrh	r2, [r3, #0]
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a876:	1c9a      	adds	r2, r3, #2
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a882:	b29b      	uxth	r3, r3
 800a884:	3b02      	subs	r3, #2
 800a886:	b29a      	uxth	r2, r3
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a88e:	e03b      	b.n	800a908 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	3320      	adds	r3, #32
 800a89a:	7812      	ldrb	r2, [r2, #0]
 800a89c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8a2:	1c5a      	adds	r2, r3, #1
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a8ba:	e025      	b.n	800a908 <HAL_SPI_Transmit+0x378>
 800a8bc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8c0:	f7fa ff0e 	bl	80056e0 <HAL_GetTick>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d803      	bhi.n	800a8d8 <HAL_SPI_Transmit+0x348>
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d6:	d102      	bne.n	800a8de <HAL_SPI_Transmit+0x34e>
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d114      	bne.n	800a908 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f000 f844 	bl	800a96c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a904:	2303      	movs	r3, #3
 800a906:	e02c      	b.n	800a962 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a90e:	b29b      	uxth	r3, r3
 800a910:	2b00      	cmp	r3, #0
 800a912:	f47f af79 	bne.w	800a808 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2200      	movs	r2, #0
 800a91e:	2108      	movs	r1, #8
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f000 f8c3 	bl	800aaac <SPI_WaitOnFlagUntilTimeout>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d007      	beq.n	800a93c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a932:	f043 0220 	orr.w	r2, r3, #32
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f000 f815 	bl	800a96c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e000      	b.n	800a962 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a960:	2300      	movs	r3, #0
  }
}
 800a962:	4618      	mov	r0, r3
 800a964:	3718      	adds	r7, #24
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop

0800a96c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b085      	sub	sp, #20
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	699a      	ldr	r2, [r3, #24]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f042 0208 	orr.w	r2, r2, #8
 800a98a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	699a      	ldr	r2, [r3, #24]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f042 0210 	orr.w	r2, r2, #16
 800a99a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 0201 	bic.w	r2, r2, #1
 800a9aa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	6919      	ldr	r1, [r3, #16]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	4b3c      	ldr	r3, [pc, #240]	@ (800aaa8 <SPI_CloseTransfer+0x13c>)
 800a9b8:	400b      	ands	r3, r1
 800a9ba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	689a      	ldr	r2, [r3, #8]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a9ca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b04      	cmp	r3, #4
 800a9d6:	d014      	beq.n	800aa02 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f003 0320 	and.w	r3, r3, #32
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00f      	beq.n	800aa02 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	699a      	ldr	r2, [r3, #24]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f042 0220 	orr.w	r2, r2, #32
 800aa00:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	2b03      	cmp	r3, #3
 800aa0c:	d014      	beq.n	800aa38 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00f      	beq.n	800aa38 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa1e:	f043 0204 	orr.w	r2, r3, #4
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	699a      	ldr	r2, [r3, #24]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa36:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00f      	beq.n	800aa62 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa48:	f043 0201 	orr.w	r2, r3, #1
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	699a      	ldr	r2, [r3, #24]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa60:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00f      	beq.n	800aa8c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa72:	f043 0208 	orr.w	r2, r3, #8
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	699a      	ldr	r2, [r3, #24]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa8a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800aa9c:	bf00      	nop
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	fffffc90 	.word	0xfffffc90

0800aaac <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	603b      	str	r3, [r7, #0]
 800aab8:	4613      	mov	r3, r2
 800aaba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aabc:	e010      	b.n	800aae0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aabe:	f7fa fe0f 	bl	80056e0 <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	683a      	ldr	r2, [r7, #0]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d803      	bhi.n	800aad6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad4:	d102      	bne.n	800aadc <SPI_WaitOnFlagUntilTimeout+0x30>
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800aadc:	2303      	movs	r3, #3
 800aade:	e00f      	b.n	800ab00 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	695a      	ldr	r2, [r3, #20]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	4013      	ands	r3, r2
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	bf0c      	ite	eq
 800aaf0:	2301      	moveq	r3, #1
 800aaf2:	2300      	movne	r3, #0
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	79fb      	ldrb	r3, [r7, #7]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d0df      	beq.n	800aabe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab14:	095b      	lsrs	r3, r3, #5
 800ab16:	3301      	adds	r3, #1
 800ab18:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	3307      	adds	r3, #7
 800ab26:	08db      	lsrs	r3, r3, #3
 800ab28:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	fb02 f303 	mul.w	r3, r2, r3
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e049      	b.n	800abe4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d106      	bne.n	800ab6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f7fa f933 	bl	8004dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2202      	movs	r2, #2
 800ab6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	3304      	adds	r3, #4
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	f000 fc49 	bl	800b414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2201      	movs	r2, #1
 800ab86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2201      	movs	r2, #1
 800abae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2201      	movs	r2, #1
 800abb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2201      	movs	r2, #1
 800abbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2201      	movs	r2, #1
 800abce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2201      	movs	r2, #1
 800abd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d001      	beq.n	800ac04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ac00:	2301      	movs	r3, #1
 800ac02:	e054      	b.n	800acae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2202      	movs	r2, #2
 800ac08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	68da      	ldr	r2, [r3, #12]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f042 0201 	orr.w	r2, r2, #1
 800ac1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a26      	ldr	r2, [pc, #152]	@ (800acbc <HAL_TIM_Base_Start_IT+0xd0>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d022      	beq.n	800ac6c <HAL_TIM_Base_Start_IT+0x80>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac2e:	d01d      	beq.n	800ac6c <HAL_TIM_Base_Start_IT+0x80>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a22      	ldr	r2, [pc, #136]	@ (800acc0 <HAL_TIM_Base_Start_IT+0xd4>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d018      	beq.n	800ac6c <HAL_TIM_Base_Start_IT+0x80>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a21      	ldr	r2, [pc, #132]	@ (800acc4 <HAL_TIM_Base_Start_IT+0xd8>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d013      	beq.n	800ac6c <HAL_TIM_Base_Start_IT+0x80>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a1f      	ldr	r2, [pc, #124]	@ (800acc8 <HAL_TIM_Base_Start_IT+0xdc>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d00e      	beq.n	800ac6c <HAL_TIM_Base_Start_IT+0x80>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a1e      	ldr	r2, [pc, #120]	@ (800accc <HAL_TIM_Base_Start_IT+0xe0>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d009      	beq.n	800ac6c <HAL_TIM_Base_Start_IT+0x80>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a1c      	ldr	r2, [pc, #112]	@ (800acd0 <HAL_TIM_Base_Start_IT+0xe4>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d004      	beq.n	800ac6c <HAL_TIM_Base_Start_IT+0x80>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a1b      	ldr	r2, [pc, #108]	@ (800acd4 <HAL_TIM_Base_Start_IT+0xe8>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d115      	bne.n	800ac98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689a      	ldr	r2, [r3, #8]
 800ac72:	4b19      	ldr	r3, [pc, #100]	@ (800acd8 <HAL_TIM_Base_Start_IT+0xec>)
 800ac74:	4013      	ands	r3, r2
 800ac76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2b06      	cmp	r3, #6
 800ac7c:	d015      	beq.n	800acaa <HAL_TIM_Base_Start_IT+0xbe>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac84:	d011      	beq.n	800acaa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f042 0201 	orr.w	r2, r2, #1
 800ac94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac96:	e008      	b.n	800acaa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f042 0201 	orr.w	r2, r2, #1
 800aca6:	601a      	str	r2, [r3, #0]
 800aca8:	e000      	b.n	800acac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3714      	adds	r7, #20
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	40010000 	.word	0x40010000
 800acc0:	40000400 	.word	0x40000400
 800acc4:	40000800 	.word	0x40000800
 800acc8:	40000c00 	.word	0x40000c00
 800accc:	40010400 	.word	0x40010400
 800acd0:	40001800 	.word	0x40001800
 800acd4:	40014000 	.word	0x40014000
 800acd8:	00010007 	.word	0x00010007

0800acdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d101      	bne.n	800acee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e049      	b.n	800ad82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d106      	bne.n	800ad08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f841 	bl	800ad8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	3304      	adds	r3, #4
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f000 fb7a 	bl	800b414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b083      	sub	sp, #12
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ad92:	bf00      	nop
 800ad94:	370c      	adds	r7, #12
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b084      	sub	sp, #16
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d020      	beq.n	800ae02 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f003 0302 	and.w	r3, r3, #2
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d01b      	beq.n	800ae02 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f06f 0202 	mvn.w	r2, #2
 800add2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	699b      	ldr	r3, [r3, #24]
 800ade0:	f003 0303 	and.w	r3, r3, #3
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d003      	beq.n	800adf0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 faf5 	bl	800b3d8 <HAL_TIM_IC_CaptureCallback>
 800adee:	e005      	b.n	800adfc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fae7 	bl	800b3c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 faf8 	bl	800b3ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	f003 0304 	and.w	r3, r3, #4
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d020      	beq.n	800ae4e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f003 0304 	and.w	r3, r3, #4
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d01b      	beq.n	800ae4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f06f 0204 	mvn.w	r2, #4
 800ae1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2202      	movs	r2, #2
 800ae24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	699b      	ldr	r3, [r3, #24]
 800ae2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d003      	beq.n	800ae3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 facf 	bl	800b3d8 <HAL_TIM_IC_CaptureCallback>
 800ae3a:	e005      	b.n	800ae48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fac1 	bl	800b3c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fad2 	bl	800b3ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	f003 0308 	and.w	r3, r3, #8
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d020      	beq.n	800ae9a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f003 0308 	and.w	r3, r3, #8
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d01b      	beq.n	800ae9a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f06f 0208 	mvn.w	r2, #8
 800ae6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2204      	movs	r2, #4
 800ae70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	f003 0303 	and.w	r3, r3, #3
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d003      	beq.n	800ae88 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 faa9 	bl	800b3d8 <HAL_TIM_IC_CaptureCallback>
 800ae86:	e005      	b.n	800ae94 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fa9b 	bl	800b3c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 faac 	bl	800b3ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	f003 0310 	and.w	r3, r3, #16
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d020      	beq.n	800aee6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f003 0310 	and.w	r3, r3, #16
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d01b      	beq.n	800aee6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f06f 0210 	mvn.w	r2, #16
 800aeb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2208      	movs	r2, #8
 800aebc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	69db      	ldr	r3, [r3, #28]
 800aec4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d003      	beq.n	800aed4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fa83 	bl	800b3d8 <HAL_TIM_IC_CaptureCallback>
 800aed2:	e005      	b.n	800aee0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fa75 	bl	800b3c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fa86 	bl	800b3ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	f003 0301 	and.w	r3, r3, #1
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00c      	beq.n	800af0a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f003 0301 	and.w	r3, r3, #1
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d007      	beq.n	800af0a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f06f 0201 	mvn.w	r2, #1
 800af02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f7f9 fd47 	bl	8004998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af10:	2b00      	cmp	r3, #0
 800af12:	d104      	bne.n	800af1e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00c      	beq.n	800af38 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af24:	2b00      	cmp	r3, #0
 800af26:	d007      	beq.n	800af38 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800af30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 ff1a 	bl	800bd6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00c      	beq.n	800af5c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d007      	beq.n	800af5c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800af54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 ff12 	bl	800bd80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00c      	beq.n	800af80 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d007      	beq.n	800af80 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800af78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fa40 	bl	800b400 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	f003 0320 	and.w	r3, r3, #32
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00c      	beq.n	800afa4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f003 0320 	and.w	r3, r3, #32
 800af90:	2b00      	cmp	r3, #0
 800af92:	d007      	beq.n	800afa4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f06f 0220 	mvn.w	r2, #32
 800af9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 feda 	bl	800bd58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afa4:	bf00      	nop
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afb8:	2300      	movs	r3, #0
 800afba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d101      	bne.n	800afca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800afc6:	2302      	movs	r3, #2
 800afc8:	e0ff      	b.n	800b1ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2201      	movs	r2, #1
 800afce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b14      	cmp	r3, #20
 800afd6:	f200 80f0 	bhi.w	800b1ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800afda:	a201      	add	r2, pc, #4	@ (adr r2, 800afe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800afdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe0:	0800b035 	.word	0x0800b035
 800afe4:	0800b1bb 	.word	0x0800b1bb
 800afe8:	0800b1bb 	.word	0x0800b1bb
 800afec:	0800b1bb 	.word	0x0800b1bb
 800aff0:	0800b075 	.word	0x0800b075
 800aff4:	0800b1bb 	.word	0x0800b1bb
 800aff8:	0800b1bb 	.word	0x0800b1bb
 800affc:	0800b1bb 	.word	0x0800b1bb
 800b000:	0800b0b7 	.word	0x0800b0b7
 800b004:	0800b1bb 	.word	0x0800b1bb
 800b008:	0800b1bb 	.word	0x0800b1bb
 800b00c:	0800b1bb 	.word	0x0800b1bb
 800b010:	0800b0f7 	.word	0x0800b0f7
 800b014:	0800b1bb 	.word	0x0800b1bb
 800b018:	0800b1bb 	.word	0x0800b1bb
 800b01c:	0800b1bb 	.word	0x0800b1bb
 800b020:	0800b139 	.word	0x0800b139
 800b024:	0800b1bb 	.word	0x0800b1bb
 800b028:	0800b1bb 	.word	0x0800b1bb
 800b02c:	0800b1bb 	.word	0x0800b1bb
 800b030:	0800b179 	.word	0x0800b179
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68b9      	ldr	r1, [r7, #8]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 fa8a 	bl	800b554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	699a      	ldr	r2, [r3, #24]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f042 0208 	orr.w	r2, r2, #8
 800b04e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	699a      	ldr	r2, [r3, #24]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f022 0204 	bic.w	r2, r2, #4
 800b05e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	6999      	ldr	r1, [r3, #24]
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	691a      	ldr	r2, [r3, #16]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	430a      	orrs	r2, r1
 800b070:	619a      	str	r2, [r3, #24]
      break;
 800b072:	e0a5      	b.n	800b1c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68b9      	ldr	r1, [r7, #8]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 fafa 	bl	800b674 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	699a      	ldr	r2, [r3, #24]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b08e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	699a      	ldr	r2, [r3, #24]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b09e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	6999      	ldr	r1, [r3, #24]
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	691b      	ldr	r3, [r3, #16]
 800b0aa:	021a      	lsls	r2, r3, #8
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	430a      	orrs	r2, r1
 800b0b2:	619a      	str	r2, [r3, #24]
      break;
 800b0b4:	e084      	b.n	800b1c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	68b9      	ldr	r1, [r7, #8]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 fb63 	bl	800b788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	69da      	ldr	r2, [r3, #28]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f042 0208 	orr.w	r2, r2, #8
 800b0d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	69da      	ldr	r2, [r3, #28]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f022 0204 	bic.w	r2, r2, #4
 800b0e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	69d9      	ldr	r1, [r3, #28]
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	691a      	ldr	r2, [r3, #16]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	430a      	orrs	r2, r1
 800b0f2:	61da      	str	r2, [r3, #28]
      break;
 800b0f4:	e064      	b.n	800b1c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68b9      	ldr	r1, [r7, #8]
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f000 fbcb 	bl	800b898 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	69da      	ldr	r2, [r3, #28]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	69da      	ldr	r2, [r3, #28]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	69d9      	ldr	r1, [r3, #28]
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	021a      	lsls	r2, r3, #8
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	430a      	orrs	r2, r1
 800b134:	61da      	str	r2, [r3, #28]
      break;
 800b136:	e043      	b.n	800b1c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	68b9      	ldr	r1, [r7, #8]
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 fc14 	bl	800b96c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f042 0208 	orr.w	r2, r2, #8
 800b152:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f022 0204 	bic.w	r2, r2, #4
 800b162:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	691a      	ldr	r2, [r3, #16]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	430a      	orrs	r2, r1
 800b174:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b176:	e023      	b.n	800b1c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	68b9      	ldr	r1, [r7, #8]
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 fc58 	bl	800ba34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b192:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	021a      	lsls	r2, r3, #8
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	430a      	orrs	r2, r1
 800b1b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b1b8:	e002      	b.n	800b1c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	75fb      	strb	r3, [r7, #23]
      break;
 800b1be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b1c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3718      	adds	r7, #24
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop

0800b1d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d101      	bne.n	800b1f0 <HAL_TIM_ConfigClockSource+0x1c>
 800b1ec:	2302      	movs	r3, #2
 800b1ee:	e0dc      	b.n	800b3aa <HAL_TIM_ConfigClockSource+0x1d6>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	4b6a      	ldr	r3, [pc, #424]	@ (800b3b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b20c:	4013      	ands	r3, r2
 800b20e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b216:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68ba      	ldr	r2, [r7, #8]
 800b21e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a64      	ldr	r2, [pc, #400]	@ (800b3b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b226:	4293      	cmp	r3, r2
 800b228:	f000 80a9 	beq.w	800b37e <HAL_TIM_ConfigClockSource+0x1aa>
 800b22c:	4a62      	ldr	r2, [pc, #392]	@ (800b3b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	f200 80ae 	bhi.w	800b390 <HAL_TIM_ConfigClockSource+0x1bc>
 800b234:	4a61      	ldr	r2, [pc, #388]	@ (800b3bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800b236:	4293      	cmp	r3, r2
 800b238:	f000 80a1 	beq.w	800b37e <HAL_TIM_ConfigClockSource+0x1aa>
 800b23c:	4a5f      	ldr	r2, [pc, #380]	@ (800b3bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	f200 80a6 	bhi.w	800b390 <HAL_TIM_ConfigClockSource+0x1bc>
 800b244:	4a5e      	ldr	r2, [pc, #376]	@ (800b3c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b246:	4293      	cmp	r3, r2
 800b248:	f000 8099 	beq.w	800b37e <HAL_TIM_ConfigClockSource+0x1aa>
 800b24c:	4a5c      	ldr	r2, [pc, #368]	@ (800b3c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	f200 809e 	bhi.w	800b390 <HAL_TIM_ConfigClockSource+0x1bc>
 800b254:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b258:	f000 8091 	beq.w	800b37e <HAL_TIM_ConfigClockSource+0x1aa>
 800b25c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b260:	f200 8096 	bhi.w	800b390 <HAL_TIM_ConfigClockSource+0x1bc>
 800b264:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b268:	f000 8089 	beq.w	800b37e <HAL_TIM_ConfigClockSource+0x1aa>
 800b26c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b270:	f200 808e 	bhi.w	800b390 <HAL_TIM_ConfigClockSource+0x1bc>
 800b274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b278:	d03e      	beq.n	800b2f8 <HAL_TIM_ConfigClockSource+0x124>
 800b27a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b27e:	f200 8087 	bhi.w	800b390 <HAL_TIM_ConfigClockSource+0x1bc>
 800b282:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b286:	f000 8086 	beq.w	800b396 <HAL_TIM_ConfigClockSource+0x1c2>
 800b28a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b28e:	d87f      	bhi.n	800b390 <HAL_TIM_ConfigClockSource+0x1bc>
 800b290:	2b70      	cmp	r3, #112	@ 0x70
 800b292:	d01a      	beq.n	800b2ca <HAL_TIM_ConfigClockSource+0xf6>
 800b294:	2b70      	cmp	r3, #112	@ 0x70
 800b296:	d87b      	bhi.n	800b390 <HAL_TIM_ConfigClockSource+0x1bc>
 800b298:	2b60      	cmp	r3, #96	@ 0x60
 800b29a:	d050      	beq.n	800b33e <HAL_TIM_ConfigClockSource+0x16a>
 800b29c:	2b60      	cmp	r3, #96	@ 0x60
 800b29e:	d877      	bhi.n	800b390 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2a0:	2b50      	cmp	r3, #80	@ 0x50
 800b2a2:	d03c      	beq.n	800b31e <HAL_TIM_ConfigClockSource+0x14a>
 800b2a4:	2b50      	cmp	r3, #80	@ 0x50
 800b2a6:	d873      	bhi.n	800b390 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2a8:	2b40      	cmp	r3, #64	@ 0x40
 800b2aa:	d058      	beq.n	800b35e <HAL_TIM_ConfigClockSource+0x18a>
 800b2ac:	2b40      	cmp	r3, #64	@ 0x40
 800b2ae:	d86f      	bhi.n	800b390 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2b0:	2b30      	cmp	r3, #48	@ 0x30
 800b2b2:	d064      	beq.n	800b37e <HAL_TIM_ConfigClockSource+0x1aa>
 800b2b4:	2b30      	cmp	r3, #48	@ 0x30
 800b2b6:	d86b      	bhi.n	800b390 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2b8:	2b20      	cmp	r3, #32
 800b2ba:	d060      	beq.n	800b37e <HAL_TIM_ConfigClockSource+0x1aa>
 800b2bc:	2b20      	cmp	r3, #32
 800b2be:	d867      	bhi.n	800b390 <HAL_TIM_ConfigClockSource+0x1bc>
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d05c      	beq.n	800b37e <HAL_TIM_ConfigClockSource+0x1aa>
 800b2c4:	2b10      	cmp	r3, #16
 800b2c6:	d05a      	beq.n	800b37e <HAL_TIM_ConfigClockSource+0x1aa>
 800b2c8:	e062      	b.n	800b390 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b2da:	f000 fc8f 	bl	800bbfc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b2ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	609a      	str	r2, [r3, #8]
      break;
 800b2f6:	e04f      	b.n	800b398 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b308:	f000 fc78 	bl	800bbfc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	689a      	ldr	r2, [r3, #8]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b31a:	609a      	str	r2, [r3, #8]
      break;
 800b31c:	e03c      	b.n	800b398 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b32a:	461a      	mov	r2, r3
 800b32c:	f000 fbe8 	bl	800bb00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	2150      	movs	r1, #80	@ 0x50
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fc42 	bl	800bbc0 <TIM_ITRx_SetConfig>
      break;
 800b33c:	e02c      	b.n	800b398 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b34a:	461a      	mov	r2, r3
 800b34c:	f000 fc07 	bl	800bb5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2160      	movs	r1, #96	@ 0x60
 800b356:	4618      	mov	r0, r3
 800b358:	f000 fc32 	bl	800bbc0 <TIM_ITRx_SetConfig>
      break;
 800b35c:	e01c      	b.n	800b398 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b36a:	461a      	mov	r2, r3
 800b36c:	f000 fbc8 	bl	800bb00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2140      	movs	r1, #64	@ 0x40
 800b376:	4618      	mov	r0, r3
 800b378:	f000 fc22 	bl	800bbc0 <TIM_ITRx_SetConfig>
      break;
 800b37c:	e00c      	b.n	800b398 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4619      	mov	r1, r3
 800b388:	4610      	mov	r0, r2
 800b38a:	f000 fc19 	bl	800bbc0 <TIM_ITRx_SetConfig>
      break;
 800b38e:	e003      	b.n	800b398 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	73fb      	strb	r3, [r7, #15]
      break;
 800b394:	e000      	b.n	800b398 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	ffceff88 	.word	0xffceff88
 800b3b8:	00100040 	.word	0x00100040
 800b3bc:	00100030 	.word	0x00100030
 800b3c0:	00100020 	.word	0x00100020

0800b3c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b3cc:	bf00      	nop
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a43      	ldr	r2, [pc, #268]	@ (800b534 <TIM_Base_SetConfig+0x120>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d013      	beq.n	800b454 <TIM_Base_SetConfig+0x40>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b432:	d00f      	beq.n	800b454 <TIM_Base_SetConfig+0x40>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a40      	ldr	r2, [pc, #256]	@ (800b538 <TIM_Base_SetConfig+0x124>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d00b      	beq.n	800b454 <TIM_Base_SetConfig+0x40>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a3f      	ldr	r2, [pc, #252]	@ (800b53c <TIM_Base_SetConfig+0x128>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d007      	beq.n	800b454 <TIM_Base_SetConfig+0x40>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a3e      	ldr	r2, [pc, #248]	@ (800b540 <TIM_Base_SetConfig+0x12c>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d003      	beq.n	800b454 <TIM_Base_SetConfig+0x40>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a3d      	ldr	r2, [pc, #244]	@ (800b544 <TIM_Base_SetConfig+0x130>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d108      	bne.n	800b466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b45a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	4313      	orrs	r3, r2
 800b464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a32      	ldr	r2, [pc, #200]	@ (800b534 <TIM_Base_SetConfig+0x120>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d01f      	beq.n	800b4ae <TIM_Base_SetConfig+0x9a>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b474:	d01b      	beq.n	800b4ae <TIM_Base_SetConfig+0x9a>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a2f      	ldr	r2, [pc, #188]	@ (800b538 <TIM_Base_SetConfig+0x124>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d017      	beq.n	800b4ae <TIM_Base_SetConfig+0x9a>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a2e      	ldr	r2, [pc, #184]	@ (800b53c <TIM_Base_SetConfig+0x128>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d013      	beq.n	800b4ae <TIM_Base_SetConfig+0x9a>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a2d      	ldr	r2, [pc, #180]	@ (800b540 <TIM_Base_SetConfig+0x12c>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d00f      	beq.n	800b4ae <TIM_Base_SetConfig+0x9a>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a2c      	ldr	r2, [pc, #176]	@ (800b544 <TIM_Base_SetConfig+0x130>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d00b      	beq.n	800b4ae <TIM_Base_SetConfig+0x9a>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a2b      	ldr	r2, [pc, #172]	@ (800b548 <TIM_Base_SetConfig+0x134>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d007      	beq.n	800b4ae <TIM_Base_SetConfig+0x9a>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a2a      	ldr	r2, [pc, #168]	@ (800b54c <TIM_Base_SetConfig+0x138>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d003      	beq.n	800b4ae <TIM_Base_SetConfig+0x9a>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a29      	ldr	r2, [pc, #164]	@ (800b550 <TIM_Base_SetConfig+0x13c>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d108      	bne.n	800b4c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	689a      	ldr	r2, [r3, #8]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a14      	ldr	r2, [pc, #80]	@ (800b534 <TIM_Base_SetConfig+0x120>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d00f      	beq.n	800b506 <TIM_Base_SetConfig+0xf2>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4a16      	ldr	r2, [pc, #88]	@ (800b544 <TIM_Base_SetConfig+0x130>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d00b      	beq.n	800b506 <TIM_Base_SetConfig+0xf2>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a15      	ldr	r2, [pc, #84]	@ (800b548 <TIM_Base_SetConfig+0x134>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d007      	beq.n	800b506 <TIM_Base_SetConfig+0xf2>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a14      	ldr	r2, [pc, #80]	@ (800b54c <TIM_Base_SetConfig+0x138>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d003      	beq.n	800b506 <TIM_Base_SetConfig+0xf2>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a13      	ldr	r2, [pc, #76]	@ (800b550 <TIM_Base_SetConfig+0x13c>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d103      	bne.n	800b50e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	691a      	ldr	r2, [r3, #16]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f043 0204 	orr.w	r2, r3, #4
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2201      	movs	r2, #1
 800b51e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	601a      	str	r2, [r3, #0]
}
 800b526:	bf00      	nop
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	40010000 	.word	0x40010000
 800b538:	40000400 	.word	0x40000400
 800b53c:	40000800 	.word	0x40000800
 800b540:	40000c00 	.word	0x40000c00
 800b544:	40010400 	.word	0x40010400
 800b548:	40014000 	.word	0x40014000
 800b54c:	40014400 	.word	0x40014400
 800b550:	40014800 	.word	0x40014800

0800b554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b554:	b480      	push	{r7}
 800b556:	b087      	sub	sp, #28
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	f023 0201 	bic.w	r2, r3, #1
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	699b      	ldr	r3, [r3, #24]
 800b57a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	4b37      	ldr	r3, [pc, #220]	@ (800b65c <TIM_OC1_SetConfig+0x108>)
 800b580:	4013      	ands	r3, r2
 800b582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f023 0303 	bic.w	r3, r3, #3
 800b58a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	4313      	orrs	r3, r2
 800b594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f023 0302 	bic.w	r3, r3, #2
 800b59c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	697a      	ldr	r2, [r7, #20]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	4a2d      	ldr	r2, [pc, #180]	@ (800b660 <TIM_OC1_SetConfig+0x10c>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d00f      	beq.n	800b5d0 <TIM_OC1_SetConfig+0x7c>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	4a2c      	ldr	r2, [pc, #176]	@ (800b664 <TIM_OC1_SetConfig+0x110>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d00b      	beq.n	800b5d0 <TIM_OC1_SetConfig+0x7c>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a2b      	ldr	r2, [pc, #172]	@ (800b668 <TIM_OC1_SetConfig+0x114>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d007      	beq.n	800b5d0 <TIM_OC1_SetConfig+0x7c>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a2a      	ldr	r2, [pc, #168]	@ (800b66c <TIM_OC1_SetConfig+0x118>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d003      	beq.n	800b5d0 <TIM_OC1_SetConfig+0x7c>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a29      	ldr	r2, [pc, #164]	@ (800b670 <TIM_OC1_SetConfig+0x11c>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d10c      	bne.n	800b5ea <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	f023 0308 	bic.w	r3, r3, #8
 800b5d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	697a      	ldr	r2, [r7, #20]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f023 0304 	bic.w	r3, r3, #4
 800b5e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a1c      	ldr	r2, [pc, #112]	@ (800b660 <TIM_OC1_SetConfig+0x10c>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d00f      	beq.n	800b612 <TIM_OC1_SetConfig+0xbe>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a1b      	ldr	r2, [pc, #108]	@ (800b664 <TIM_OC1_SetConfig+0x110>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d00b      	beq.n	800b612 <TIM_OC1_SetConfig+0xbe>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a1a      	ldr	r2, [pc, #104]	@ (800b668 <TIM_OC1_SetConfig+0x114>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d007      	beq.n	800b612 <TIM_OC1_SetConfig+0xbe>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	4a19      	ldr	r2, [pc, #100]	@ (800b66c <TIM_OC1_SetConfig+0x118>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d003      	beq.n	800b612 <TIM_OC1_SetConfig+0xbe>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	4a18      	ldr	r2, [pc, #96]	@ (800b670 <TIM_OC1_SetConfig+0x11c>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d111      	bne.n	800b636 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	695b      	ldr	r3, [r3, #20]
 800b626:	693a      	ldr	r2, [r7, #16]
 800b628:	4313      	orrs	r3, r2
 800b62a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	699b      	ldr	r3, [r3, #24]
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	4313      	orrs	r3, r2
 800b634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	693a      	ldr	r2, [r7, #16]
 800b63a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	68fa      	ldr	r2, [r7, #12]
 800b640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	685a      	ldr	r2, [r3, #4]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	697a      	ldr	r2, [r7, #20]
 800b64e:	621a      	str	r2, [r3, #32]
}
 800b650:	bf00      	nop
 800b652:	371c      	adds	r7, #28
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	fffeff8f 	.word	0xfffeff8f
 800b660:	40010000 	.word	0x40010000
 800b664:	40010400 	.word	0x40010400
 800b668:	40014000 	.word	0x40014000
 800b66c:	40014400 	.word	0x40014400
 800b670:	40014800 	.word	0x40014800

0800b674 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b674:	b480      	push	{r7}
 800b676:	b087      	sub	sp, #28
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a1b      	ldr	r3, [r3, #32]
 800b688:	f023 0210 	bic.w	r2, r3, #16
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	699b      	ldr	r3, [r3, #24]
 800b69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	4b34      	ldr	r3, [pc, #208]	@ (800b770 <TIM_OC2_SetConfig+0xfc>)
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	021b      	lsls	r3, r3, #8
 800b6b2:	68fa      	ldr	r2, [r7, #12]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	f023 0320 	bic.w	r3, r3, #32
 800b6be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	011b      	lsls	r3, r3, #4
 800b6c6:	697a      	ldr	r2, [r7, #20]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a29      	ldr	r2, [pc, #164]	@ (800b774 <TIM_OC2_SetConfig+0x100>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d003      	beq.n	800b6dc <TIM_OC2_SetConfig+0x68>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	4a28      	ldr	r2, [pc, #160]	@ (800b778 <TIM_OC2_SetConfig+0x104>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d10d      	bne.n	800b6f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b6e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	011b      	lsls	r3, r3, #4
 800b6ea:	697a      	ldr	r2, [r7, #20]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	4a1e      	ldr	r2, [pc, #120]	@ (800b774 <TIM_OC2_SetConfig+0x100>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d00f      	beq.n	800b720 <TIM_OC2_SetConfig+0xac>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a1d      	ldr	r2, [pc, #116]	@ (800b778 <TIM_OC2_SetConfig+0x104>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d00b      	beq.n	800b720 <TIM_OC2_SetConfig+0xac>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a1c      	ldr	r2, [pc, #112]	@ (800b77c <TIM_OC2_SetConfig+0x108>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d007      	beq.n	800b720 <TIM_OC2_SetConfig+0xac>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a1b      	ldr	r2, [pc, #108]	@ (800b780 <TIM_OC2_SetConfig+0x10c>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d003      	beq.n	800b720 <TIM_OC2_SetConfig+0xac>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a1a      	ldr	r2, [pc, #104]	@ (800b784 <TIM_OC2_SetConfig+0x110>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d113      	bne.n	800b748 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b72e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	695b      	ldr	r3, [r3, #20]
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	4313      	orrs	r3, r2
 800b73a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	693a      	ldr	r2, [r7, #16]
 800b744:	4313      	orrs	r3, r2
 800b746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	693a      	ldr	r2, [r7, #16]
 800b74c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	685a      	ldr	r2, [r3, #4]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	697a      	ldr	r2, [r7, #20]
 800b760:	621a      	str	r2, [r3, #32]
}
 800b762:	bf00      	nop
 800b764:	371c      	adds	r7, #28
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	feff8fff 	.word	0xfeff8fff
 800b774:	40010000 	.word	0x40010000
 800b778:	40010400 	.word	0x40010400
 800b77c:	40014000 	.word	0x40014000
 800b780:	40014400 	.word	0x40014400
 800b784:	40014800 	.word	0x40014800

0800b788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b788:	b480      	push	{r7}
 800b78a:	b087      	sub	sp, #28
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a1b      	ldr	r3, [r3, #32]
 800b796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6a1b      	ldr	r3, [r3, #32]
 800b79c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	69db      	ldr	r3, [r3, #28]
 800b7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	4b33      	ldr	r3, [pc, #204]	@ (800b880 <TIM_OC3_SetConfig+0xf8>)
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f023 0303 	bic.w	r3, r3, #3
 800b7be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b7d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	021b      	lsls	r3, r3, #8
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a28      	ldr	r2, [pc, #160]	@ (800b884 <TIM_OC3_SetConfig+0xfc>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d003      	beq.n	800b7ee <TIM_OC3_SetConfig+0x66>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a27      	ldr	r2, [pc, #156]	@ (800b888 <TIM_OC3_SetConfig+0x100>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d10d      	bne.n	800b80a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b7f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	021b      	lsls	r3, r3, #8
 800b7fc:	697a      	ldr	r2, [r7, #20]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a1d      	ldr	r2, [pc, #116]	@ (800b884 <TIM_OC3_SetConfig+0xfc>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d00f      	beq.n	800b832 <TIM_OC3_SetConfig+0xaa>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a1c      	ldr	r2, [pc, #112]	@ (800b888 <TIM_OC3_SetConfig+0x100>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d00b      	beq.n	800b832 <TIM_OC3_SetConfig+0xaa>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a1b      	ldr	r2, [pc, #108]	@ (800b88c <TIM_OC3_SetConfig+0x104>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d007      	beq.n	800b832 <TIM_OC3_SetConfig+0xaa>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a1a      	ldr	r2, [pc, #104]	@ (800b890 <TIM_OC3_SetConfig+0x108>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d003      	beq.n	800b832 <TIM_OC3_SetConfig+0xaa>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a19      	ldr	r2, [pc, #100]	@ (800b894 <TIM_OC3_SetConfig+0x10c>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d113      	bne.n	800b85a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	695b      	ldr	r3, [r3, #20]
 800b846:	011b      	lsls	r3, r3, #4
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	699b      	ldr	r3, [r3, #24]
 800b852:	011b      	lsls	r3, r3, #4
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	4313      	orrs	r3, r2
 800b858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	68fa      	ldr	r2, [r7, #12]
 800b864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	685a      	ldr	r2, [r3, #4]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	697a      	ldr	r2, [r7, #20]
 800b872:	621a      	str	r2, [r3, #32]
}
 800b874:	bf00      	nop
 800b876:	371c      	adds	r7, #28
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	fffeff8f 	.word	0xfffeff8f
 800b884:	40010000 	.word	0x40010000
 800b888:	40010400 	.word	0x40010400
 800b88c:	40014000 	.word	0x40014000
 800b890:	40014400 	.word	0x40014400
 800b894:	40014800 	.word	0x40014800

0800b898 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b898:	b480      	push	{r7}
 800b89a:	b087      	sub	sp, #28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a1b      	ldr	r3, [r3, #32]
 800b8a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a1b      	ldr	r3, [r3, #32]
 800b8ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	69db      	ldr	r3, [r3, #28]
 800b8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	4b24      	ldr	r3, [pc, #144]	@ (800b954 <TIM_OC4_SetConfig+0xbc>)
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b8ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	021b      	lsls	r3, r3, #8
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b8e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	031b      	lsls	r3, r3, #12
 800b8ea:	693a      	ldr	r2, [r7, #16]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a19      	ldr	r2, [pc, #100]	@ (800b958 <TIM_OC4_SetConfig+0xc0>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d00f      	beq.n	800b918 <TIM_OC4_SetConfig+0x80>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a18      	ldr	r2, [pc, #96]	@ (800b95c <TIM_OC4_SetConfig+0xc4>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d00b      	beq.n	800b918 <TIM_OC4_SetConfig+0x80>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a17      	ldr	r2, [pc, #92]	@ (800b960 <TIM_OC4_SetConfig+0xc8>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d007      	beq.n	800b918 <TIM_OC4_SetConfig+0x80>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	4a16      	ldr	r2, [pc, #88]	@ (800b964 <TIM_OC4_SetConfig+0xcc>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d003      	beq.n	800b918 <TIM_OC4_SetConfig+0x80>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a15      	ldr	r2, [pc, #84]	@ (800b968 <TIM_OC4_SetConfig+0xd0>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d109      	bne.n	800b92c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b91e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	019b      	lsls	r3, r3, #6
 800b926:	697a      	ldr	r2, [r7, #20]
 800b928:	4313      	orrs	r3, r2
 800b92a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	685a      	ldr	r2, [r3, #4]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	693a      	ldr	r2, [r7, #16]
 800b944:	621a      	str	r2, [r3, #32]
}
 800b946:	bf00      	nop
 800b948:	371c      	adds	r7, #28
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	feff8fff 	.word	0xfeff8fff
 800b958:	40010000 	.word	0x40010000
 800b95c:	40010400 	.word	0x40010400
 800b960:	40014000 	.word	0x40014000
 800b964:	40014400 	.word	0x40014400
 800b968:	40014800 	.word	0x40014800

0800b96c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b087      	sub	sp, #28
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6a1b      	ldr	r3, [r3, #32]
 800b980:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	4b21      	ldr	r3, [pc, #132]	@ (800ba1c <TIM_OC5_SetConfig+0xb0>)
 800b998:	4013      	ands	r3, r2
 800b99a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b9ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	041b      	lsls	r3, r3, #16
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a18      	ldr	r2, [pc, #96]	@ (800ba20 <TIM_OC5_SetConfig+0xb4>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d00f      	beq.n	800b9e2 <TIM_OC5_SetConfig+0x76>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a17      	ldr	r2, [pc, #92]	@ (800ba24 <TIM_OC5_SetConfig+0xb8>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d00b      	beq.n	800b9e2 <TIM_OC5_SetConfig+0x76>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a16      	ldr	r2, [pc, #88]	@ (800ba28 <TIM_OC5_SetConfig+0xbc>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d007      	beq.n	800b9e2 <TIM_OC5_SetConfig+0x76>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a15      	ldr	r2, [pc, #84]	@ (800ba2c <TIM_OC5_SetConfig+0xc0>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d003      	beq.n	800b9e2 <TIM_OC5_SetConfig+0x76>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a14      	ldr	r2, [pc, #80]	@ (800ba30 <TIM_OC5_SetConfig+0xc4>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d109      	bne.n	800b9f6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	695b      	ldr	r3, [r3, #20]
 800b9ee:	021b      	lsls	r3, r3, #8
 800b9f0:	697a      	ldr	r2, [r7, #20]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	697a      	ldr	r2, [r7, #20]
 800b9fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	685a      	ldr	r2, [r3, #4]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	621a      	str	r2, [r3, #32]
}
 800ba10:	bf00      	nop
 800ba12:	371c      	adds	r7, #28
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr
 800ba1c:	fffeff8f 	.word	0xfffeff8f
 800ba20:	40010000 	.word	0x40010000
 800ba24:	40010400 	.word	0x40010400
 800ba28:	40014000 	.word	0x40014000
 800ba2c:	40014400 	.word	0x40014400
 800ba30:	40014800 	.word	0x40014800

0800ba34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b087      	sub	sp, #28
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a1b      	ldr	r3, [r3, #32]
 800ba42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a1b      	ldr	r3, [r3, #32]
 800ba48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	4b22      	ldr	r3, [pc, #136]	@ (800bae8 <TIM_OC6_SetConfig+0xb4>)
 800ba60:	4013      	ands	r3, r2
 800ba62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	021b      	lsls	r3, r3, #8
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ba76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	051b      	lsls	r3, r3, #20
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a19      	ldr	r2, [pc, #100]	@ (800baec <TIM_OC6_SetConfig+0xb8>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d00f      	beq.n	800baac <TIM_OC6_SetConfig+0x78>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4a18      	ldr	r2, [pc, #96]	@ (800baf0 <TIM_OC6_SetConfig+0xbc>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d00b      	beq.n	800baac <TIM_OC6_SetConfig+0x78>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a17      	ldr	r2, [pc, #92]	@ (800baf4 <TIM_OC6_SetConfig+0xc0>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d007      	beq.n	800baac <TIM_OC6_SetConfig+0x78>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4a16      	ldr	r2, [pc, #88]	@ (800baf8 <TIM_OC6_SetConfig+0xc4>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d003      	beq.n	800baac <TIM_OC6_SetConfig+0x78>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a15      	ldr	r2, [pc, #84]	@ (800bafc <TIM_OC6_SetConfig+0xc8>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d109      	bne.n	800bac0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bab2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	695b      	ldr	r3, [r3, #20]
 800bab8:	029b      	lsls	r3, r3, #10
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	4313      	orrs	r3, r2
 800babe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	685a      	ldr	r2, [r3, #4]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	693a      	ldr	r2, [r7, #16]
 800bad8:	621a      	str	r2, [r3, #32]
}
 800bada:	bf00      	nop
 800badc:	371c      	adds	r7, #28
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	feff8fff 	.word	0xfeff8fff
 800baec:	40010000 	.word	0x40010000
 800baf0:	40010400 	.word	0x40010400
 800baf4:	40014000 	.word	0x40014000
 800baf8:	40014400 	.word	0x40014400
 800bafc:	40014800 	.word	0x40014800

0800bb00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b087      	sub	sp, #28
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6a1b      	ldr	r3, [r3, #32]
 800bb10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6a1b      	ldr	r3, [r3, #32]
 800bb16:	f023 0201 	bic.w	r2, r3, #1
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	699b      	ldr	r3, [r3, #24]
 800bb22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	011b      	lsls	r3, r3, #4
 800bb30:	693a      	ldr	r2, [r7, #16]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f023 030a 	bic.w	r3, r3, #10
 800bb3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	4313      	orrs	r3, r2
 800bb44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	693a      	ldr	r2, [r7, #16]
 800bb4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	621a      	str	r2, [r3, #32]
}
 800bb52:	bf00      	nop
 800bb54:	371c      	adds	r7, #28
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb5e:	b480      	push	{r7}
 800bb60:	b087      	sub	sp, #28
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	60f8      	str	r0, [r7, #12]
 800bb66:	60b9      	str	r1, [r7, #8]
 800bb68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6a1b      	ldr	r3, [r3, #32]
 800bb74:	f023 0210 	bic.w	r2, r3, #16
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bb88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	031b      	lsls	r3, r3, #12
 800bb8e:	693a      	ldr	r2, [r7, #16]
 800bb90:	4313      	orrs	r3, r2
 800bb92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bb9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	011b      	lsls	r3, r3, #4
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	4313      	orrs	r3, r2
 800bba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	621a      	str	r2, [r3, #32]
}
 800bbb2:	bf00      	nop
 800bbb4:	371c      	adds	r7, #28
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
	...

0800bbc0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	4b09      	ldr	r3, [pc, #36]	@ (800bbf8 <TIM_ITRx_SetConfig+0x38>)
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbd8:	683a      	ldr	r2, [r7, #0]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	f043 0307 	orr.w	r3, r3, #7
 800bbe2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	609a      	str	r2, [r3, #8]
}
 800bbea:	bf00      	nop
 800bbec:	3714      	adds	r7, #20
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	ffcfff8f 	.word	0xffcfff8f

0800bbfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b087      	sub	sp, #28
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
 800bc08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	021a      	lsls	r2, r3, #8
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	431a      	orrs	r2, r3
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	697a      	ldr	r2, [r7, #20]
 800bc2e:	609a      	str	r2, [r3, #8]
}
 800bc30:	bf00      	nop
 800bc32:	371c      	adds	r7, #28
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d101      	bne.n	800bc54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc50:	2302      	movs	r3, #2
 800bc52:	e06d      	b.n	800bd30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2202      	movs	r2, #2
 800bc60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a30      	ldr	r2, [pc, #192]	@ (800bd3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d004      	beq.n	800bc88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a2f      	ldr	r2, [pc, #188]	@ (800bd40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d108      	bne.n	800bc9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bc8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bca0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a20      	ldr	r2, [pc, #128]	@ (800bd3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d022      	beq.n	800bd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcc6:	d01d      	beq.n	800bd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a1d      	ldr	r2, [pc, #116]	@ (800bd44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d018      	beq.n	800bd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a1c      	ldr	r2, [pc, #112]	@ (800bd48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d013      	beq.n	800bd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a1a      	ldr	r2, [pc, #104]	@ (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d00e      	beq.n	800bd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a15      	ldr	r2, [pc, #84]	@ (800bd40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d009      	beq.n	800bd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a16      	ldr	r2, [pc, #88]	@ (800bd50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d004      	beq.n	800bd04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a15      	ldr	r2, [pc, #84]	@ (800bd54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d10c      	bne.n	800bd1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	4313      	orrs	r3, r2
 800bd14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68ba      	ldr	r2, [r7, #8]
 800bd1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	40010000 	.word	0x40010000
 800bd40:	40010400 	.word	0x40010400
 800bd44:	40000400 	.word	0x40000400
 800bd48:	40000800 	.word	0x40000800
 800bd4c:	40000c00 	.word	0x40000c00
 800bd50:	40001800 	.word	0x40001800
 800bd54:	40014000 	.word	0x40014000

0800bd58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd74:	bf00      	nop
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d101      	bne.n	800bda6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	e042      	b.n	800be2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d106      	bne.n	800bdbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f7f9 f829 	bl	8004e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2224      	movs	r2, #36	@ 0x24
 800bdc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f022 0201 	bic.w	r2, r2, #1
 800bdd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d002      	beq.n	800bde4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fd90 	bl	800c904 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f825 	bl	800be34 <UART_SetConfig>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d101      	bne.n	800bdf4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e01b      	b.n	800be2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	685a      	ldr	r2, [r3, #4]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689a      	ldr	r2, [r3, #8]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f042 0201 	orr.w	r2, r2, #1
 800be22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fe0f 	bl	800ca48 <UART_CheckIdleState>
 800be2a:	4603      	mov	r3, r0
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be38:	b092      	sub	sp, #72	@ 0x48
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be3e:	2300      	movs	r3, #0
 800be40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	689a      	ldr	r2, [r3, #8]
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	431a      	orrs	r2, r3
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	431a      	orrs	r2, r3
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	69db      	ldr	r3, [r3, #28]
 800be58:	4313      	orrs	r3, r2
 800be5a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	4bbe      	ldr	r3, [pc, #760]	@ (800c15c <UART_SetConfig+0x328>)
 800be64:	4013      	ands	r3, r2
 800be66:	697a      	ldr	r2, [r7, #20]
 800be68:	6812      	ldr	r2, [r2, #0]
 800be6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be6c:	430b      	orrs	r3, r1
 800be6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	68da      	ldr	r2, [r3, #12]
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	430a      	orrs	r2, r1
 800be84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	699b      	ldr	r3, [r3, #24]
 800be8a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4ab3      	ldr	r2, [pc, #716]	@ (800c160 <UART_SetConfig+0x32c>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d004      	beq.n	800bea0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	6a1b      	ldr	r3, [r3, #32]
 800be9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be9c:	4313      	orrs	r3, r2
 800be9e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	689a      	ldr	r2, [r3, #8]
 800bea6:	4baf      	ldr	r3, [pc, #700]	@ (800c164 <UART_SetConfig+0x330>)
 800bea8:	4013      	ands	r3, r2
 800beaa:	697a      	ldr	r2, [r7, #20]
 800beac:	6812      	ldr	r2, [r2, #0]
 800beae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800beb0:	430b      	orrs	r3, r1
 800beb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beba:	f023 010f 	bic.w	r1, r3, #15
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	430a      	orrs	r2, r1
 800bec8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4aa6      	ldr	r2, [pc, #664]	@ (800c168 <UART_SetConfig+0x334>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d177      	bne.n	800bfc4 <UART_SetConfig+0x190>
 800bed4:	4ba5      	ldr	r3, [pc, #660]	@ (800c16c <UART_SetConfig+0x338>)
 800bed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bed8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bedc:	2b28      	cmp	r3, #40	@ 0x28
 800bede:	d86d      	bhi.n	800bfbc <UART_SetConfig+0x188>
 800bee0:	a201      	add	r2, pc, #4	@ (adr r2, 800bee8 <UART_SetConfig+0xb4>)
 800bee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee6:	bf00      	nop
 800bee8:	0800bf8d 	.word	0x0800bf8d
 800beec:	0800bfbd 	.word	0x0800bfbd
 800bef0:	0800bfbd 	.word	0x0800bfbd
 800bef4:	0800bfbd 	.word	0x0800bfbd
 800bef8:	0800bfbd 	.word	0x0800bfbd
 800befc:	0800bfbd 	.word	0x0800bfbd
 800bf00:	0800bfbd 	.word	0x0800bfbd
 800bf04:	0800bfbd 	.word	0x0800bfbd
 800bf08:	0800bf95 	.word	0x0800bf95
 800bf0c:	0800bfbd 	.word	0x0800bfbd
 800bf10:	0800bfbd 	.word	0x0800bfbd
 800bf14:	0800bfbd 	.word	0x0800bfbd
 800bf18:	0800bfbd 	.word	0x0800bfbd
 800bf1c:	0800bfbd 	.word	0x0800bfbd
 800bf20:	0800bfbd 	.word	0x0800bfbd
 800bf24:	0800bfbd 	.word	0x0800bfbd
 800bf28:	0800bf9d 	.word	0x0800bf9d
 800bf2c:	0800bfbd 	.word	0x0800bfbd
 800bf30:	0800bfbd 	.word	0x0800bfbd
 800bf34:	0800bfbd 	.word	0x0800bfbd
 800bf38:	0800bfbd 	.word	0x0800bfbd
 800bf3c:	0800bfbd 	.word	0x0800bfbd
 800bf40:	0800bfbd 	.word	0x0800bfbd
 800bf44:	0800bfbd 	.word	0x0800bfbd
 800bf48:	0800bfa5 	.word	0x0800bfa5
 800bf4c:	0800bfbd 	.word	0x0800bfbd
 800bf50:	0800bfbd 	.word	0x0800bfbd
 800bf54:	0800bfbd 	.word	0x0800bfbd
 800bf58:	0800bfbd 	.word	0x0800bfbd
 800bf5c:	0800bfbd 	.word	0x0800bfbd
 800bf60:	0800bfbd 	.word	0x0800bfbd
 800bf64:	0800bfbd 	.word	0x0800bfbd
 800bf68:	0800bfad 	.word	0x0800bfad
 800bf6c:	0800bfbd 	.word	0x0800bfbd
 800bf70:	0800bfbd 	.word	0x0800bfbd
 800bf74:	0800bfbd 	.word	0x0800bfbd
 800bf78:	0800bfbd 	.word	0x0800bfbd
 800bf7c:	0800bfbd 	.word	0x0800bfbd
 800bf80:	0800bfbd 	.word	0x0800bfbd
 800bf84:	0800bfbd 	.word	0x0800bfbd
 800bf88:	0800bfb5 	.word	0x0800bfb5
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf92:	e222      	b.n	800c3da <UART_SetConfig+0x5a6>
 800bf94:	2304      	movs	r3, #4
 800bf96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf9a:	e21e      	b.n	800c3da <UART_SetConfig+0x5a6>
 800bf9c:	2308      	movs	r3, #8
 800bf9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfa2:	e21a      	b.n	800c3da <UART_SetConfig+0x5a6>
 800bfa4:	2310      	movs	r3, #16
 800bfa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfaa:	e216      	b.n	800c3da <UART_SetConfig+0x5a6>
 800bfac:	2320      	movs	r3, #32
 800bfae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfb2:	e212      	b.n	800c3da <UART_SetConfig+0x5a6>
 800bfb4:	2340      	movs	r3, #64	@ 0x40
 800bfb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfba:	e20e      	b.n	800c3da <UART_SetConfig+0x5a6>
 800bfbc:	2380      	movs	r3, #128	@ 0x80
 800bfbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfc2:	e20a      	b.n	800c3da <UART_SetConfig+0x5a6>
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a69      	ldr	r2, [pc, #420]	@ (800c170 <UART_SetConfig+0x33c>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d130      	bne.n	800c030 <UART_SetConfig+0x1fc>
 800bfce:	4b67      	ldr	r3, [pc, #412]	@ (800c16c <UART_SetConfig+0x338>)
 800bfd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfd2:	f003 0307 	and.w	r3, r3, #7
 800bfd6:	2b05      	cmp	r3, #5
 800bfd8:	d826      	bhi.n	800c028 <UART_SetConfig+0x1f4>
 800bfda:	a201      	add	r2, pc, #4	@ (adr r2, 800bfe0 <UART_SetConfig+0x1ac>)
 800bfdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe0:	0800bff9 	.word	0x0800bff9
 800bfe4:	0800c001 	.word	0x0800c001
 800bfe8:	0800c009 	.word	0x0800c009
 800bfec:	0800c011 	.word	0x0800c011
 800bff0:	0800c019 	.word	0x0800c019
 800bff4:	0800c021 	.word	0x0800c021
 800bff8:	2300      	movs	r3, #0
 800bffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bffe:	e1ec      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c000:	2304      	movs	r3, #4
 800c002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c006:	e1e8      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c008:	2308      	movs	r3, #8
 800c00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c00e:	e1e4      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c010:	2310      	movs	r3, #16
 800c012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c016:	e1e0      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c018:	2320      	movs	r3, #32
 800c01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c01e:	e1dc      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c020:	2340      	movs	r3, #64	@ 0x40
 800c022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c026:	e1d8      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c028:	2380      	movs	r3, #128	@ 0x80
 800c02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c02e:	e1d4      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a4f      	ldr	r2, [pc, #316]	@ (800c174 <UART_SetConfig+0x340>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d130      	bne.n	800c09c <UART_SetConfig+0x268>
 800c03a:	4b4c      	ldr	r3, [pc, #304]	@ (800c16c <UART_SetConfig+0x338>)
 800c03c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c03e:	f003 0307 	and.w	r3, r3, #7
 800c042:	2b05      	cmp	r3, #5
 800c044:	d826      	bhi.n	800c094 <UART_SetConfig+0x260>
 800c046:	a201      	add	r2, pc, #4	@ (adr r2, 800c04c <UART_SetConfig+0x218>)
 800c048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04c:	0800c065 	.word	0x0800c065
 800c050:	0800c06d 	.word	0x0800c06d
 800c054:	0800c075 	.word	0x0800c075
 800c058:	0800c07d 	.word	0x0800c07d
 800c05c:	0800c085 	.word	0x0800c085
 800c060:	0800c08d 	.word	0x0800c08d
 800c064:	2300      	movs	r3, #0
 800c066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c06a:	e1b6      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c06c:	2304      	movs	r3, #4
 800c06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c072:	e1b2      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c074:	2308      	movs	r3, #8
 800c076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c07a:	e1ae      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c07c:	2310      	movs	r3, #16
 800c07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c082:	e1aa      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c084:	2320      	movs	r3, #32
 800c086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c08a:	e1a6      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c08c:	2340      	movs	r3, #64	@ 0x40
 800c08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c092:	e1a2      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c094:	2380      	movs	r3, #128	@ 0x80
 800c096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c09a:	e19e      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a35      	ldr	r2, [pc, #212]	@ (800c178 <UART_SetConfig+0x344>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d130      	bne.n	800c108 <UART_SetConfig+0x2d4>
 800c0a6:	4b31      	ldr	r3, [pc, #196]	@ (800c16c <UART_SetConfig+0x338>)
 800c0a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0aa:	f003 0307 	and.w	r3, r3, #7
 800c0ae:	2b05      	cmp	r3, #5
 800c0b0:	d826      	bhi.n	800c100 <UART_SetConfig+0x2cc>
 800c0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0b8 <UART_SetConfig+0x284>)
 800c0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b8:	0800c0d1 	.word	0x0800c0d1
 800c0bc:	0800c0d9 	.word	0x0800c0d9
 800c0c0:	0800c0e1 	.word	0x0800c0e1
 800c0c4:	0800c0e9 	.word	0x0800c0e9
 800c0c8:	0800c0f1 	.word	0x0800c0f1
 800c0cc:	0800c0f9 	.word	0x0800c0f9
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0d6:	e180      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c0d8:	2304      	movs	r3, #4
 800c0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0de:	e17c      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c0e0:	2308      	movs	r3, #8
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0e6:	e178      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c0e8:	2310      	movs	r3, #16
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ee:	e174      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c0f0:	2320      	movs	r3, #32
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0f6:	e170      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c0f8:	2340      	movs	r3, #64	@ 0x40
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0fe:	e16c      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c100:	2380      	movs	r3, #128	@ 0x80
 800c102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c106:	e168      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a1b      	ldr	r2, [pc, #108]	@ (800c17c <UART_SetConfig+0x348>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d142      	bne.n	800c198 <UART_SetConfig+0x364>
 800c112:	4b16      	ldr	r3, [pc, #88]	@ (800c16c <UART_SetConfig+0x338>)
 800c114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c116:	f003 0307 	and.w	r3, r3, #7
 800c11a:	2b05      	cmp	r3, #5
 800c11c:	d838      	bhi.n	800c190 <UART_SetConfig+0x35c>
 800c11e:	a201      	add	r2, pc, #4	@ (adr r2, 800c124 <UART_SetConfig+0x2f0>)
 800c120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c124:	0800c13d 	.word	0x0800c13d
 800c128:	0800c145 	.word	0x0800c145
 800c12c:	0800c14d 	.word	0x0800c14d
 800c130:	0800c155 	.word	0x0800c155
 800c134:	0800c181 	.word	0x0800c181
 800c138:	0800c189 	.word	0x0800c189
 800c13c:	2300      	movs	r3, #0
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c142:	e14a      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c144:	2304      	movs	r3, #4
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c14a:	e146      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c14c:	2308      	movs	r3, #8
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c152:	e142      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c154:	2310      	movs	r3, #16
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c15a:	e13e      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c15c:	cfff69f3 	.word	0xcfff69f3
 800c160:	58000c00 	.word	0x58000c00
 800c164:	11fff4ff 	.word	0x11fff4ff
 800c168:	40011000 	.word	0x40011000
 800c16c:	58024400 	.word	0x58024400
 800c170:	40004400 	.word	0x40004400
 800c174:	40004800 	.word	0x40004800
 800c178:	40004c00 	.word	0x40004c00
 800c17c:	40005000 	.word	0x40005000
 800c180:	2320      	movs	r3, #32
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c186:	e128      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c188:	2340      	movs	r3, #64	@ 0x40
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c18e:	e124      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c190:	2380      	movs	r3, #128	@ 0x80
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c196:	e120      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4acb      	ldr	r2, [pc, #812]	@ (800c4cc <UART_SetConfig+0x698>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d176      	bne.n	800c290 <UART_SetConfig+0x45c>
 800c1a2:	4bcb      	ldr	r3, [pc, #812]	@ (800c4d0 <UART_SetConfig+0x69c>)
 800c1a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c1aa:	2b28      	cmp	r3, #40	@ 0x28
 800c1ac:	d86c      	bhi.n	800c288 <UART_SetConfig+0x454>
 800c1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c1b4 <UART_SetConfig+0x380>)
 800c1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b4:	0800c259 	.word	0x0800c259
 800c1b8:	0800c289 	.word	0x0800c289
 800c1bc:	0800c289 	.word	0x0800c289
 800c1c0:	0800c289 	.word	0x0800c289
 800c1c4:	0800c289 	.word	0x0800c289
 800c1c8:	0800c289 	.word	0x0800c289
 800c1cc:	0800c289 	.word	0x0800c289
 800c1d0:	0800c289 	.word	0x0800c289
 800c1d4:	0800c261 	.word	0x0800c261
 800c1d8:	0800c289 	.word	0x0800c289
 800c1dc:	0800c289 	.word	0x0800c289
 800c1e0:	0800c289 	.word	0x0800c289
 800c1e4:	0800c289 	.word	0x0800c289
 800c1e8:	0800c289 	.word	0x0800c289
 800c1ec:	0800c289 	.word	0x0800c289
 800c1f0:	0800c289 	.word	0x0800c289
 800c1f4:	0800c269 	.word	0x0800c269
 800c1f8:	0800c289 	.word	0x0800c289
 800c1fc:	0800c289 	.word	0x0800c289
 800c200:	0800c289 	.word	0x0800c289
 800c204:	0800c289 	.word	0x0800c289
 800c208:	0800c289 	.word	0x0800c289
 800c20c:	0800c289 	.word	0x0800c289
 800c210:	0800c289 	.word	0x0800c289
 800c214:	0800c271 	.word	0x0800c271
 800c218:	0800c289 	.word	0x0800c289
 800c21c:	0800c289 	.word	0x0800c289
 800c220:	0800c289 	.word	0x0800c289
 800c224:	0800c289 	.word	0x0800c289
 800c228:	0800c289 	.word	0x0800c289
 800c22c:	0800c289 	.word	0x0800c289
 800c230:	0800c289 	.word	0x0800c289
 800c234:	0800c279 	.word	0x0800c279
 800c238:	0800c289 	.word	0x0800c289
 800c23c:	0800c289 	.word	0x0800c289
 800c240:	0800c289 	.word	0x0800c289
 800c244:	0800c289 	.word	0x0800c289
 800c248:	0800c289 	.word	0x0800c289
 800c24c:	0800c289 	.word	0x0800c289
 800c250:	0800c289 	.word	0x0800c289
 800c254:	0800c281 	.word	0x0800c281
 800c258:	2301      	movs	r3, #1
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c25e:	e0bc      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c260:	2304      	movs	r3, #4
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c266:	e0b8      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c268:	2308      	movs	r3, #8
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26e:	e0b4      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c270:	2310      	movs	r3, #16
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c276:	e0b0      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c278:	2320      	movs	r3, #32
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c27e:	e0ac      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c280:	2340      	movs	r3, #64	@ 0x40
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c286:	e0a8      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c288:	2380      	movs	r3, #128	@ 0x80
 800c28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c28e:	e0a4      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a8f      	ldr	r2, [pc, #572]	@ (800c4d4 <UART_SetConfig+0x6a0>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d130      	bne.n	800c2fc <UART_SetConfig+0x4c8>
 800c29a:	4b8d      	ldr	r3, [pc, #564]	@ (800c4d0 <UART_SetConfig+0x69c>)
 800c29c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c29e:	f003 0307 	and.w	r3, r3, #7
 800c2a2:	2b05      	cmp	r3, #5
 800c2a4:	d826      	bhi.n	800c2f4 <UART_SetConfig+0x4c0>
 800c2a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c2ac <UART_SetConfig+0x478>)
 800c2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ac:	0800c2c5 	.word	0x0800c2c5
 800c2b0:	0800c2cd 	.word	0x0800c2cd
 800c2b4:	0800c2d5 	.word	0x0800c2d5
 800c2b8:	0800c2dd 	.word	0x0800c2dd
 800c2bc:	0800c2e5 	.word	0x0800c2e5
 800c2c0:	0800c2ed 	.word	0x0800c2ed
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ca:	e086      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c2cc:	2304      	movs	r3, #4
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d2:	e082      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c2d4:	2308      	movs	r3, #8
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2da:	e07e      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c2dc:	2310      	movs	r3, #16
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e2:	e07a      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c2e4:	2320      	movs	r3, #32
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ea:	e076      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c2ec:	2340      	movs	r3, #64	@ 0x40
 800c2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2f2:	e072      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c2f4:	2380      	movs	r3, #128	@ 0x80
 800c2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2fa:	e06e      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a75      	ldr	r2, [pc, #468]	@ (800c4d8 <UART_SetConfig+0x6a4>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d130      	bne.n	800c368 <UART_SetConfig+0x534>
 800c306:	4b72      	ldr	r3, [pc, #456]	@ (800c4d0 <UART_SetConfig+0x69c>)
 800c308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c30a:	f003 0307 	and.w	r3, r3, #7
 800c30e:	2b05      	cmp	r3, #5
 800c310:	d826      	bhi.n	800c360 <UART_SetConfig+0x52c>
 800c312:	a201      	add	r2, pc, #4	@ (adr r2, 800c318 <UART_SetConfig+0x4e4>)
 800c314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c318:	0800c331 	.word	0x0800c331
 800c31c:	0800c339 	.word	0x0800c339
 800c320:	0800c341 	.word	0x0800c341
 800c324:	0800c349 	.word	0x0800c349
 800c328:	0800c351 	.word	0x0800c351
 800c32c:	0800c359 	.word	0x0800c359
 800c330:	2300      	movs	r3, #0
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c336:	e050      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c338:	2304      	movs	r3, #4
 800c33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c33e:	e04c      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c340:	2308      	movs	r3, #8
 800c342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c346:	e048      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c348:	2310      	movs	r3, #16
 800c34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c34e:	e044      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c350:	2320      	movs	r3, #32
 800c352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c356:	e040      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c358:	2340      	movs	r3, #64	@ 0x40
 800c35a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c35e:	e03c      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c360:	2380      	movs	r3, #128	@ 0x80
 800c362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c366:	e038      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a5b      	ldr	r2, [pc, #364]	@ (800c4dc <UART_SetConfig+0x6a8>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d130      	bne.n	800c3d4 <UART_SetConfig+0x5a0>
 800c372:	4b57      	ldr	r3, [pc, #348]	@ (800c4d0 <UART_SetConfig+0x69c>)
 800c374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c376:	f003 0307 	and.w	r3, r3, #7
 800c37a:	2b05      	cmp	r3, #5
 800c37c:	d826      	bhi.n	800c3cc <UART_SetConfig+0x598>
 800c37e:	a201      	add	r2, pc, #4	@ (adr r2, 800c384 <UART_SetConfig+0x550>)
 800c380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c384:	0800c39d 	.word	0x0800c39d
 800c388:	0800c3a5 	.word	0x0800c3a5
 800c38c:	0800c3ad 	.word	0x0800c3ad
 800c390:	0800c3b5 	.word	0x0800c3b5
 800c394:	0800c3bd 	.word	0x0800c3bd
 800c398:	0800c3c5 	.word	0x0800c3c5
 800c39c:	2302      	movs	r3, #2
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3a2:	e01a      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c3a4:	2304      	movs	r3, #4
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3aa:	e016      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c3ac:	2308      	movs	r3, #8
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3b2:	e012      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c3b4:	2310      	movs	r3, #16
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ba:	e00e      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c3bc:	2320      	movs	r3, #32
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3c2:	e00a      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c3c4:	2340      	movs	r3, #64	@ 0x40
 800c3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ca:	e006      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c3cc:	2380      	movs	r3, #128	@ 0x80
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3d2:	e002      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c3d4:	2380      	movs	r3, #128	@ 0x80
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a3f      	ldr	r2, [pc, #252]	@ (800c4dc <UART_SetConfig+0x6a8>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	f040 80f8 	bne.w	800c5d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c3e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c3ea:	2b20      	cmp	r3, #32
 800c3ec:	dc46      	bgt.n	800c47c <UART_SetConfig+0x648>
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	f2c0 8082 	blt.w	800c4f8 <UART_SetConfig+0x6c4>
 800c3f4:	3b02      	subs	r3, #2
 800c3f6:	2b1e      	cmp	r3, #30
 800c3f8:	d87e      	bhi.n	800c4f8 <UART_SetConfig+0x6c4>
 800c3fa:	a201      	add	r2, pc, #4	@ (adr r2, 800c400 <UART_SetConfig+0x5cc>)
 800c3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c400:	0800c483 	.word	0x0800c483
 800c404:	0800c4f9 	.word	0x0800c4f9
 800c408:	0800c48b 	.word	0x0800c48b
 800c40c:	0800c4f9 	.word	0x0800c4f9
 800c410:	0800c4f9 	.word	0x0800c4f9
 800c414:	0800c4f9 	.word	0x0800c4f9
 800c418:	0800c49b 	.word	0x0800c49b
 800c41c:	0800c4f9 	.word	0x0800c4f9
 800c420:	0800c4f9 	.word	0x0800c4f9
 800c424:	0800c4f9 	.word	0x0800c4f9
 800c428:	0800c4f9 	.word	0x0800c4f9
 800c42c:	0800c4f9 	.word	0x0800c4f9
 800c430:	0800c4f9 	.word	0x0800c4f9
 800c434:	0800c4f9 	.word	0x0800c4f9
 800c438:	0800c4ab 	.word	0x0800c4ab
 800c43c:	0800c4f9 	.word	0x0800c4f9
 800c440:	0800c4f9 	.word	0x0800c4f9
 800c444:	0800c4f9 	.word	0x0800c4f9
 800c448:	0800c4f9 	.word	0x0800c4f9
 800c44c:	0800c4f9 	.word	0x0800c4f9
 800c450:	0800c4f9 	.word	0x0800c4f9
 800c454:	0800c4f9 	.word	0x0800c4f9
 800c458:	0800c4f9 	.word	0x0800c4f9
 800c45c:	0800c4f9 	.word	0x0800c4f9
 800c460:	0800c4f9 	.word	0x0800c4f9
 800c464:	0800c4f9 	.word	0x0800c4f9
 800c468:	0800c4f9 	.word	0x0800c4f9
 800c46c:	0800c4f9 	.word	0x0800c4f9
 800c470:	0800c4f9 	.word	0x0800c4f9
 800c474:	0800c4f9 	.word	0x0800c4f9
 800c478:	0800c4eb 	.word	0x0800c4eb
 800c47c:	2b40      	cmp	r3, #64	@ 0x40
 800c47e:	d037      	beq.n	800c4f0 <UART_SetConfig+0x6bc>
 800c480:	e03a      	b.n	800c4f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c482:	f7fd fa5d 	bl	8009940 <HAL_RCCEx_GetD3PCLK1Freq>
 800c486:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c488:	e03c      	b.n	800c504 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c48a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fd fa6c 	bl	800996c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c498:	e034      	b.n	800c504 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c49a:	f107 0318 	add.w	r3, r7, #24
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7fd fbb8 	bl	8009c14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4a8:	e02c      	b.n	800c504 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4aa:	4b09      	ldr	r3, [pc, #36]	@ (800c4d0 <UART_SetConfig+0x69c>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f003 0320 	and.w	r3, r3, #32
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d016      	beq.n	800c4e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c4b6:	4b06      	ldr	r3, [pc, #24]	@ (800c4d0 <UART_SetConfig+0x69c>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	08db      	lsrs	r3, r3, #3
 800c4bc:	f003 0303 	and.w	r3, r3, #3
 800c4c0:	4a07      	ldr	r2, [pc, #28]	@ (800c4e0 <UART_SetConfig+0x6ac>)
 800c4c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c4c8:	e01c      	b.n	800c504 <UART_SetConfig+0x6d0>
 800c4ca:	bf00      	nop
 800c4cc:	40011400 	.word	0x40011400
 800c4d0:	58024400 	.word	0x58024400
 800c4d4:	40007800 	.word	0x40007800
 800c4d8:	40007c00 	.word	0x40007c00
 800c4dc:	58000c00 	.word	0x58000c00
 800c4e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c4e4:	4b9d      	ldr	r3, [pc, #628]	@ (800c75c <UART_SetConfig+0x928>)
 800c4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4e8:	e00c      	b.n	800c504 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c4ea:	4b9d      	ldr	r3, [pc, #628]	@ (800c760 <UART_SetConfig+0x92c>)
 800c4ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4ee:	e009      	b.n	800c504 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4f6:	e005      	b.n	800c504 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c502:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c506:	2b00      	cmp	r3, #0
 800c508:	f000 81de 	beq.w	800c8c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c510:	4a94      	ldr	r2, [pc, #592]	@ (800c764 <UART_SetConfig+0x930>)
 800c512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c516:	461a      	mov	r2, r3
 800c518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c51a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c51e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	685a      	ldr	r2, [r3, #4]
 800c524:	4613      	mov	r3, r2
 800c526:	005b      	lsls	r3, r3, #1
 800c528:	4413      	add	r3, r2
 800c52a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d305      	bcc.n	800c53c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c538:	429a      	cmp	r2, r3
 800c53a:	d903      	bls.n	800c544 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c53c:	2301      	movs	r3, #1
 800c53e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c542:	e1c1      	b.n	800c8c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c546:	2200      	movs	r2, #0
 800c548:	60bb      	str	r3, [r7, #8]
 800c54a:	60fa      	str	r2, [r7, #12]
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c550:	4a84      	ldr	r2, [pc, #528]	@ (800c764 <UART_SetConfig+0x930>)
 800c552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c556:	b29b      	uxth	r3, r3
 800c558:	2200      	movs	r2, #0
 800c55a:	603b      	str	r3, [r7, #0]
 800c55c:	607a      	str	r2, [r7, #4]
 800c55e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c562:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c566:	f7f3 ff0b 	bl	8000380 <__aeabi_uldivmod>
 800c56a:	4602      	mov	r2, r0
 800c56c:	460b      	mov	r3, r1
 800c56e:	4610      	mov	r0, r2
 800c570:	4619      	mov	r1, r3
 800c572:	f04f 0200 	mov.w	r2, #0
 800c576:	f04f 0300 	mov.w	r3, #0
 800c57a:	020b      	lsls	r3, r1, #8
 800c57c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c580:	0202      	lsls	r2, r0, #8
 800c582:	6979      	ldr	r1, [r7, #20]
 800c584:	6849      	ldr	r1, [r1, #4]
 800c586:	0849      	lsrs	r1, r1, #1
 800c588:	2000      	movs	r0, #0
 800c58a:	460c      	mov	r4, r1
 800c58c:	4605      	mov	r5, r0
 800c58e:	eb12 0804 	adds.w	r8, r2, r4
 800c592:	eb43 0905 	adc.w	r9, r3, r5
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	469a      	mov	sl, r3
 800c59e:	4693      	mov	fp, r2
 800c5a0:	4652      	mov	r2, sl
 800c5a2:	465b      	mov	r3, fp
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	4649      	mov	r1, r9
 800c5a8:	f7f3 feea 	bl	8000380 <__aeabi_uldivmod>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5ba:	d308      	bcc.n	800c5ce <UART_SetConfig+0x79a>
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5c2:	d204      	bcs.n	800c5ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5ca:	60da      	str	r2, [r3, #12]
 800c5cc:	e17c      	b.n	800c8c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c5d4:	e178      	b.n	800c8c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	69db      	ldr	r3, [r3, #28]
 800c5da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c5de:	f040 80c5 	bne.w	800c76c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c5e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c5e6:	2b20      	cmp	r3, #32
 800c5e8:	dc48      	bgt.n	800c67c <UART_SetConfig+0x848>
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	db7b      	blt.n	800c6e6 <UART_SetConfig+0x8b2>
 800c5ee:	2b20      	cmp	r3, #32
 800c5f0:	d879      	bhi.n	800c6e6 <UART_SetConfig+0x8b2>
 800c5f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f8 <UART_SetConfig+0x7c4>)
 800c5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f8:	0800c683 	.word	0x0800c683
 800c5fc:	0800c68b 	.word	0x0800c68b
 800c600:	0800c6e7 	.word	0x0800c6e7
 800c604:	0800c6e7 	.word	0x0800c6e7
 800c608:	0800c693 	.word	0x0800c693
 800c60c:	0800c6e7 	.word	0x0800c6e7
 800c610:	0800c6e7 	.word	0x0800c6e7
 800c614:	0800c6e7 	.word	0x0800c6e7
 800c618:	0800c6a3 	.word	0x0800c6a3
 800c61c:	0800c6e7 	.word	0x0800c6e7
 800c620:	0800c6e7 	.word	0x0800c6e7
 800c624:	0800c6e7 	.word	0x0800c6e7
 800c628:	0800c6e7 	.word	0x0800c6e7
 800c62c:	0800c6e7 	.word	0x0800c6e7
 800c630:	0800c6e7 	.word	0x0800c6e7
 800c634:	0800c6e7 	.word	0x0800c6e7
 800c638:	0800c6b3 	.word	0x0800c6b3
 800c63c:	0800c6e7 	.word	0x0800c6e7
 800c640:	0800c6e7 	.word	0x0800c6e7
 800c644:	0800c6e7 	.word	0x0800c6e7
 800c648:	0800c6e7 	.word	0x0800c6e7
 800c64c:	0800c6e7 	.word	0x0800c6e7
 800c650:	0800c6e7 	.word	0x0800c6e7
 800c654:	0800c6e7 	.word	0x0800c6e7
 800c658:	0800c6e7 	.word	0x0800c6e7
 800c65c:	0800c6e7 	.word	0x0800c6e7
 800c660:	0800c6e7 	.word	0x0800c6e7
 800c664:	0800c6e7 	.word	0x0800c6e7
 800c668:	0800c6e7 	.word	0x0800c6e7
 800c66c:	0800c6e7 	.word	0x0800c6e7
 800c670:	0800c6e7 	.word	0x0800c6e7
 800c674:	0800c6e7 	.word	0x0800c6e7
 800c678:	0800c6d9 	.word	0x0800c6d9
 800c67c:	2b40      	cmp	r3, #64	@ 0x40
 800c67e:	d02e      	beq.n	800c6de <UART_SetConfig+0x8aa>
 800c680:	e031      	b.n	800c6e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c682:	f7fb fee5 	bl	8008450 <HAL_RCC_GetPCLK1Freq>
 800c686:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c688:	e033      	b.n	800c6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c68a:	f7fb fef7 	bl	800847c <HAL_RCC_GetPCLK2Freq>
 800c68e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c690:	e02f      	b.n	800c6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c696:	4618      	mov	r0, r3
 800c698:	f7fd f968 	bl	800996c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6a0:	e027      	b.n	800c6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6a2:	f107 0318 	add.w	r3, r7, #24
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fd fab4 	bl	8009c14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6b0:	e01f      	b.n	800c6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6b2:	4b2d      	ldr	r3, [pc, #180]	@ (800c768 <UART_SetConfig+0x934>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 0320 	and.w	r3, r3, #32
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d009      	beq.n	800c6d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6be:	4b2a      	ldr	r3, [pc, #168]	@ (800c768 <UART_SetConfig+0x934>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	08db      	lsrs	r3, r3, #3
 800c6c4:	f003 0303 	and.w	r3, r3, #3
 800c6c8:	4a24      	ldr	r2, [pc, #144]	@ (800c75c <UART_SetConfig+0x928>)
 800c6ca:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6d0:	e00f      	b.n	800c6f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c6d2:	4b22      	ldr	r3, [pc, #136]	@ (800c75c <UART_SetConfig+0x928>)
 800c6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6d6:	e00c      	b.n	800c6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6d8:	4b21      	ldr	r3, [pc, #132]	@ (800c760 <UART_SetConfig+0x92c>)
 800c6da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6dc:	e009      	b.n	800c6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6e4:	e005      	b.n	800c6f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c6f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c6f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f000 80e7 	beq.w	800c8c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6fe:	4a19      	ldr	r2, [pc, #100]	@ (800c764 <UART_SetConfig+0x930>)
 800c700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c704:	461a      	mov	r2, r3
 800c706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c708:	fbb3 f3f2 	udiv	r3, r3, r2
 800c70c:	005a      	lsls	r2, r3, #1
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	085b      	lsrs	r3, r3, #1
 800c714:	441a      	add	r2, r3
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c71e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c722:	2b0f      	cmp	r3, #15
 800c724:	d916      	bls.n	800c754 <UART_SetConfig+0x920>
 800c726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c72c:	d212      	bcs.n	800c754 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c72e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c730:	b29b      	uxth	r3, r3
 800c732:	f023 030f 	bic.w	r3, r3, #15
 800c736:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73a:	085b      	lsrs	r3, r3, #1
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	f003 0307 	and.w	r3, r3, #7
 800c742:	b29a      	uxth	r2, r3
 800c744:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c746:	4313      	orrs	r3, r2
 800c748:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c750:	60da      	str	r2, [r3, #12]
 800c752:	e0b9      	b.n	800c8c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c754:	2301      	movs	r3, #1
 800c756:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c75a:	e0b5      	b.n	800c8c8 <UART_SetConfig+0xa94>
 800c75c:	03d09000 	.word	0x03d09000
 800c760:	003d0900 	.word	0x003d0900
 800c764:	0800e188 	.word	0x0800e188
 800c768:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c76c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c770:	2b20      	cmp	r3, #32
 800c772:	dc49      	bgt.n	800c808 <UART_SetConfig+0x9d4>
 800c774:	2b00      	cmp	r3, #0
 800c776:	db7c      	blt.n	800c872 <UART_SetConfig+0xa3e>
 800c778:	2b20      	cmp	r3, #32
 800c77a:	d87a      	bhi.n	800c872 <UART_SetConfig+0xa3e>
 800c77c:	a201      	add	r2, pc, #4	@ (adr r2, 800c784 <UART_SetConfig+0x950>)
 800c77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c782:	bf00      	nop
 800c784:	0800c80f 	.word	0x0800c80f
 800c788:	0800c817 	.word	0x0800c817
 800c78c:	0800c873 	.word	0x0800c873
 800c790:	0800c873 	.word	0x0800c873
 800c794:	0800c81f 	.word	0x0800c81f
 800c798:	0800c873 	.word	0x0800c873
 800c79c:	0800c873 	.word	0x0800c873
 800c7a0:	0800c873 	.word	0x0800c873
 800c7a4:	0800c82f 	.word	0x0800c82f
 800c7a8:	0800c873 	.word	0x0800c873
 800c7ac:	0800c873 	.word	0x0800c873
 800c7b0:	0800c873 	.word	0x0800c873
 800c7b4:	0800c873 	.word	0x0800c873
 800c7b8:	0800c873 	.word	0x0800c873
 800c7bc:	0800c873 	.word	0x0800c873
 800c7c0:	0800c873 	.word	0x0800c873
 800c7c4:	0800c83f 	.word	0x0800c83f
 800c7c8:	0800c873 	.word	0x0800c873
 800c7cc:	0800c873 	.word	0x0800c873
 800c7d0:	0800c873 	.word	0x0800c873
 800c7d4:	0800c873 	.word	0x0800c873
 800c7d8:	0800c873 	.word	0x0800c873
 800c7dc:	0800c873 	.word	0x0800c873
 800c7e0:	0800c873 	.word	0x0800c873
 800c7e4:	0800c873 	.word	0x0800c873
 800c7e8:	0800c873 	.word	0x0800c873
 800c7ec:	0800c873 	.word	0x0800c873
 800c7f0:	0800c873 	.word	0x0800c873
 800c7f4:	0800c873 	.word	0x0800c873
 800c7f8:	0800c873 	.word	0x0800c873
 800c7fc:	0800c873 	.word	0x0800c873
 800c800:	0800c873 	.word	0x0800c873
 800c804:	0800c865 	.word	0x0800c865
 800c808:	2b40      	cmp	r3, #64	@ 0x40
 800c80a:	d02e      	beq.n	800c86a <UART_SetConfig+0xa36>
 800c80c:	e031      	b.n	800c872 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c80e:	f7fb fe1f 	bl	8008450 <HAL_RCC_GetPCLK1Freq>
 800c812:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c814:	e033      	b.n	800c87e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c816:	f7fb fe31 	bl	800847c <HAL_RCC_GetPCLK2Freq>
 800c81a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c81c:	e02f      	b.n	800c87e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c81e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c822:	4618      	mov	r0, r3
 800c824:	f7fd f8a2 	bl	800996c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c82c:	e027      	b.n	800c87e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c82e:	f107 0318 	add.w	r3, r7, #24
 800c832:	4618      	mov	r0, r3
 800c834:	f7fd f9ee 	bl	8009c14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c83c:	e01f      	b.n	800c87e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c83e:	4b2d      	ldr	r3, [pc, #180]	@ (800c8f4 <UART_SetConfig+0xac0>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f003 0320 	and.w	r3, r3, #32
 800c846:	2b00      	cmp	r3, #0
 800c848:	d009      	beq.n	800c85e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c84a:	4b2a      	ldr	r3, [pc, #168]	@ (800c8f4 <UART_SetConfig+0xac0>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	08db      	lsrs	r3, r3, #3
 800c850:	f003 0303 	and.w	r3, r3, #3
 800c854:	4a28      	ldr	r2, [pc, #160]	@ (800c8f8 <UART_SetConfig+0xac4>)
 800c856:	fa22 f303 	lsr.w	r3, r2, r3
 800c85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c85c:	e00f      	b.n	800c87e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c85e:	4b26      	ldr	r3, [pc, #152]	@ (800c8f8 <UART_SetConfig+0xac4>)
 800c860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c862:	e00c      	b.n	800c87e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c864:	4b25      	ldr	r3, [pc, #148]	@ (800c8fc <UART_SetConfig+0xac8>)
 800c866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c868:	e009      	b.n	800c87e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c86a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c870:	e005      	b.n	800c87e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c872:	2300      	movs	r3, #0
 800c874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c876:	2301      	movs	r3, #1
 800c878:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c87c:	bf00      	nop
    }

    if (pclk != 0U)
 800c87e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c880:	2b00      	cmp	r3, #0
 800c882:	d021      	beq.n	800c8c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c888:	4a1d      	ldr	r2, [pc, #116]	@ (800c900 <UART_SetConfig+0xacc>)
 800c88a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c88e:	461a      	mov	r2, r3
 800c890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c892:	fbb3 f2f2 	udiv	r2, r3, r2
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	085b      	lsrs	r3, r3, #1
 800c89c:	441a      	add	r2, r3
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8aa:	2b0f      	cmp	r3, #15
 800c8ac:	d909      	bls.n	800c8c2 <UART_SetConfig+0xa8e>
 800c8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8b4:	d205      	bcs.n	800c8c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	60da      	str	r2, [r3, #12]
 800c8c0:	e002      	b.n	800c8c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c8e4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3748      	adds	r7, #72	@ 0x48
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8f2:	bf00      	nop
 800c8f4:	58024400 	.word	0x58024400
 800c8f8:	03d09000 	.word	0x03d09000
 800c8fc:	003d0900 	.word	0x003d0900
 800c900:	0800e188 	.word	0x0800e188

0800c904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c910:	f003 0308 	and.w	r3, r3, #8
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00a      	beq.n	800c92e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	430a      	orrs	r2, r1
 800c92c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c932:	f003 0301 	and.w	r3, r3, #1
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00a      	beq.n	800c950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	430a      	orrs	r2, r1
 800c94e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c954:	f003 0302 	and.w	r3, r3, #2
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00a      	beq.n	800c972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	430a      	orrs	r2, r1
 800c970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c976:	f003 0304 	and.w	r3, r3, #4
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00a      	beq.n	800c994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	430a      	orrs	r2, r1
 800c992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c998:	f003 0310 	and.w	r3, r3, #16
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00a      	beq.n	800c9b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	689b      	ldr	r3, [r3, #8]
 800c9a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	430a      	orrs	r2, r1
 800c9b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9ba:	f003 0320 	and.w	r3, r3, #32
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00a      	beq.n	800c9d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	430a      	orrs	r2, r1
 800c9d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d01a      	beq.n	800ca1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	430a      	orrs	r2, r1
 800c9f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca02:	d10a      	bne.n	800ca1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	430a      	orrs	r2, r1
 800ca18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00a      	beq.n	800ca3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	430a      	orrs	r2, r1
 800ca3a:	605a      	str	r2, [r3, #4]
  }
}
 800ca3c:	bf00      	nop
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b098      	sub	sp, #96	@ 0x60
 800ca4c:	af02      	add	r7, sp, #8
 800ca4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca58:	f7f8 fe42 	bl	80056e0 <HAL_GetTick>
 800ca5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f003 0308 	and.w	r3, r3, #8
 800ca68:	2b08      	cmp	r3, #8
 800ca6a:	d12f      	bne.n	800cacc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca74:	2200      	movs	r2, #0
 800ca76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 f88e 	bl	800cb9c <UART_WaitOnFlagUntilTimeout>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d022      	beq.n	800cacc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca8e:	e853 3f00 	ldrex	r3, [r3]
 800ca92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	461a      	mov	r2, r3
 800caa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800caa4:	647b      	str	r3, [r7, #68]	@ 0x44
 800caa6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800caaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800caac:	e841 2300 	strex	r3, r2, [r1]
 800cab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d1e6      	bne.n	800ca86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2220      	movs	r2, #32
 800cabc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cac8:	2303      	movs	r3, #3
 800caca:	e063      	b.n	800cb94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f003 0304 	and.w	r3, r3, #4
 800cad6:	2b04      	cmp	r3, #4
 800cad8:	d149      	bne.n	800cb6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cada:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cade:	9300      	str	r3, [sp, #0]
 800cae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cae2:	2200      	movs	r2, #0
 800cae4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 f857 	bl	800cb9c <UART_WaitOnFlagUntilTimeout>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d03c      	beq.n	800cb6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cafc:	e853 3f00 	ldrex	r3, [r3]
 800cb00:	623b      	str	r3, [r7, #32]
   return(result);
 800cb02:	6a3b      	ldr	r3, [r7, #32]
 800cb04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	461a      	mov	r2, r3
 800cb10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb12:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb1a:	e841 2300 	strex	r3, r2, [r1]
 800cb1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cb20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1e6      	bne.n	800caf4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3308      	adds	r3, #8
 800cb2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	e853 3f00 	ldrex	r3, [r3]
 800cb34:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f023 0301 	bic.w	r3, r3, #1
 800cb3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3308      	adds	r3, #8
 800cb44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb46:	61fa      	str	r2, [r7, #28]
 800cb48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4a:	69b9      	ldr	r1, [r7, #24]
 800cb4c:	69fa      	ldr	r2, [r7, #28]
 800cb4e:	e841 2300 	strex	r3, r2, [r1]
 800cb52:	617b      	str	r3, [r7, #20]
   return(result);
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1e5      	bne.n	800cb26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2220      	movs	r2, #32
 800cb5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	e012      	b.n	800cb94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2220      	movs	r2, #32
 800cb72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2220      	movs	r2, #32
 800cb7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3758      	adds	r7, #88	@ 0x58
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	603b      	str	r3, [r7, #0]
 800cba8:	4613      	mov	r3, r2
 800cbaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbac:	e04f      	b.n	800cc4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb4:	d04b      	beq.n	800cc4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cbb6:	f7f8 fd93 	bl	80056e0 <HAL_GetTick>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	1ad3      	subs	r3, r2, r3
 800cbc0:	69ba      	ldr	r2, [r7, #24]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d302      	bcc.n	800cbcc <UART_WaitOnFlagUntilTimeout+0x30>
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d101      	bne.n	800cbd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cbcc:	2303      	movs	r3, #3
 800cbce:	e04e      	b.n	800cc6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f003 0304 	and.w	r3, r3, #4
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d037      	beq.n	800cc4e <UART_WaitOnFlagUntilTimeout+0xb2>
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	2b80      	cmp	r3, #128	@ 0x80
 800cbe2:	d034      	beq.n	800cc4e <UART_WaitOnFlagUntilTimeout+0xb2>
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	2b40      	cmp	r3, #64	@ 0x40
 800cbe8:	d031      	beq.n	800cc4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	69db      	ldr	r3, [r3, #28]
 800cbf0:	f003 0308 	and.w	r3, r3, #8
 800cbf4:	2b08      	cmp	r3, #8
 800cbf6:	d110      	bne.n	800cc1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2208      	movs	r2, #8
 800cbfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	f000 f839 	bl	800cc78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2208      	movs	r2, #8
 800cc0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cc16:	2301      	movs	r3, #1
 800cc18:	e029      	b.n	800cc6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	69db      	ldr	r3, [r3, #28]
 800cc20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cc24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cc28:	d111      	bne.n	800cc4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cc32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cc34:	68f8      	ldr	r0, [r7, #12]
 800cc36:	f000 f81f 	bl	800cc78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2220      	movs	r2, #32
 800cc3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2200      	movs	r2, #0
 800cc46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cc4a:	2303      	movs	r3, #3
 800cc4c:	e00f      	b.n	800cc6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	69da      	ldr	r2, [r3, #28]
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	4013      	ands	r3, r2
 800cc58:	68ba      	ldr	r2, [r7, #8]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	bf0c      	ite	eq
 800cc5e:	2301      	moveq	r3, #1
 800cc60:	2300      	movne	r3, #0
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	461a      	mov	r2, r3
 800cc66:	79fb      	ldrb	r3, [r7, #7]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d0a0      	beq.n	800cbae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
	...

0800cc78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b095      	sub	sp, #84	@ 0x54
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc88:	e853 3f00 	ldrex	r3, [r3]
 800cc8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc9e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cca0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cca4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cca6:	e841 2300 	strex	r3, r2, [r1]
 800ccaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ccac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1e6      	bne.n	800cc80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	3308      	adds	r3, #8
 800ccb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccba:	6a3b      	ldr	r3, [r7, #32]
 800ccbc:	e853 3f00 	ldrex	r3, [r3]
 800ccc0:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccc2:	69fa      	ldr	r2, [r7, #28]
 800ccc4:	4b1e      	ldr	r3, [pc, #120]	@ (800cd40 <UART_EndRxTransfer+0xc8>)
 800ccc6:	4013      	ands	r3, r2
 800ccc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	3308      	adds	r3, #8
 800ccd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ccd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ccd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccda:	e841 2300 	strex	r3, r2, [r1]
 800ccde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d1e5      	bne.n	800ccb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d118      	bne.n	800cd20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	e853 3f00 	ldrex	r3, [r3]
 800ccfa:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	f023 0310 	bic.w	r3, r3, #16
 800cd02:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	461a      	mov	r2, r3
 800cd0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd0c:	61bb      	str	r3, [r7, #24]
 800cd0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd10:	6979      	ldr	r1, [r7, #20]
 800cd12:	69ba      	ldr	r2, [r7, #24]
 800cd14:	e841 2300 	strex	r3, r2, [r1]
 800cd18:	613b      	str	r3, [r7, #16]
   return(result);
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1e6      	bne.n	800ccee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2220      	movs	r2, #32
 800cd24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cd34:	bf00      	nop
 800cd36:	3754      	adds	r7, #84	@ 0x54
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3e:	4770      	bx	lr
 800cd40:	effffffe 	.word	0xeffffffe

0800cd44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b085      	sub	sp, #20
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d101      	bne.n	800cd5a <HAL_UARTEx_DisableFifoMode+0x16>
 800cd56:	2302      	movs	r3, #2
 800cd58:	e027      	b.n	800cdaa <HAL_UARTEx_DisableFifoMode+0x66>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2224      	movs	r2, #36	@ 0x24
 800cd66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f022 0201 	bic.w	r2, r2, #1
 800cd80:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cd88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	68fa      	ldr	r2, [r7, #12]
 800cd96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2220      	movs	r2, #32
 800cd9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cda8:	2300      	movs	r3, #0
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3714      	adds	r7, #20
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b084      	sub	sp, #16
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
 800cdbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d101      	bne.n	800cdce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cdca:	2302      	movs	r3, #2
 800cdcc:	e02d      	b.n	800ce2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2224      	movs	r2, #36	@ 0x24
 800cdda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f022 0201 	bic.w	r2, r2, #1
 800cdf4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	683a      	ldr	r2, [r7, #0]
 800ce06:	430a      	orrs	r2, r1
 800ce08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f850 	bl	800ceb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2220      	movs	r2, #32
 800ce1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b084      	sub	sp, #16
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
 800ce3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d101      	bne.n	800ce4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ce46:	2302      	movs	r3, #2
 800ce48:	e02d      	b.n	800cea6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2224      	movs	r2, #36	@ 0x24
 800ce56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	681a      	ldr	r2, [r3, #0]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f022 0201 	bic.w	r2, r2, #1
 800ce70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	683a      	ldr	r2, [r7, #0]
 800ce82:	430a      	orrs	r2, r1
 800ce84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 f812 	bl	800ceb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	68fa      	ldr	r2, [r7, #12]
 800ce92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2220      	movs	r2, #32
 800ce98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
	...

0800ceb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d108      	bne.n	800ced2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2201      	movs	r2, #1
 800cec4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2201      	movs	r2, #1
 800cecc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ced0:	e031      	b.n	800cf36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ced2:	2310      	movs	r3, #16
 800ced4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ced6:	2310      	movs	r3, #16
 800ced8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	0e5b      	lsrs	r3, r3, #25
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	f003 0307 	and.w	r3, r3, #7
 800cee8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	0f5b      	lsrs	r3, r3, #29
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	f003 0307 	and.w	r3, r3, #7
 800cef8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cefa:	7bbb      	ldrb	r3, [r7, #14]
 800cefc:	7b3a      	ldrb	r2, [r7, #12]
 800cefe:	4911      	ldr	r1, [pc, #68]	@ (800cf44 <UARTEx_SetNbDataToProcess+0x94>)
 800cf00:	5c8a      	ldrb	r2, [r1, r2]
 800cf02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cf06:	7b3a      	ldrb	r2, [r7, #12]
 800cf08:	490f      	ldr	r1, [pc, #60]	@ (800cf48 <UARTEx_SetNbDataToProcess+0x98>)
 800cf0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cf0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf10:	b29a      	uxth	r2, r3
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf18:	7bfb      	ldrb	r3, [r7, #15]
 800cf1a:	7b7a      	ldrb	r2, [r7, #13]
 800cf1c:	4909      	ldr	r1, [pc, #36]	@ (800cf44 <UARTEx_SetNbDataToProcess+0x94>)
 800cf1e:	5c8a      	ldrb	r2, [r1, r2]
 800cf20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cf24:	7b7a      	ldrb	r2, [r7, #13]
 800cf26:	4908      	ldr	r1, [pc, #32]	@ (800cf48 <UARTEx_SetNbDataToProcess+0x98>)
 800cf28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cf2a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cf36:	bf00      	nop
 800cf38:	3714      	adds	r7, #20
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	0800e1a0 	.word	0x0800e1a0
 800cf48:	0800e1a8 	.word	0x0800e1a8

0800cf4c <rand>:
 800cf4c:	4b16      	ldr	r3, [pc, #88]	@ (800cfa8 <rand+0x5c>)
 800cf4e:	b510      	push	{r4, lr}
 800cf50:	681c      	ldr	r4, [r3, #0]
 800cf52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800cf54:	b9b3      	cbnz	r3, 800cf84 <rand+0x38>
 800cf56:	2018      	movs	r0, #24
 800cf58:	f000 fa3e 	bl	800d3d8 <malloc>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	6320      	str	r0, [r4, #48]	@ 0x30
 800cf60:	b920      	cbnz	r0, 800cf6c <rand+0x20>
 800cf62:	4b12      	ldr	r3, [pc, #72]	@ (800cfac <rand+0x60>)
 800cf64:	4812      	ldr	r0, [pc, #72]	@ (800cfb0 <rand+0x64>)
 800cf66:	2152      	movs	r1, #82	@ 0x52
 800cf68:	f000 f9ce 	bl	800d308 <__assert_func>
 800cf6c:	4911      	ldr	r1, [pc, #68]	@ (800cfb4 <rand+0x68>)
 800cf6e:	4b12      	ldr	r3, [pc, #72]	@ (800cfb8 <rand+0x6c>)
 800cf70:	e9c0 1300 	strd	r1, r3, [r0]
 800cf74:	4b11      	ldr	r3, [pc, #68]	@ (800cfbc <rand+0x70>)
 800cf76:	6083      	str	r3, [r0, #8]
 800cf78:	230b      	movs	r3, #11
 800cf7a:	8183      	strh	r3, [r0, #12]
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	2001      	movs	r0, #1
 800cf80:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800cf84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cf86:	480e      	ldr	r0, [pc, #56]	@ (800cfc0 <rand+0x74>)
 800cf88:	690b      	ldr	r3, [r1, #16]
 800cf8a:	694c      	ldr	r4, [r1, #20]
 800cf8c:	4a0d      	ldr	r2, [pc, #52]	@ (800cfc4 <rand+0x78>)
 800cf8e:	4358      	muls	r0, r3
 800cf90:	fb02 0004 	mla	r0, r2, r4, r0
 800cf94:	fba3 3202 	umull	r3, r2, r3, r2
 800cf98:	3301      	adds	r3, #1
 800cf9a:	eb40 0002 	adc.w	r0, r0, r2
 800cf9e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800cfa2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800cfa6:	bd10      	pop	{r4, pc}
 800cfa8:	2400003c 	.word	0x2400003c
 800cfac:	0800e1b0 	.word	0x0800e1b0
 800cfb0:	0800e1c7 	.word	0x0800e1c7
 800cfb4:	abcd330e 	.word	0xabcd330e
 800cfb8:	e66d1234 	.word	0xe66d1234
 800cfbc:	0005deec 	.word	0x0005deec
 800cfc0:	5851f42d 	.word	0x5851f42d
 800cfc4:	4c957f2d 	.word	0x4c957f2d

0800cfc8 <std>:
 800cfc8:	2300      	movs	r3, #0
 800cfca:	b510      	push	{r4, lr}
 800cfcc:	4604      	mov	r4, r0
 800cfce:	e9c0 3300 	strd	r3, r3, [r0]
 800cfd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cfd6:	6083      	str	r3, [r0, #8]
 800cfd8:	8181      	strh	r1, [r0, #12]
 800cfda:	6643      	str	r3, [r0, #100]	@ 0x64
 800cfdc:	81c2      	strh	r2, [r0, #14]
 800cfde:	6183      	str	r3, [r0, #24]
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	2208      	movs	r2, #8
 800cfe4:	305c      	adds	r0, #92	@ 0x5c
 800cfe6:	f000 f904 	bl	800d1f2 <memset>
 800cfea:	4b0d      	ldr	r3, [pc, #52]	@ (800d020 <std+0x58>)
 800cfec:	6263      	str	r3, [r4, #36]	@ 0x24
 800cfee:	4b0d      	ldr	r3, [pc, #52]	@ (800d024 <std+0x5c>)
 800cff0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cff2:	4b0d      	ldr	r3, [pc, #52]	@ (800d028 <std+0x60>)
 800cff4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cff6:	4b0d      	ldr	r3, [pc, #52]	@ (800d02c <std+0x64>)
 800cff8:	6323      	str	r3, [r4, #48]	@ 0x30
 800cffa:	4b0d      	ldr	r3, [pc, #52]	@ (800d030 <std+0x68>)
 800cffc:	6224      	str	r4, [r4, #32]
 800cffe:	429c      	cmp	r4, r3
 800d000:	d006      	beq.n	800d010 <std+0x48>
 800d002:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d006:	4294      	cmp	r4, r2
 800d008:	d002      	beq.n	800d010 <std+0x48>
 800d00a:	33d0      	adds	r3, #208	@ 0xd0
 800d00c:	429c      	cmp	r4, r3
 800d00e:	d105      	bne.n	800d01c <std+0x54>
 800d010:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d018:	f000 b964 	b.w	800d2e4 <__retarget_lock_init_recursive>
 800d01c:	bd10      	pop	{r4, pc}
 800d01e:	bf00      	nop
 800d020:	0800d14d 	.word	0x0800d14d
 800d024:	0800d16f 	.word	0x0800d16f
 800d028:	0800d1a7 	.word	0x0800d1a7
 800d02c:	0800d1cb 	.word	0x0800d1cb
 800d030:	24012c8c 	.word	0x24012c8c

0800d034 <stdio_exit_handler>:
 800d034:	4a02      	ldr	r2, [pc, #8]	@ (800d040 <stdio_exit_handler+0xc>)
 800d036:	4903      	ldr	r1, [pc, #12]	@ (800d044 <stdio_exit_handler+0x10>)
 800d038:	4803      	ldr	r0, [pc, #12]	@ (800d048 <stdio_exit_handler+0x14>)
 800d03a:	f000 b869 	b.w	800d110 <_fwalk_sglue>
 800d03e:	bf00      	nop
 800d040:	24000030 	.word	0x24000030
 800d044:	0800d64d 	.word	0x0800d64d
 800d048:	24000040 	.word	0x24000040

0800d04c <cleanup_stdio>:
 800d04c:	6841      	ldr	r1, [r0, #4]
 800d04e:	4b0c      	ldr	r3, [pc, #48]	@ (800d080 <cleanup_stdio+0x34>)
 800d050:	4299      	cmp	r1, r3
 800d052:	b510      	push	{r4, lr}
 800d054:	4604      	mov	r4, r0
 800d056:	d001      	beq.n	800d05c <cleanup_stdio+0x10>
 800d058:	f000 faf8 	bl	800d64c <_fflush_r>
 800d05c:	68a1      	ldr	r1, [r4, #8]
 800d05e:	4b09      	ldr	r3, [pc, #36]	@ (800d084 <cleanup_stdio+0x38>)
 800d060:	4299      	cmp	r1, r3
 800d062:	d002      	beq.n	800d06a <cleanup_stdio+0x1e>
 800d064:	4620      	mov	r0, r4
 800d066:	f000 faf1 	bl	800d64c <_fflush_r>
 800d06a:	68e1      	ldr	r1, [r4, #12]
 800d06c:	4b06      	ldr	r3, [pc, #24]	@ (800d088 <cleanup_stdio+0x3c>)
 800d06e:	4299      	cmp	r1, r3
 800d070:	d004      	beq.n	800d07c <cleanup_stdio+0x30>
 800d072:	4620      	mov	r0, r4
 800d074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d078:	f000 bae8 	b.w	800d64c <_fflush_r>
 800d07c:	bd10      	pop	{r4, pc}
 800d07e:	bf00      	nop
 800d080:	24012c8c 	.word	0x24012c8c
 800d084:	24012cf4 	.word	0x24012cf4
 800d088:	24012d5c 	.word	0x24012d5c

0800d08c <global_stdio_init.part.0>:
 800d08c:	b510      	push	{r4, lr}
 800d08e:	4b0b      	ldr	r3, [pc, #44]	@ (800d0bc <global_stdio_init.part.0+0x30>)
 800d090:	4c0b      	ldr	r4, [pc, #44]	@ (800d0c0 <global_stdio_init.part.0+0x34>)
 800d092:	4a0c      	ldr	r2, [pc, #48]	@ (800d0c4 <global_stdio_init.part.0+0x38>)
 800d094:	601a      	str	r2, [r3, #0]
 800d096:	4620      	mov	r0, r4
 800d098:	2200      	movs	r2, #0
 800d09a:	2104      	movs	r1, #4
 800d09c:	f7ff ff94 	bl	800cfc8 <std>
 800d0a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d0a4:	2201      	movs	r2, #1
 800d0a6:	2109      	movs	r1, #9
 800d0a8:	f7ff ff8e 	bl	800cfc8 <std>
 800d0ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d0b0:	2202      	movs	r2, #2
 800d0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0b6:	2112      	movs	r1, #18
 800d0b8:	f7ff bf86 	b.w	800cfc8 <std>
 800d0bc:	24012dc4 	.word	0x24012dc4
 800d0c0:	24012c8c 	.word	0x24012c8c
 800d0c4:	0800d035 	.word	0x0800d035

0800d0c8 <__sfp_lock_acquire>:
 800d0c8:	4801      	ldr	r0, [pc, #4]	@ (800d0d0 <__sfp_lock_acquire+0x8>)
 800d0ca:	f000 b90c 	b.w	800d2e6 <__retarget_lock_acquire_recursive>
 800d0ce:	bf00      	nop
 800d0d0:	24012dcd 	.word	0x24012dcd

0800d0d4 <__sfp_lock_release>:
 800d0d4:	4801      	ldr	r0, [pc, #4]	@ (800d0dc <__sfp_lock_release+0x8>)
 800d0d6:	f000 b907 	b.w	800d2e8 <__retarget_lock_release_recursive>
 800d0da:	bf00      	nop
 800d0dc:	24012dcd 	.word	0x24012dcd

0800d0e0 <__sinit>:
 800d0e0:	b510      	push	{r4, lr}
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	f7ff fff0 	bl	800d0c8 <__sfp_lock_acquire>
 800d0e8:	6a23      	ldr	r3, [r4, #32]
 800d0ea:	b11b      	cbz	r3, 800d0f4 <__sinit+0x14>
 800d0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0f0:	f7ff bff0 	b.w	800d0d4 <__sfp_lock_release>
 800d0f4:	4b04      	ldr	r3, [pc, #16]	@ (800d108 <__sinit+0x28>)
 800d0f6:	6223      	str	r3, [r4, #32]
 800d0f8:	4b04      	ldr	r3, [pc, #16]	@ (800d10c <__sinit+0x2c>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1f5      	bne.n	800d0ec <__sinit+0xc>
 800d100:	f7ff ffc4 	bl	800d08c <global_stdio_init.part.0>
 800d104:	e7f2      	b.n	800d0ec <__sinit+0xc>
 800d106:	bf00      	nop
 800d108:	0800d04d 	.word	0x0800d04d
 800d10c:	24012dc4 	.word	0x24012dc4

0800d110 <_fwalk_sglue>:
 800d110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d114:	4607      	mov	r7, r0
 800d116:	4688      	mov	r8, r1
 800d118:	4614      	mov	r4, r2
 800d11a:	2600      	movs	r6, #0
 800d11c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d120:	f1b9 0901 	subs.w	r9, r9, #1
 800d124:	d505      	bpl.n	800d132 <_fwalk_sglue+0x22>
 800d126:	6824      	ldr	r4, [r4, #0]
 800d128:	2c00      	cmp	r4, #0
 800d12a:	d1f7      	bne.n	800d11c <_fwalk_sglue+0xc>
 800d12c:	4630      	mov	r0, r6
 800d12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d132:	89ab      	ldrh	r3, [r5, #12]
 800d134:	2b01      	cmp	r3, #1
 800d136:	d907      	bls.n	800d148 <_fwalk_sglue+0x38>
 800d138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d13c:	3301      	adds	r3, #1
 800d13e:	d003      	beq.n	800d148 <_fwalk_sglue+0x38>
 800d140:	4629      	mov	r1, r5
 800d142:	4638      	mov	r0, r7
 800d144:	47c0      	blx	r8
 800d146:	4306      	orrs	r6, r0
 800d148:	3568      	adds	r5, #104	@ 0x68
 800d14a:	e7e9      	b.n	800d120 <_fwalk_sglue+0x10>

0800d14c <__sread>:
 800d14c:	b510      	push	{r4, lr}
 800d14e:	460c      	mov	r4, r1
 800d150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d154:	f000 f878 	bl	800d248 <_read_r>
 800d158:	2800      	cmp	r0, #0
 800d15a:	bfab      	itete	ge
 800d15c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d15e:	89a3      	ldrhlt	r3, [r4, #12]
 800d160:	181b      	addge	r3, r3, r0
 800d162:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d166:	bfac      	ite	ge
 800d168:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d16a:	81a3      	strhlt	r3, [r4, #12]
 800d16c:	bd10      	pop	{r4, pc}

0800d16e <__swrite>:
 800d16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d172:	461f      	mov	r7, r3
 800d174:	898b      	ldrh	r3, [r1, #12]
 800d176:	05db      	lsls	r3, r3, #23
 800d178:	4605      	mov	r5, r0
 800d17a:	460c      	mov	r4, r1
 800d17c:	4616      	mov	r6, r2
 800d17e:	d505      	bpl.n	800d18c <__swrite+0x1e>
 800d180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d184:	2302      	movs	r3, #2
 800d186:	2200      	movs	r2, #0
 800d188:	f000 f84c 	bl	800d224 <_lseek_r>
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d192:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d196:	81a3      	strh	r3, [r4, #12]
 800d198:	4632      	mov	r2, r6
 800d19a:	463b      	mov	r3, r7
 800d19c:	4628      	mov	r0, r5
 800d19e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1a2:	f000 b863 	b.w	800d26c <_write_r>

0800d1a6 <__sseek>:
 800d1a6:	b510      	push	{r4, lr}
 800d1a8:	460c      	mov	r4, r1
 800d1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ae:	f000 f839 	bl	800d224 <_lseek_r>
 800d1b2:	1c43      	adds	r3, r0, #1
 800d1b4:	89a3      	ldrh	r3, [r4, #12]
 800d1b6:	bf15      	itete	ne
 800d1b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d1ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d1be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d1c2:	81a3      	strheq	r3, [r4, #12]
 800d1c4:	bf18      	it	ne
 800d1c6:	81a3      	strhne	r3, [r4, #12]
 800d1c8:	bd10      	pop	{r4, pc}

0800d1ca <__sclose>:
 800d1ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ce:	f000 b819 	b.w	800d204 <_close_r>

0800d1d2 <memcmp>:
 800d1d2:	b510      	push	{r4, lr}
 800d1d4:	3901      	subs	r1, #1
 800d1d6:	4402      	add	r2, r0
 800d1d8:	4290      	cmp	r0, r2
 800d1da:	d101      	bne.n	800d1e0 <memcmp+0xe>
 800d1dc:	2000      	movs	r0, #0
 800d1de:	e005      	b.n	800d1ec <memcmp+0x1a>
 800d1e0:	7803      	ldrb	r3, [r0, #0]
 800d1e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d1e6:	42a3      	cmp	r3, r4
 800d1e8:	d001      	beq.n	800d1ee <memcmp+0x1c>
 800d1ea:	1b18      	subs	r0, r3, r4
 800d1ec:	bd10      	pop	{r4, pc}
 800d1ee:	3001      	adds	r0, #1
 800d1f0:	e7f2      	b.n	800d1d8 <memcmp+0x6>

0800d1f2 <memset>:
 800d1f2:	4402      	add	r2, r0
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d100      	bne.n	800d1fc <memset+0xa>
 800d1fa:	4770      	bx	lr
 800d1fc:	f803 1b01 	strb.w	r1, [r3], #1
 800d200:	e7f9      	b.n	800d1f6 <memset+0x4>
	...

0800d204 <_close_r>:
 800d204:	b538      	push	{r3, r4, r5, lr}
 800d206:	4d06      	ldr	r5, [pc, #24]	@ (800d220 <_close_r+0x1c>)
 800d208:	2300      	movs	r3, #0
 800d20a:	4604      	mov	r4, r0
 800d20c:	4608      	mov	r0, r1
 800d20e:	602b      	str	r3, [r5, #0]
 800d210:	f7f7 ff72 	bl	80050f8 <_close>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	d102      	bne.n	800d21e <_close_r+0x1a>
 800d218:	682b      	ldr	r3, [r5, #0]
 800d21a:	b103      	cbz	r3, 800d21e <_close_r+0x1a>
 800d21c:	6023      	str	r3, [r4, #0]
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	24012dc8 	.word	0x24012dc8

0800d224 <_lseek_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4d07      	ldr	r5, [pc, #28]	@ (800d244 <_lseek_r+0x20>)
 800d228:	4604      	mov	r4, r0
 800d22a:	4608      	mov	r0, r1
 800d22c:	4611      	mov	r1, r2
 800d22e:	2200      	movs	r2, #0
 800d230:	602a      	str	r2, [r5, #0]
 800d232:	461a      	mov	r2, r3
 800d234:	f7f7 ff87 	bl	8005146 <_lseek>
 800d238:	1c43      	adds	r3, r0, #1
 800d23a:	d102      	bne.n	800d242 <_lseek_r+0x1e>
 800d23c:	682b      	ldr	r3, [r5, #0]
 800d23e:	b103      	cbz	r3, 800d242 <_lseek_r+0x1e>
 800d240:	6023      	str	r3, [r4, #0]
 800d242:	bd38      	pop	{r3, r4, r5, pc}
 800d244:	24012dc8 	.word	0x24012dc8

0800d248 <_read_r>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	4d07      	ldr	r5, [pc, #28]	@ (800d268 <_read_r+0x20>)
 800d24c:	4604      	mov	r4, r0
 800d24e:	4608      	mov	r0, r1
 800d250:	4611      	mov	r1, r2
 800d252:	2200      	movs	r2, #0
 800d254:	602a      	str	r2, [r5, #0]
 800d256:	461a      	mov	r2, r3
 800d258:	f7f7 ff15 	bl	8005086 <_read>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	d102      	bne.n	800d266 <_read_r+0x1e>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	b103      	cbz	r3, 800d266 <_read_r+0x1e>
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	bd38      	pop	{r3, r4, r5, pc}
 800d268:	24012dc8 	.word	0x24012dc8

0800d26c <_write_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	4d07      	ldr	r5, [pc, #28]	@ (800d28c <_write_r+0x20>)
 800d270:	4604      	mov	r4, r0
 800d272:	4608      	mov	r0, r1
 800d274:	4611      	mov	r1, r2
 800d276:	2200      	movs	r2, #0
 800d278:	602a      	str	r2, [r5, #0]
 800d27a:	461a      	mov	r2, r3
 800d27c:	f7f7 ff20 	bl	80050c0 <_write>
 800d280:	1c43      	adds	r3, r0, #1
 800d282:	d102      	bne.n	800d28a <_write_r+0x1e>
 800d284:	682b      	ldr	r3, [r5, #0]
 800d286:	b103      	cbz	r3, 800d28a <_write_r+0x1e>
 800d288:	6023      	str	r3, [r4, #0]
 800d28a:	bd38      	pop	{r3, r4, r5, pc}
 800d28c:	24012dc8 	.word	0x24012dc8

0800d290 <__errno>:
 800d290:	4b01      	ldr	r3, [pc, #4]	@ (800d298 <__errno+0x8>)
 800d292:	6818      	ldr	r0, [r3, #0]
 800d294:	4770      	bx	lr
 800d296:	bf00      	nop
 800d298:	2400003c 	.word	0x2400003c

0800d29c <__libc_init_array>:
 800d29c:	b570      	push	{r4, r5, r6, lr}
 800d29e:	4d0d      	ldr	r5, [pc, #52]	@ (800d2d4 <__libc_init_array+0x38>)
 800d2a0:	4c0d      	ldr	r4, [pc, #52]	@ (800d2d8 <__libc_init_array+0x3c>)
 800d2a2:	1b64      	subs	r4, r4, r5
 800d2a4:	10a4      	asrs	r4, r4, #2
 800d2a6:	2600      	movs	r6, #0
 800d2a8:	42a6      	cmp	r6, r4
 800d2aa:	d109      	bne.n	800d2c0 <__libc_init_array+0x24>
 800d2ac:	4d0b      	ldr	r5, [pc, #44]	@ (800d2dc <__libc_init_array+0x40>)
 800d2ae:	4c0c      	ldr	r4, [pc, #48]	@ (800d2e0 <__libc_init_array+0x44>)
 800d2b0:	f000 fe46 	bl	800df40 <_init>
 800d2b4:	1b64      	subs	r4, r4, r5
 800d2b6:	10a4      	asrs	r4, r4, #2
 800d2b8:	2600      	movs	r6, #0
 800d2ba:	42a6      	cmp	r6, r4
 800d2bc:	d105      	bne.n	800d2ca <__libc_init_array+0x2e>
 800d2be:	bd70      	pop	{r4, r5, r6, pc}
 800d2c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2c4:	4798      	blx	r3
 800d2c6:	3601      	adds	r6, #1
 800d2c8:	e7ee      	b.n	800d2a8 <__libc_init_array+0xc>
 800d2ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2ce:	4798      	blx	r3
 800d2d0:	3601      	adds	r6, #1
 800d2d2:	e7f2      	b.n	800d2ba <__libc_init_array+0x1e>
 800d2d4:	0800e298 	.word	0x0800e298
 800d2d8:	0800e298 	.word	0x0800e298
 800d2dc:	0800e298 	.word	0x0800e298
 800d2e0:	0800e29c 	.word	0x0800e29c

0800d2e4 <__retarget_lock_init_recursive>:
 800d2e4:	4770      	bx	lr

0800d2e6 <__retarget_lock_acquire_recursive>:
 800d2e6:	4770      	bx	lr

0800d2e8 <__retarget_lock_release_recursive>:
 800d2e8:	4770      	bx	lr

0800d2ea <memcpy>:
 800d2ea:	440a      	add	r2, r1
 800d2ec:	4291      	cmp	r1, r2
 800d2ee:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2f2:	d100      	bne.n	800d2f6 <memcpy+0xc>
 800d2f4:	4770      	bx	lr
 800d2f6:	b510      	push	{r4, lr}
 800d2f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d300:	4291      	cmp	r1, r2
 800d302:	d1f9      	bne.n	800d2f8 <memcpy+0xe>
 800d304:	bd10      	pop	{r4, pc}
	...

0800d308 <__assert_func>:
 800d308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d30a:	4614      	mov	r4, r2
 800d30c:	461a      	mov	r2, r3
 800d30e:	4b09      	ldr	r3, [pc, #36]	@ (800d334 <__assert_func+0x2c>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4605      	mov	r5, r0
 800d314:	68d8      	ldr	r0, [r3, #12]
 800d316:	b14c      	cbz	r4, 800d32c <__assert_func+0x24>
 800d318:	4b07      	ldr	r3, [pc, #28]	@ (800d338 <__assert_func+0x30>)
 800d31a:	9100      	str	r1, [sp, #0]
 800d31c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d320:	4906      	ldr	r1, [pc, #24]	@ (800d33c <__assert_func+0x34>)
 800d322:	462b      	mov	r3, r5
 800d324:	f000 f9ba 	bl	800d69c <fiprintf>
 800d328:	f000 f9da 	bl	800d6e0 <abort>
 800d32c:	4b04      	ldr	r3, [pc, #16]	@ (800d340 <__assert_func+0x38>)
 800d32e:	461c      	mov	r4, r3
 800d330:	e7f3      	b.n	800d31a <__assert_func+0x12>
 800d332:	bf00      	nop
 800d334:	2400003c 	.word	0x2400003c
 800d338:	0800e21f 	.word	0x0800e21f
 800d33c:	0800e22c 	.word	0x0800e22c
 800d340:	0800e25a 	.word	0x0800e25a

0800d344 <_free_r>:
 800d344:	b538      	push	{r3, r4, r5, lr}
 800d346:	4605      	mov	r5, r0
 800d348:	2900      	cmp	r1, #0
 800d34a:	d041      	beq.n	800d3d0 <_free_r+0x8c>
 800d34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d350:	1f0c      	subs	r4, r1, #4
 800d352:	2b00      	cmp	r3, #0
 800d354:	bfb8      	it	lt
 800d356:	18e4      	addlt	r4, r4, r3
 800d358:	f000 f8e8 	bl	800d52c <__malloc_lock>
 800d35c:	4a1d      	ldr	r2, [pc, #116]	@ (800d3d4 <_free_r+0x90>)
 800d35e:	6813      	ldr	r3, [r2, #0]
 800d360:	b933      	cbnz	r3, 800d370 <_free_r+0x2c>
 800d362:	6063      	str	r3, [r4, #4]
 800d364:	6014      	str	r4, [r2, #0]
 800d366:	4628      	mov	r0, r5
 800d368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d36c:	f000 b8e4 	b.w	800d538 <__malloc_unlock>
 800d370:	42a3      	cmp	r3, r4
 800d372:	d908      	bls.n	800d386 <_free_r+0x42>
 800d374:	6820      	ldr	r0, [r4, #0]
 800d376:	1821      	adds	r1, r4, r0
 800d378:	428b      	cmp	r3, r1
 800d37a:	bf01      	itttt	eq
 800d37c:	6819      	ldreq	r1, [r3, #0]
 800d37e:	685b      	ldreq	r3, [r3, #4]
 800d380:	1809      	addeq	r1, r1, r0
 800d382:	6021      	streq	r1, [r4, #0]
 800d384:	e7ed      	b.n	800d362 <_free_r+0x1e>
 800d386:	461a      	mov	r2, r3
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	b10b      	cbz	r3, 800d390 <_free_r+0x4c>
 800d38c:	42a3      	cmp	r3, r4
 800d38e:	d9fa      	bls.n	800d386 <_free_r+0x42>
 800d390:	6811      	ldr	r1, [r2, #0]
 800d392:	1850      	adds	r0, r2, r1
 800d394:	42a0      	cmp	r0, r4
 800d396:	d10b      	bne.n	800d3b0 <_free_r+0x6c>
 800d398:	6820      	ldr	r0, [r4, #0]
 800d39a:	4401      	add	r1, r0
 800d39c:	1850      	adds	r0, r2, r1
 800d39e:	4283      	cmp	r3, r0
 800d3a0:	6011      	str	r1, [r2, #0]
 800d3a2:	d1e0      	bne.n	800d366 <_free_r+0x22>
 800d3a4:	6818      	ldr	r0, [r3, #0]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	6053      	str	r3, [r2, #4]
 800d3aa:	4408      	add	r0, r1
 800d3ac:	6010      	str	r0, [r2, #0]
 800d3ae:	e7da      	b.n	800d366 <_free_r+0x22>
 800d3b0:	d902      	bls.n	800d3b8 <_free_r+0x74>
 800d3b2:	230c      	movs	r3, #12
 800d3b4:	602b      	str	r3, [r5, #0]
 800d3b6:	e7d6      	b.n	800d366 <_free_r+0x22>
 800d3b8:	6820      	ldr	r0, [r4, #0]
 800d3ba:	1821      	adds	r1, r4, r0
 800d3bc:	428b      	cmp	r3, r1
 800d3be:	bf04      	itt	eq
 800d3c0:	6819      	ldreq	r1, [r3, #0]
 800d3c2:	685b      	ldreq	r3, [r3, #4]
 800d3c4:	6063      	str	r3, [r4, #4]
 800d3c6:	bf04      	itt	eq
 800d3c8:	1809      	addeq	r1, r1, r0
 800d3ca:	6021      	streq	r1, [r4, #0]
 800d3cc:	6054      	str	r4, [r2, #4]
 800d3ce:	e7ca      	b.n	800d366 <_free_r+0x22>
 800d3d0:	bd38      	pop	{r3, r4, r5, pc}
 800d3d2:	bf00      	nop
 800d3d4:	24012dd4 	.word	0x24012dd4

0800d3d8 <malloc>:
 800d3d8:	4b02      	ldr	r3, [pc, #8]	@ (800d3e4 <malloc+0xc>)
 800d3da:	4601      	mov	r1, r0
 800d3dc:	6818      	ldr	r0, [r3, #0]
 800d3de:	f000 b825 	b.w	800d42c <_malloc_r>
 800d3e2:	bf00      	nop
 800d3e4:	2400003c 	.word	0x2400003c

0800d3e8 <sbrk_aligned>:
 800d3e8:	b570      	push	{r4, r5, r6, lr}
 800d3ea:	4e0f      	ldr	r6, [pc, #60]	@ (800d428 <sbrk_aligned+0x40>)
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	6831      	ldr	r1, [r6, #0]
 800d3f0:	4605      	mov	r5, r0
 800d3f2:	b911      	cbnz	r1, 800d3fa <sbrk_aligned+0x12>
 800d3f4:	f000 f964 	bl	800d6c0 <_sbrk_r>
 800d3f8:	6030      	str	r0, [r6, #0]
 800d3fa:	4621      	mov	r1, r4
 800d3fc:	4628      	mov	r0, r5
 800d3fe:	f000 f95f 	bl	800d6c0 <_sbrk_r>
 800d402:	1c43      	adds	r3, r0, #1
 800d404:	d103      	bne.n	800d40e <sbrk_aligned+0x26>
 800d406:	f04f 34ff 	mov.w	r4, #4294967295
 800d40a:	4620      	mov	r0, r4
 800d40c:	bd70      	pop	{r4, r5, r6, pc}
 800d40e:	1cc4      	adds	r4, r0, #3
 800d410:	f024 0403 	bic.w	r4, r4, #3
 800d414:	42a0      	cmp	r0, r4
 800d416:	d0f8      	beq.n	800d40a <sbrk_aligned+0x22>
 800d418:	1a21      	subs	r1, r4, r0
 800d41a:	4628      	mov	r0, r5
 800d41c:	f000 f950 	bl	800d6c0 <_sbrk_r>
 800d420:	3001      	adds	r0, #1
 800d422:	d1f2      	bne.n	800d40a <sbrk_aligned+0x22>
 800d424:	e7ef      	b.n	800d406 <sbrk_aligned+0x1e>
 800d426:	bf00      	nop
 800d428:	24012dd0 	.word	0x24012dd0

0800d42c <_malloc_r>:
 800d42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d430:	1ccd      	adds	r5, r1, #3
 800d432:	f025 0503 	bic.w	r5, r5, #3
 800d436:	3508      	adds	r5, #8
 800d438:	2d0c      	cmp	r5, #12
 800d43a:	bf38      	it	cc
 800d43c:	250c      	movcc	r5, #12
 800d43e:	2d00      	cmp	r5, #0
 800d440:	4606      	mov	r6, r0
 800d442:	db01      	blt.n	800d448 <_malloc_r+0x1c>
 800d444:	42a9      	cmp	r1, r5
 800d446:	d904      	bls.n	800d452 <_malloc_r+0x26>
 800d448:	230c      	movs	r3, #12
 800d44a:	6033      	str	r3, [r6, #0]
 800d44c:	2000      	movs	r0, #0
 800d44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d452:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d528 <_malloc_r+0xfc>
 800d456:	f000 f869 	bl	800d52c <__malloc_lock>
 800d45a:	f8d8 3000 	ldr.w	r3, [r8]
 800d45e:	461c      	mov	r4, r3
 800d460:	bb44      	cbnz	r4, 800d4b4 <_malloc_r+0x88>
 800d462:	4629      	mov	r1, r5
 800d464:	4630      	mov	r0, r6
 800d466:	f7ff ffbf 	bl	800d3e8 <sbrk_aligned>
 800d46a:	1c43      	adds	r3, r0, #1
 800d46c:	4604      	mov	r4, r0
 800d46e:	d158      	bne.n	800d522 <_malloc_r+0xf6>
 800d470:	f8d8 4000 	ldr.w	r4, [r8]
 800d474:	4627      	mov	r7, r4
 800d476:	2f00      	cmp	r7, #0
 800d478:	d143      	bne.n	800d502 <_malloc_r+0xd6>
 800d47a:	2c00      	cmp	r4, #0
 800d47c:	d04b      	beq.n	800d516 <_malloc_r+0xea>
 800d47e:	6823      	ldr	r3, [r4, #0]
 800d480:	4639      	mov	r1, r7
 800d482:	4630      	mov	r0, r6
 800d484:	eb04 0903 	add.w	r9, r4, r3
 800d488:	f000 f91a 	bl	800d6c0 <_sbrk_r>
 800d48c:	4581      	cmp	r9, r0
 800d48e:	d142      	bne.n	800d516 <_malloc_r+0xea>
 800d490:	6821      	ldr	r1, [r4, #0]
 800d492:	1a6d      	subs	r5, r5, r1
 800d494:	4629      	mov	r1, r5
 800d496:	4630      	mov	r0, r6
 800d498:	f7ff ffa6 	bl	800d3e8 <sbrk_aligned>
 800d49c:	3001      	adds	r0, #1
 800d49e:	d03a      	beq.n	800d516 <_malloc_r+0xea>
 800d4a0:	6823      	ldr	r3, [r4, #0]
 800d4a2:	442b      	add	r3, r5
 800d4a4:	6023      	str	r3, [r4, #0]
 800d4a6:	f8d8 3000 	ldr.w	r3, [r8]
 800d4aa:	685a      	ldr	r2, [r3, #4]
 800d4ac:	bb62      	cbnz	r2, 800d508 <_malloc_r+0xdc>
 800d4ae:	f8c8 7000 	str.w	r7, [r8]
 800d4b2:	e00f      	b.n	800d4d4 <_malloc_r+0xa8>
 800d4b4:	6822      	ldr	r2, [r4, #0]
 800d4b6:	1b52      	subs	r2, r2, r5
 800d4b8:	d420      	bmi.n	800d4fc <_malloc_r+0xd0>
 800d4ba:	2a0b      	cmp	r2, #11
 800d4bc:	d917      	bls.n	800d4ee <_malloc_r+0xc2>
 800d4be:	1961      	adds	r1, r4, r5
 800d4c0:	42a3      	cmp	r3, r4
 800d4c2:	6025      	str	r5, [r4, #0]
 800d4c4:	bf18      	it	ne
 800d4c6:	6059      	strne	r1, [r3, #4]
 800d4c8:	6863      	ldr	r3, [r4, #4]
 800d4ca:	bf08      	it	eq
 800d4cc:	f8c8 1000 	streq.w	r1, [r8]
 800d4d0:	5162      	str	r2, [r4, r5]
 800d4d2:	604b      	str	r3, [r1, #4]
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	f000 f82f 	bl	800d538 <__malloc_unlock>
 800d4da:	f104 000b 	add.w	r0, r4, #11
 800d4de:	1d23      	adds	r3, r4, #4
 800d4e0:	f020 0007 	bic.w	r0, r0, #7
 800d4e4:	1ac2      	subs	r2, r0, r3
 800d4e6:	bf1c      	itt	ne
 800d4e8:	1a1b      	subne	r3, r3, r0
 800d4ea:	50a3      	strne	r3, [r4, r2]
 800d4ec:	e7af      	b.n	800d44e <_malloc_r+0x22>
 800d4ee:	6862      	ldr	r2, [r4, #4]
 800d4f0:	42a3      	cmp	r3, r4
 800d4f2:	bf0c      	ite	eq
 800d4f4:	f8c8 2000 	streq.w	r2, [r8]
 800d4f8:	605a      	strne	r2, [r3, #4]
 800d4fa:	e7eb      	b.n	800d4d4 <_malloc_r+0xa8>
 800d4fc:	4623      	mov	r3, r4
 800d4fe:	6864      	ldr	r4, [r4, #4]
 800d500:	e7ae      	b.n	800d460 <_malloc_r+0x34>
 800d502:	463c      	mov	r4, r7
 800d504:	687f      	ldr	r7, [r7, #4]
 800d506:	e7b6      	b.n	800d476 <_malloc_r+0x4a>
 800d508:	461a      	mov	r2, r3
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	42a3      	cmp	r3, r4
 800d50e:	d1fb      	bne.n	800d508 <_malloc_r+0xdc>
 800d510:	2300      	movs	r3, #0
 800d512:	6053      	str	r3, [r2, #4]
 800d514:	e7de      	b.n	800d4d4 <_malloc_r+0xa8>
 800d516:	230c      	movs	r3, #12
 800d518:	6033      	str	r3, [r6, #0]
 800d51a:	4630      	mov	r0, r6
 800d51c:	f000 f80c 	bl	800d538 <__malloc_unlock>
 800d520:	e794      	b.n	800d44c <_malloc_r+0x20>
 800d522:	6005      	str	r5, [r0, #0]
 800d524:	e7d6      	b.n	800d4d4 <_malloc_r+0xa8>
 800d526:	bf00      	nop
 800d528:	24012dd4 	.word	0x24012dd4

0800d52c <__malloc_lock>:
 800d52c:	4801      	ldr	r0, [pc, #4]	@ (800d534 <__malloc_lock+0x8>)
 800d52e:	f7ff beda 	b.w	800d2e6 <__retarget_lock_acquire_recursive>
 800d532:	bf00      	nop
 800d534:	24012dcc 	.word	0x24012dcc

0800d538 <__malloc_unlock>:
 800d538:	4801      	ldr	r0, [pc, #4]	@ (800d540 <__malloc_unlock+0x8>)
 800d53a:	f7ff bed5 	b.w	800d2e8 <__retarget_lock_release_recursive>
 800d53e:	bf00      	nop
 800d540:	24012dcc 	.word	0x24012dcc

0800d544 <__sflush_r>:
 800d544:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d54c:	0716      	lsls	r6, r2, #28
 800d54e:	4605      	mov	r5, r0
 800d550:	460c      	mov	r4, r1
 800d552:	d454      	bmi.n	800d5fe <__sflush_r+0xba>
 800d554:	684b      	ldr	r3, [r1, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	dc02      	bgt.n	800d560 <__sflush_r+0x1c>
 800d55a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	dd48      	ble.n	800d5f2 <__sflush_r+0xae>
 800d560:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d562:	2e00      	cmp	r6, #0
 800d564:	d045      	beq.n	800d5f2 <__sflush_r+0xae>
 800d566:	2300      	movs	r3, #0
 800d568:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d56c:	682f      	ldr	r7, [r5, #0]
 800d56e:	6a21      	ldr	r1, [r4, #32]
 800d570:	602b      	str	r3, [r5, #0]
 800d572:	d030      	beq.n	800d5d6 <__sflush_r+0x92>
 800d574:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d576:	89a3      	ldrh	r3, [r4, #12]
 800d578:	0759      	lsls	r1, r3, #29
 800d57a:	d505      	bpl.n	800d588 <__sflush_r+0x44>
 800d57c:	6863      	ldr	r3, [r4, #4]
 800d57e:	1ad2      	subs	r2, r2, r3
 800d580:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d582:	b10b      	cbz	r3, 800d588 <__sflush_r+0x44>
 800d584:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d586:	1ad2      	subs	r2, r2, r3
 800d588:	2300      	movs	r3, #0
 800d58a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d58c:	6a21      	ldr	r1, [r4, #32]
 800d58e:	4628      	mov	r0, r5
 800d590:	47b0      	blx	r6
 800d592:	1c43      	adds	r3, r0, #1
 800d594:	89a3      	ldrh	r3, [r4, #12]
 800d596:	d106      	bne.n	800d5a6 <__sflush_r+0x62>
 800d598:	6829      	ldr	r1, [r5, #0]
 800d59a:	291d      	cmp	r1, #29
 800d59c:	d82b      	bhi.n	800d5f6 <__sflush_r+0xb2>
 800d59e:	4a2a      	ldr	r2, [pc, #168]	@ (800d648 <__sflush_r+0x104>)
 800d5a0:	40ca      	lsrs	r2, r1
 800d5a2:	07d6      	lsls	r6, r2, #31
 800d5a4:	d527      	bpl.n	800d5f6 <__sflush_r+0xb2>
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	6062      	str	r2, [r4, #4]
 800d5aa:	04d9      	lsls	r1, r3, #19
 800d5ac:	6922      	ldr	r2, [r4, #16]
 800d5ae:	6022      	str	r2, [r4, #0]
 800d5b0:	d504      	bpl.n	800d5bc <__sflush_r+0x78>
 800d5b2:	1c42      	adds	r2, r0, #1
 800d5b4:	d101      	bne.n	800d5ba <__sflush_r+0x76>
 800d5b6:	682b      	ldr	r3, [r5, #0]
 800d5b8:	b903      	cbnz	r3, 800d5bc <__sflush_r+0x78>
 800d5ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800d5bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d5be:	602f      	str	r7, [r5, #0]
 800d5c0:	b1b9      	cbz	r1, 800d5f2 <__sflush_r+0xae>
 800d5c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d5c6:	4299      	cmp	r1, r3
 800d5c8:	d002      	beq.n	800d5d0 <__sflush_r+0x8c>
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	f7ff feba 	bl	800d344 <_free_r>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d5d4:	e00d      	b.n	800d5f2 <__sflush_r+0xae>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	4628      	mov	r0, r5
 800d5da:	47b0      	blx	r6
 800d5dc:	4602      	mov	r2, r0
 800d5de:	1c50      	adds	r0, r2, #1
 800d5e0:	d1c9      	bne.n	800d576 <__sflush_r+0x32>
 800d5e2:	682b      	ldr	r3, [r5, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d0c6      	beq.n	800d576 <__sflush_r+0x32>
 800d5e8:	2b1d      	cmp	r3, #29
 800d5ea:	d001      	beq.n	800d5f0 <__sflush_r+0xac>
 800d5ec:	2b16      	cmp	r3, #22
 800d5ee:	d11e      	bne.n	800d62e <__sflush_r+0xea>
 800d5f0:	602f      	str	r7, [r5, #0]
 800d5f2:	2000      	movs	r0, #0
 800d5f4:	e022      	b.n	800d63c <__sflush_r+0xf8>
 800d5f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5fa:	b21b      	sxth	r3, r3
 800d5fc:	e01b      	b.n	800d636 <__sflush_r+0xf2>
 800d5fe:	690f      	ldr	r7, [r1, #16]
 800d600:	2f00      	cmp	r7, #0
 800d602:	d0f6      	beq.n	800d5f2 <__sflush_r+0xae>
 800d604:	0793      	lsls	r3, r2, #30
 800d606:	680e      	ldr	r6, [r1, #0]
 800d608:	bf08      	it	eq
 800d60a:	694b      	ldreq	r3, [r1, #20]
 800d60c:	600f      	str	r7, [r1, #0]
 800d60e:	bf18      	it	ne
 800d610:	2300      	movne	r3, #0
 800d612:	eba6 0807 	sub.w	r8, r6, r7
 800d616:	608b      	str	r3, [r1, #8]
 800d618:	f1b8 0f00 	cmp.w	r8, #0
 800d61c:	dde9      	ble.n	800d5f2 <__sflush_r+0xae>
 800d61e:	6a21      	ldr	r1, [r4, #32]
 800d620:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d622:	4643      	mov	r3, r8
 800d624:	463a      	mov	r2, r7
 800d626:	4628      	mov	r0, r5
 800d628:	47b0      	blx	r6
 800d62a:	2800      	cmp	r0, #0
 800d62c:	dc08      	bgt.n	800d640 <__sflush_r+0xfc>
 800d62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d636:	81a3      	strh	r3, [r4, #12]
 800d638:	f04f 30ff 	mov.w	r0, #4294967295
 800d63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d640:	4407      	add	r7, r0
 800d642:	eba8 0800 	sub.w	r8, r8, r0
 800d646:	e7e7      	b.n	800d618 <__sflush_r+0xd4>
 800d648:	20400001 	.word	0x20400001

0800d64c <_fflush_r>:
 800d64c:	b538      	push	{r3, r4, r5, lr}
 800d64e:	690b      	ldr	r3, [r1, #16]
 800d650:	4605      	mov	r5, r0
 800d652:	460c      	mov	r4, r1
 800d654:	b913      	cbnz	r3, 800d65c <_fflush_r+0x10>
 800d656:	2500      	movs	r5, #0
 800d658:	4628      	mov	r0, r5
 800d65a:	bd38      	pop	{r3, r4, r5, pc}
 800d65c:	b118      	cbz	r0, 800d666 <_fflush_r+0x1a>
 800d65e:	6a03      	ldr	r3, [r0, #32]
 800d660:	b90b      	cbnz	r3, 800d666 <_fflush_r+0x1a>
 800d662:	f7ff fd3d 	bl	800d0e0 <__sinit>
 800d666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d0f3      	beq.n	800d656 <_fflush_r+0xa>
 800d66e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d670:	07d0      	lsls	r0, r2, #31
 800d672:	d404      	bmi.n	800d67e <_fflush_r+0x32>
 800d674:	0599      	lsls	r1, r3, #22
 800d676:	d402      	bmi.n	800d67e <_fflush_r+0x32>
 800d678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d67a:	f7ff fe34 	bl	800d2e6 <__retarget_lock_acquire_recursive>
 800d67e:	4628      	mov	r0, r5
 800d680:	4621      	mov	r1, r4
 800d682:	f7ff ff5f 	bl	800d544 <__sflush_r>
 800d686:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d688:	07da      	lsls	r2, r3, #31
 800d68a:	4605      	mov	r5, r0
 800d68c:	d4e4      	bmi.n	800d658 <_fflush_r+0xc>
 800d68e:	89a3      	ldrh	r3, [r4, #12]
 800d690:	059b      	lsls	r3, r3, #22
 800d692:	d4e1      	bmi.n	800d658 <_fflush_r+0xc>
 800d694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d696:	f7ff fe27 	bl	800d2e8 <__retarget_lock_release_recursive>
 800d69a:	e7dd      	b.n	800d658 <_fflush_r+0xc>

0800d69c <fiprintf>:
 800d69c:	b40e      	push	{r1, r2, r3}
 800d69e:	b503      	push	{r0, r1, lr}
 800d6a0:	4601      	mov	r1, r0
 800d6a2:	ab03      	add	r3, sp, #12
 800d6a4:	4805      	ldr	r0, [pc, #20]	@ (800d6bc <fiprintf+0x20>)
 800d6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6aa:	6800      	ldr	r0, [r0, #0]
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	f000 f847 	bl	800d740 <_vfiprintf_r>
 800d6b2:	b002      	add	sp, #8
 800d6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6b8:	b003      	add	sp, #12
 800d6ba:	4770      	bx	lr
 800d6bc:	2400003c 	.word	0x2400003c

0800d6c0 <_sbrk_r>:
 800d6c0:	b538      	push	{r3, r4, r5, lr}
 800d6c2:	4d06      	ldr	r5, [pc, #24]	@ (800d6dc <_sbrk_r+0x1c>)
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	4608      	mov	r0, r1
 800d6ca:	602b      	str	r3, [r5, #0]
 800d6cc:	f7f7 fd48 	bl	8005160 <_sbrk>
 800d6d0:	1c43      	adds	r3, r0, #1
 800d6d2:	d102      	bne.n	800d6da <_sbrk_r+0x1a>
 800d6d4:	682b      	ldr	r3, [r5, #0]
 800d6d6:	b103      	cbz	r3, 800d6da <_sbrk_r+0x1a>
 800d6d8:	6023      	str	r3, [r4, #0]
 800d6da:	bd38      	pop	{r3, r4, r5, pc}
 800d6dc:	24012dc8 	.word	0x24012dc8

0800d6e0 <abort>:
 800d6e0:	b508      	push	{r3, lr}
 800d6e2:	2006      	movs	r0, #6
 800d6e4:	f000 fb8c 	bl	800de00 <raise>
 800d6e8:	2001      	movs	r0, #1
 800d6ea:	f7f7 fcc1 	bl	8005070 <_exit>

0800d6ee <__sfputc_r>:
 800d6ee:	6893      	ldr	r3, [r2, #8]
 800d6f0:	3b01      	subs	r3, #1
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	b410      	push	{r4}
 800d6f6:	6093      	str	r3, [r2, #8]
 800d6f8:	da08      	bge.n	800d70c <__sfputc_r+0x1e>
 800d6fa:	6994      	ldr	r4, [r2, #24]
 800d6fc:	42a3      	cmp	r3, r4
 800d6fe:	db01      	blt.n	800d704 <__sfputc_r+0x16>
 800d700:	290a      	cmp	r1, #10
 800d702:	d103      	bne.n	800d70c <__sfputc_r+0x1e>
 800d704:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d708:	f000 babe 	b.w	800dc88 <__swbuf_r>
 800d70c:	6813      	ldr	r3, [r2, #0]
 800d70e:	1c58      	adds	r0, r3, #1
 800d710:	6010      	str	r0, [r2, #0]
 800d712:	7019      	strb	r1, [r3, #0]
 800d714:	4608      	mov	r0, r1
 800d716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d71a:	4770      	bx	lr

0800d71c <__sfputs_r>:
 800d71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d71e:	4606      	mov	r6, r0
 800d720:	460f      	mov	r7, r1
 800d722:	4614      	mov	r4, r2
 800d724:	18d5      	adds	r5, r2, r3
 800d726:	42ac      	cmp	r4, r5
 800d728:	d101      	bne.n	800d72e <__sfputs_r+0x12>
 800d72a:	2000      	movs	r0, #0
 800d72c:	e007      	b.n	800d73e <__sfputs_r+0x22>
 800d72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d732:	463a      	mov	r2, r7
 800d734:	4630      	mov	r0, r6
 800d736:	f7ff ffda 	bl	800d6ee <__sfputc_r>
 800d73a:	1c43      	adds	r3, r0, #1
 800d73c:	d1f3      	bne.n	800d726 <__sfputs_r+0xa>
 800d73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d740 <_vfiprintf_r>:
 800d740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d744:	460d      	mov	r5, r1
 800d746:	b09d      	sub	sp, #116	@ 0x74
 800d748:	4614      	mov	r4, r2
 800d74a:	4698      	mov	r8, r3
 800d74c:	4606      	mov	r6, r0
 800d74e:	b118      	cbz	r0, 800d758 <_vfiprintf_r+0x18>
 800d750:	6a03      	ldr	r3, [r0, #32]
 800d752:	b90b      	cbnz	r3, 800d758 <_vfiprintf_r+0x18>
 800d754:	f7ff fcc4 	bl	800d0e0 <__sinit>
 800d758:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d75a:	07d9      	lsls	r1, r3, #31
 800d75c:	d405      	bmi.n	800d76a <_vfiprintf_r+0x2a>
 800d75e:	89ab      	ldrh	r3, [r5, #12]
 800d760:	059a      	lsls	r2, r3, #22
 800d762:	d402      	bmi.n	800d76a <_vfiprintf_r+0x2a>
 800d764:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d766:	f7ff fdbe 	bl	800d2e6 <__retarget_lock_acquire_recursive>
 800d76a:	89ab      	ldrh	r3, [r5, #12]
 800d76c:	071b      	lsls	r3, r3, #28
 800d76e:	d501      	bpl.n	800d774 <_vfiprintf_r+0x34>
 800d770:	692b      	ldr	r3, [r5, #16]
 800d772:	b99b      	cbnz	r3, 800d79c <_vfiprintf_r+0x5c>
 800d774:	4629      	mov	r1, r5
 800d776:	4630      	mov	r0, r6
 800d778:	f000 fac4 	bl	800dd04 <__swsetup_r>
 800d77c:	b170      	cbz	r0, 800d79c <_vfiprintf_r+0x5c>
 800d77e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d780:	07dc      	lsls	r4, r3, #31
 800d782:	d504      	bpl.n	800d78e <_vfiprintf_r+0x4e>
 800d784:	f04f 30ff 	mov.w	r0, #4294967295
 800d788:	b01d      	add	sp, #116	@ 0x74
 800d78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d78e:	89ab      	ldrh	r3, [r5, #12]
 800d790:	0598      	lsls	r0, r3, #22
 800d792:	d4f7      	bmi.n	800d784 <_vfiprintf_r+0x44>
 800d794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d796:	f7ff fda7 	bl	800d2e8 <__retarget_lock_release_recursive>
 800d79a:	e7f3      	b.n	800d784 <_vfiprintf_r+0x44>
 800d79c:	2300      	movs	r3, #0
 800d79e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7a0:	2320      	movs	r3, #32
 800d7a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d7a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7aa:	2330      	movs	r3, #48	@ 0x30
 800d7ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d95c <_vfiprintf_r+0x21c>
 800d7b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d7b4:	f04f 0901 	mov.w	r9, #1
 800d7b8:	4623      	mov	r3, r4
 800d7ba:	469a      	mov	sl, r3
 800d7bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7c0:	b10a      	cbz	r2, 800d7c6 <_vfiprintf_r+0x86>
 800d7c2:	2a25      	cmp	r2, #37	@ 0x25
 800d7c4:	d1f9      	bne.n	800d7ba <_vfiprintf_r+0x7a>
 800d7c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d7ca:	d00b      	beq.n	800d7e4 <_vfiprintf_r+0xa4>
 800d7cc:	465b      	mov	r3, fp
 800d7ce:	4622      	mov	r2, r4
 800d7d0:	4629      	mov	r1, r5
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	f7ff ffa2 	bl	800d71c <__sfputs_r>
 800d7d8:	3001      	adds	r0, #1
 800d7da:	f000 80a7 	beq.w	800d92c <_vfiprintf_r+0x1ec>
 800d7de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7e0:	445a      	add	r2, fp
 800d7e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f000 809f 	beq.w	800d92c <_vfiprintf_r+0x1ec>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7f8:	f10a 0a01 	add.w	sl, sl, #1
 800d7fc:	9304      	str	r3, [sp, #16]
 800d7fe:	9307      	str	r3, [sp, #28]
 800d800:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d804:	931a      	str	r3, [sp, #104]	@ 0x68
 800d806:	4654      	mov	r4, sl
 800d808:	2205      	movs	r2, #5
 800d80a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d80e:	4853      	ldr	r0, [pc, #332]	@ (800d95c <_vfiprintf_r+0x21c>)
 800d810:	f7f2 fd66 	bl	80002e0 <memchr>
 800d814:	9a04      	ldr	r2, [sp, #16]
 800d816:	b9d8      	cbnz	r0, 800d850 <_vfiprintf_r+0x110>
 800d818:	06d1      	lsls	r1, r2, #27
 800d81a:	bf44      	itt	mi
 800d81c:	2320      	movmi	r3, #32
 800d81e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d822:	0713      	lsls	r3, r2, #28
 800d824:	bf44      	itt	mi
 800d826:	232b      	movmi	r3, #43	@ 0x2b
 800d828:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d82c:	f89a 3000 	ldrb.w	r3, [sl]
 800d830:	2b2a      	cmp	r3, #42	@ 0x2a
 800d832:	d015      	beq.n	800d860 <_vfiprintf_r+0x120>
 800d834:	9a07      	ldr	r2, [sp, #28]
 800d836:	4654      	mov	r4, sl
 800d838:	2000      	movs	r0, #0
 800d83a:	f04f 0c0a 	mov.w	ip, #10
 800d83e:	4621      	mov	r1, r4
 800d840:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d844:	3b30      	subs	r3, #48	@ 0x30
 800d846:	2b09      	cmp	r3, #9
 800d848:	d94b      	bls.n	800d8e2 <_vfiprintf_r+0x1a2>
 800d84a:	b1b0      	cbz	r0, 800d87a <_vfiprintf_r+0x13a>
 800d84c:	9207      	str	r2, [sp, #28]
 800d84e:	e014      	b.n	800d87a <_vfiprintf_r+0x13a>
 800d850:	eba0 0308 	sub.w	r3, r0, r8
 800d854:	fa09 f303 	lsl.w	r3, r9, r3
 800d858:	4313      	orrs	r3, r2
 800d85a:	9304      	str	r3, [sp, #16]
 800d85c:	46a2      	mov	sl, r4
 800d85e:	e7d2      	b.n	800d806 <_vfiprintf_r+0xc6>
 800d860:	9b03      	ldr	r3, [sp, #12]
 800d862:	1d19      	adds	r1, r3, #4
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	9103      	str	r1, [sp, #12]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	bfbb      	ittet	lt
 800d86c:	425b      	neglt	r3, r3
 800d86e:	f042 0202 	orrlt.w	r2, r2, #2
 800d872:	9307      	strge	r3, [sp, #28]
 800d874:	9307      	strlt	r3, [sp, #28]
 800d876:	bfb8      	it	lt
 800d878:	9204      	strlt	r2, [sp, #16]
 800d87a:	7823      	ldrb	r3, [r4, #0]
 800d87c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d87e:	d10a      	bne.n	800d896 <_vfiprintf_r+0x156>
 800d880:	7863      	ldrb	r3, [r4, #1]
 800d882:	2b2a      	cmp	r3, #42	@ 0x2a
 800d884:	d132      	bne.n	800d8ec <_vfiprintf_r+0x1ac>
 800d886:	9b03      	ldr	r3, [sp, #12]
 800d888:	1d1a      	adds	r2, r3, #4
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	9203      	str	r2, [sp, #12]
 800d88e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d892:	3402      	adds	r4, #2
 800d894:	9305      	str	r3, [sp, #20]
 800d896:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d96c <_vfiprintf_r+0x22c>
 800d89a:	7821      	ldrb	r1, [r4, #0]
 800d89c:	2203      	movs	r2, #3
 800d89e:	4650      	mov	r0, sl
 800d8a0:	f7f2 fd1e 	bl	80002e0 <memchr>
 800d8a4:	b138      	cbz	r0, 800d8b6 <_vfiprintf_r+0x176>
 800d8a6:	9b04      	ldr	r3, [sp, #16]
 800d8a8:	eba0 000a 	sub.w	r0, r0, sl
 800d8ac:	2240      	movs	r2, #64	@ 0x40
 800d8ae:	4082      	lsls	r2, r0
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	3401      	adds	r4, #1
 800d8b4:	9304      	str	r3, [sp, #16]
 800d8b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8ba:	4829      	ldr	r0, [pc, #164]	@ (800d960 <_vfiprintf_r+0x220>)
 800d8bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d8c0:	2206      	movs	r2, #6
 800d8c2:	f7f2 fd0d 	bl	80002e0 <memchr>
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	d03f      	beq.n	800d94a <_vfiprintf_r+0x20a>
 800d8ca:	4b26      	ldr	r3, [pc, #152]	@ (800d964 <_vfiprintf_r+0x224>)
 800d8cc:	bb1b      	cbnz	r3, 800d916 <_vfiprintf_r+0x1d6>
 800d8ce:	9b03      	ldr	r3, [sp, #12]
 800d8d0:	3307      	adds	r3, #7
 800d8d2:	f023 0307 	bic.w	r3, r3, #7
 800d8d6:	3308      	adds	r3, #8
 800d8d8:	9303      	str	r3, [sp, #12]
 800d8da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8dc:	443b      	add	r3, r7
 800d8de:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8e0:	e76a      	b.n	800d7b8 <_vfiprintf_r+0x78>
 800d8e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8e6:	460c      	mov	r4, r1
 800d8e8:	2001      	movs	r0, #1
 800d8ea:	e7a8      	b.n	800d83e <_vfiprintf_r+0xfe>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	3401      	adds	r4, #1
 800d8f0:	9305      	str	r3, [sp, #20]
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	f04f 0c0a 	mov.w	ip, #10
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8fe:	3a30      	subs	r2, #48	@ 0x30
 800d900:	2a09      	cmp	r2, #9
 800d902:	d903      	bls.n	800d90c <_vfiprintf_r+0x1cc>
 800d904:	2b00      	cmp	r3, #0
 800d906:	d0c6      	beq.n	800d896 <_vfiprintf_r+0x156>
 800d908:	9105      	str	r1, [sp, #20]
 800d90a:	e7c4      	b.n	800d896 <_vfiprintf_r+0x156>
 800d90c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d910:	4604      	mov	r4, r0
 800d912:	2301      	movs	r3, #1
 800d914:	e7f0      	b.n	800d8f8 <_vfiprintf_r+0x1b8>
 800d916:	ab03      	add	r3, sp, #12
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	462a      	mov	r2, r5
 800d91c:	4b12      	ldr	r3, [pc, #72]	@ (800d968 <_vfiprintf_r+0x228>)
 800d91e:	a904      	add	r1, sp, #16
 800d920:	4630      	mov	r0, r6
 800d922:	f3af 8000 	nop.w
 800d926:	4607      	mov	r7, r0
 800d928:	1c78      	adds	r0, r7, #1
 800d92a:	d1d6      	bne.n	800d8da <_vfiprintf_r+0x19a>
 800d92c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d92e:	07d9      	lsls	r1, r3, #31
 800d930:	d405      	bmi.n	800d93e <_vfiprintf_r+0x1fe>
 800d932:	89ab      	ldrh	r3, [r5, #12]
 800d934:	059a      	lsls	r2, r3, #22
 800d936:	d402      	bmi.n	800d93e <_vfiprintf_r+0x1fe>
 800d938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d93a:	f7ff fcd5 	bl	800d2e8 <__retarget_lock_release_recursive>
 800d93e:	89ab      	ldrh	r3, [r5, #12]
 800d940:	065b      	lsls	r3, r3, #25
 800d942:	f53f af1f 	bmi.w	800d784 <_vfiprintf_r+0x44>
 800d946:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d948:	e71e      	b.n	800d788 <_vfiprintf_r+0x48>
 800d94a:	ab03      	add	r3, sp, #12
 800d94c:	9300      	str	r3, [sp, #0]
 800d94e:	462a      	mov	r2, r5
 800d950:	4b05      	ldr	r3, [pc, #20]	@ (800d968 <_vfiprintf_r+0x228>)
 800d952:	a904      	add	r1, sp, #16
 800d954:	4630      	mov	r0, r6
 800d956:	f000 f879 	bl	800da4c <_printf_i>
 800d95a:	e7e4      	b.n	800d926 <_vfiprintf_r+0x1e6>
 800d95c:	0800e25b 	.word	0x0800e25b
 800d960:	0800e265 	.word	0x0800e265
 800d964:	00000000 	.word	0x00000000
 800d968:	0800d71d 	.word	0x0800d71d
 800d96c:	0800e261 	.word	0x0800e261

0800d970 <_printf_common>:
 800d970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d974:	4616      	mov	r6, r2
 800d976:	4698      	mov	r8, r3
 800d978:	688a      	ldr	r2, [r1, #8]
 800d97a:	690b      	ldr	r3, [r1, #16]
 800d97c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d980:	4293      	cmp	r3, r2
 800d982:	bfb8      	it	lt
 800d984:	4613      	movlt	r3, r2
 800d986:	6033      	str	r3, [r6, #0]
 800d988:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d98c:	4607      	mov	r7, r0
 800d98e:	460c      	mov	r4, r1
 800d990:	b10a      	cbz	r2, 800d996 <_printf_common+0x26>
 800d992:	3301      	adds	r3, #1
 800d994:	6033      	str	r3, [r6, #0]
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	0699      	lsls	r1, r3, #26
 800d99a:	bf42      	ittt	mi
 800d99c:	6833      	ldrmi	r3, [r6, #0]
 800d99e:	3302      	addmi	r3, #2
 800d9a0:	6033      	strmi	r3, [r6, #0]
 800d9a2:	6825      	ldr	r5, [r4, #0]
 800d9a4:	f015 0506 	ands.w	r5, r5, #6
 800d9a8:	d106      	bne.n	800d9b8 <_printf_common+0x48>
 800d9aa:	f104 0a19 	add.w	sl, r4, #25
 800d9ae:	68e3      	ldr	r3, [r4, #12]
 800d9b0:	6832      	ldr	r2, [r6, #0]
 800d9b2:	1a9b      	subs	r3, r3, r2
 800d9b4:	42ab      	cmp	r3, r5
 800d9b6:	dc26      	bgt.n	800da06 <_printf_common+0x96>
 800d9b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d9bc:	6822      	ldr	r2, [r4, #0]
 800d9be:	3b00      	subs	r3, #0
 800d9c0:	bf18      	it	ne
 800d9c2:	2301      	movne	r3, #1
 800d9c4:	0692      	lsls	r2, r2, #26
 800d9c6:	d42b      	bmi.n	800da20 <_printf_common+0xb0>
 800d9c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d9cc:	4641      	mov	r1, r8
 800d9ce:	4638      	mov	r0, r7
 800d9d0:	47c8      	blx	r9
 800d9d2:	3001      	adds	r0, #1
 800d9d4:	d01e      	beq.n	800da14 <_printf_common+0xa4>
 800d9d6:	6823      	ldr	r3, [r4, #0]
 800d9d8:	6922      	ldr	r2, [r4, #16]
 800d9da:	f003 0306 	and.w	r3, r3, #6
 800d9de:	2b04      	cmp	r3, #4
 800d9e0:	bf02      	ittt	eq
 800d9e2:	68e5      	ldreq	r5, [r4, #12]
 800d9e4:	6833      	ldreq	r3, [r6, #0]
 800d9e6:	1aed      	subeq	r5, r5, r3
 800d9e8:	68a3      	ldr	r3, [r4, #8]
 800d9ea:	bf0c      	ite	eq
 800d9ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9f0:	2500      	movne	r5, #0
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	bfc4      	itt	gt
 800d9f6:	1a9b      	subgt	r3, r3, r2
 800d9f8:	18ed      	addgt	r5, r5, r3
 800d9fa:	2600      	movs	r6, #0
 800d9fc:	341a      	adds	r4, #26
 800d9fe:	42b5      	cmp	r5, r6
 800da00:	d11a      	bne.n	800da38 <_printf_common+0xc8>
 800da02:	2000      	movs	r0, #0
 800da04:	e008      	b.n	800da18 <_printf_common+0xa8>
 800da06:	2301      	movs	r3, #1
 800da08:	4652      	mov	r2, sl
 800da0a:	4641      	mov	r1, r8
 800da0c:	4638      	mov	r0, r7
 800da0e:	47c8      	blx	r9
 800da10:	3001      	adds	r0, #1
 800da12:	d103      	bne.n	800da1c <_printf_common+0xac>
 800da14:	f04f 30ff 	mov.w	r0, #4294967295
 800da18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da1c:	3501      	adds	r5, #1
 800da1e:	e7c6      	b.n	800d9ae <_printf_common+0x3e>
 800da20:	18e1      	adds	r1, r4, r3
 800da22:	1c5a      	adds	r2, r3, #1
 800da24:	2030      	movs	r0, #48	@ 0x30
 800da26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da2a:	4422      	add	r2, r4
 800da2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da34:	3302      	adds	r3, #2
 800da36:	e7c7      	b.n	800d9c8 <_printf_common+0x58>
 800da38:	2301      	movs	r3, #1
 800da3a:	4622      	mov	r2, r4
 800da3c:	4641      	mov	r1, r8
 800da3e:	4638      	mov	r0, r7
 800da40:	47c8      	blx	r9
 800da42:	3001      	adds	r0, #1
 800da44:	d0e6      	beq.n	800da14 <_printf_common+0xa4>
 800da46:	3601      	adds	r6, #1
 800da48:	e7d9      	b.n	800d9fe <_printf_common+0x8e>
	...

0800da4c <_printf_i>:
 800da4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da50:	7e0f      	ldrb	r7, [r1, #24]
 800da52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da54:	2f78      	cmp	r7, #120	@ 0x78
 800da56:	4691      	mov	r9, r2
 800da58:	4680      	mov	r8, r0
 800da5a:	460c      	mov	r4, r1
 800da5c:	469a      	mov	sl, r3
 800da5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da62:	d807      	bhi.n	800da74 <_printf_i+0x28>
 800da64:	2f62      	cmp	r7, #98	@ 0x62
 800da66:	d80a      	bhi.n	800da7e <_printf_i+0x32>
 800da68:	2f00      	cmp	r7, #0
 800da6a:	f000 80d1 	beq.w	800dc10 <_printf_i+0x1c4>
 800da6e:	2f58      	cmp	r7, #88	@ 0x58
 800da70:	f000 80b8 	beq.w	800dbe4 <_printf_i+0x198>
 800da74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da7c:	e03a      	b.n	800daf4 <_printf_i+0xa8>
 800da7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800da82:	2b15      	cmp	r3, #21
 800da84:	d8f6      	bhi.n	800da74 <_printf_i+0x28>
 800da86:	a101      	add	r1, pc, #4	@ (adr r1, 800da8c <_printf_i+0x40>)
 800da88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da8c:	0800dae5 	.word	0x0800dae5
 800da90:	0800daf9 	.word	0x0800daf9
 800da94:	0800da75 	.word	0x0800da75
 800da98:	0800da75 	.word	0x0800da75
 800da9c:	0800da75 	.word	0x0800da75
 800daa0:	0800da75 	.word	0x0800da75
 800daa4:	0800daf9 	.word	0x0800daf9
 800daa8:	0800da75 	.word	0x0800da75
 800daac:	0800da75 	.word	0x0800da75
 800dab0:	0800da75 	.word	0x0800da75
 800dab4:	0800da75 	.word	0x0800da75
 800dab8:	0800dbf7 	.word	0x0800dbf7
 800dabc:	0800db23 	.word	0x0800db23
 800dac0:	0800dbb1 	.word	0x0800dbb1
 800dac4:	0800da75 	.word	0x0800da75
 800dac8:	0800da75 	.word	0x0800da75
 800dacc:	0800dc19 	.word	0x0800dc19
 800dad0:	0800da75 	.word	0x0800da75
 800dad4:	0800db23 	.word	0x0800db23
 800dad8:	0800da75 	.word	0x0800da75
 800dadc:	0800da75 	.word	0x0800da75
 800dae0:	0800dbb9 	.word	0x0800dbb9
 800dae4:	6833      	ldr	r3, [r6, #0]
 800dae6:	1d1a      	adds	r2, r3, #4
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	6032      	str	r2, [r6, #0]
 800daec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800daf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800daf4:	2301      	movs	r3, #1
 800daf6:	e09c      	b.n	800dc32 <_printf_i+0x1e6>
 800daf8:	6833      	ldr	r3, [r6, #0]
 800dafa:	6820      	ldr	r0, [r4, #0]
 800dafc:	1d19      	adds	r1, r3, #4
 800dafe:	6031      	str	r1, [r6, #0]
 800db00:	0606      	lsls	r6, r0, #24
 800db02:	d501      	bpl.n	800db08 <_printf_i+0xbc>
 800db04:	681d      	ldr	r5, [r3, #0]
 800db06:	e003      	b.n	800db10 <_printf_i+0xc4>
 800db08:	0645      	lsls	r5, r0, #25
 800db0a:	d5fb      	bpl.n	800db04 <_printf_i+0xb8>
 800db0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db10:	2d00      	cmp	r5, #0
 800db12:	da03      	bge.n	800db1c <_printf_i+0xd0>
 800db14:	232d      	movs	r3, #45	@ 0x2d
 800db16:	426d      	negs	r5, r5
 800db18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db1c:	4858      	ldr	r0, [pc, #352]	@ (800dc80 <_printf_i+0x234>)
 800db1e:	230a      	movs	r3, #10
 800db20:	e011      	b.n	800db46 <_printf_i+0xfa>
 800db22:	6821      	ldr	r1, [r4, #0]
 800db24:	6833      	ldr	r3, [r6, #0]
 800db26:	0608      	lsls	r0, r1, #24
 800db28:	f853 5b04 	ldr.w	r5, [r3], #4
 800db2c:	d402      	bmi.n	800db34 <_printf_i+0xe8>
 800db2e:	0649      	lsls	r1, r1, #25
 800db30:	bf48      	it	mi
 800db32:	b2ad      	uxthmi	r5, r5
 800db34:	2f6f      	cmp	r7, #111	@ 0x6f
 800db36:	4852      	ldr	r0, [pc, #328]	@ (800dc80 <_printf_i+0x234>)
 800db38:	6033      	str	r3, [r6, #0]
 800db3a:	bf14      	ite	ne
 800db3c:	230a      	movne	r3, #10
 800db3e:	2308      	moveq	r3, #8
 800db40:	2100      	movs	r1, #0
 800db42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db46:	6866      	ldr	r6, [r4, #4]
 800db48:	60a6      	str	r6, [r4, #8]
 800db4a:	2e00      	cmp	r6, #0
 800db4c:	db05      	blt.n	800db5a <_printf_i+0x10e>
 800db4e:	6821      	ldr	r1, [r4, #0]
 800db50:	432e      	orrs	r6, r5
 800db52:	f021 0104 	bic.w	r1, r1, #4
 800db56:	6021      	str	r1, [r4, #0]
 800db58:	d04b      	beq.n	800dbf2 <_printf_i+0x1a6>
 800db5a:	4616      	mov	r6, r2
 800db5c:	fbb5 f1f3 	udiv	r1, r5, r3
 800db60:	fb03 5711 	mls	r7, r3, r1, r5
 800db64:	5dc7      	ldrb	r7, [r0, r7]
 800db66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db6a:	462f      	mov	r7, r5
 800db6c:	42bb      	cmp	r3, r7
 800db6e:	460d      	mov	r5, r1
 800db70:	d9f4      	bls.n	800db5c <_printf_i+0x110>
 800db72:	2b08      	cmp	r3, #8
 800db74:	d10b      	bne.n	800db8e <_printf_i+0x142>
 800db76:	6823      	ldr	r3, [r4, #0]
 800db78:	07df      	lsls	r7, r3, #31
 800db7a:	d508      	bpl.n	800db8e <_printf_i+0x142>
 800db7c:	6923      	ldr	r3, [r4, #16]
 800db7e:	6861      	ldr	r1, [r4, #4]
 800db80:	4299      	cmp	r1, r3
 800db82:	bfde      	ittt	le
 800db84:	2330      	movle	r3, #48	@ 0x30
 800db86:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800db8e:	1b92      	subs	r2, r2, r6
 800db90:	6122      	str	r2, [r4, #16]
 800db92:	f8cd a000 	str.w	sl, [sp]
 800db96:	464b      	mov	r3, r9
 800db98:	aa03      	add	r2, sp, #12
 800db9a:	4621      	mov	r1, r4
 800db9c:	4640      	mov	r0, r8
 800db9e:	f7ff fee7 	bl	800d970 <_printf_common>
 800dba2:	3001      	adds	r0, #1
 800dba4:	d14a      	bne.n	800dc3c <_printf_i+0x1f0>
 800dba6:	f04f 30ff 	mov.w	r0, #4294967295
 800dbaa:	b004      	add	sp, #16
 800dbac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbb0:	6823      	ldr	r3, [r4, #0]
 800dbb2:	f043 0320 	orr.w	r3, r3, #32
 800dbb6:	6023      	str	r3, [r4, #0]
 800dbb8:	4832      	ldr	r0, [pc, #200]	@ (800dc84 <_printf_i+0x238>)
 800dbba:	2778      	movs	r7, #120	@ 0x78
 800dbbc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dbc0:	6823      	ldr	r3, [r4, #0]
 800dbc2:	6831      	ldr	r1, [r6, #0]
 800dbc4:	061f      	lsls	r7, r3, #24
 800dbc6:	f851 5b04 	ldr.w	r5, [r1], #4
 800dbca:	d402      	bmi.n	800dbd2 <_printf_i+0x186>
 800dbcc:	065f      	lsls	r7, r3, #25
 800dbce:	bf48      	it	mi
 800dbd0:	b2ad      	uxthmi	r5, r5
 800dbd2:	6031      	str	r1, [r6, #0]
 800dbd4:	07d9      	lsls	r1, r3, #31
 800dbd6:	bf44      	itt	mi
 800dbd8:	f043 0320 	orrmi.w	r3, r3, #32
 800dbdc:	6023      	strmi	r3, [r4, #0]
 800dbde:	b11d      	cbz	r5, 800dbe8 <_printf_i+0x19c>
 800dbe0:	2310      	movs	r3, #16
 800dbe2:	e7ad      	b.n	800db40 <_printf_i+0xf4>
 800dbe4:	4826      	ldr	r0, [pc, #152]	@ (800dc80 <_printf_i+0x234>)
 800dbe6:	e7e9      	b.n	800dbbc <_printf_i+0x170>
 800dbe8:	6823      	ldr	r3, [r4, #0]
 800dbea:	f023 0320 	bic.w	r3, r3, #32
 800dbee:	6023      	str	r3, [r4, #0]
 800dbf0:	e7f6      	b.n	800dbe0 <_printf_i+0x194>
 800dbf2:	4616      	mov	r6, r2
 800dbf4:	e7bd      	b.n	800db72 <_printf_i+0x126>
 800dbf6:	6833      	ldr	r3, [r6, #0]
 800dbf8:	6825      	ldr	r5, [r4, #0]
 800dbfa:	6961      	ldr	r1, [r4, #20]
 800dbfc:	1d18      	adds	r0, r3, #4
 800dbfe:	6030      	str	r0, [r6, #0]
 800dc00:	062e      	lsls	r6, r5, #24
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	d501      	bpl.n	800dc0a <_printf_i+0x1be>
 800dc06:	6019      	str	r1, [r3, #0]
 800dc08:	e002      	b.n	800dc10 <_printf_i+0x1c4>
 800dc0a:	0668      	lsls	r0, r5, #25
 800dc0c:	d5fb      	bpl.n	800dc06 <_printf_i+0x1ba>
 800dc0e:	8019      	strh	r1, [r3, #0]
 800dc10:	2300      	movs	r3, #0
 800dc12:	6123      	str	r3, [r4, #16]
 800dc14:	4616      	mov	r6, r2
 800dc16:	e7bc      	b.n	800db92 <_printf_i+0x146>
 800dc18:	6833      	ldr	r3, [r6, #0]
 800dc1a:	1d1a      	adds	r2, r3, #4
 800dc1c:	6032      	str	r2, [r6, #0]
 800dc1e:	681e      	ldr	r6, [r3, #0]
 800dc20:	6862      	ldr	r2, [r4, #4]
 800dc22:	2100      	movs	r1, #0
 800dc24:	4630      	mov	r0, r6
 800dc26:	f7f2 fb5b 	bl	80002e0 <memchr>
 800dc2a:	b108      	cbz	r0, 800dc30 <_printf_i+0x1e4>
 800dc2c:	1b80      	subs	r0, r0, r6
 800dc2e:	6060      	str	r0, [r4, #4]
 800dc30:	6863      	ldr	r3, [r4, #4]
 800dc32:	6123      	str	r3, [r4, #16]
 800dc34:	2300      	movs	r3, #0
 800dc36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc3a:	e7aa      	b.n	800db92 <_printf_i+0x146>
 800dc3c:	6923      	ldr	r3, [r4, #16]
 800dc3e:	4632      	mov	r2, r6
 800dc40:	4649      	mov	r1, r9
 800dc42:	4640      	mov	r0, r8
 800dc44:	47d0      	blx	sl
 800dc46:	3001      	adds	r0, #1
 800dc48:	d0ad      	beq.n	800dba6 <_printf_i+0x15a>
 800dc4a:	6823      	ldr	r3, [r4, #0]
 800dc4c:	079b      	lsls	r3, r3, #30
 800dc4e:	d413      	bmi.n	800dc78 <_printf_i+0x22c>
 800dc50:	68e0      	ldr	r0, [r4, #12]
 800dc52:	9b03      	ldr	r3, [sp, #12]
 800dc54:	4298      	cmp	r0, r3
 800dc56:	bfb8      	it	lt
 800dc58:	4618      	movlt	r0, r3
 800dc5a:	e7a6      	b.n	800dbaa <_printf_i+0x15e>
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	4632      	mov	r2, r6
 800dc60:	4649      	mov	r1, r9
 800dc62:	4640      	mov	r0, r8
 800dc64:	47d0      	blx	sl
 800dc66:	3001      	adds	r0, #1
 800dc68:	d09d      	beq.n	800dba6 <_printf_i+0x15a>
 800dc6a:	3501      	adds	r5, #1
 800dc6c:	68e3      	ldr	r3, [r4, #12]
 800dc6e:	9903      	ldr	r1, [sp, #12]
 800dc70:	1a5b      	subs	r3, r3, r1
 800dc72:	42ab      	cmp	r3, r5
 800dc74:	dcf2      	bgt.n	800dc5c <_printf_i+0x210>
 800dc76:	e7eb      	b.n	800dc50 <_printf_i+0x204>
 800dc78:	2500      	movs	r5, #0
 800dc7a:	f104 0619 	add.w	r6, r4, #25
 800dc7e:	e7f5      	b.n	800dc6c <_printf_i+0x220>
 800dc80:	0800e26c 	.word	0x0800e26c
 800dc84:	0800e27d 	.word	0x0800e27d

0800dc88 <__swbuf_r>:
 800dc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc8a:	460e      	mov	r6, r1
 800dc8c:	4614      	mov	r4, r2
 800dc8e:	4605      	mov	r5, r0
 800dc90:	b118      	cbz	r0, 800dc9a <__swbuf_r+0x12>
 800dc92:	6a03      	ldr	r3, [r0, #32]
 800dc94:	b90b      	cbnz	r3, 800dc9a <__swbuf_r+0x12>
 800dc96:	f7ff fa23 	bl	800d0e0 <__sinit>
 800dc9a:	69a3      	ldr	r3, [r4, #24]
 800dc9c:	60a3      	str	r3, [r4, #8]
 800dc9e:	89a3      	ldrh	r3, [r4, #12]
 800dca0:	071a      	lsls	r2, r3, #28
 800dca2:	d501      	bpl.n	800dca8 <__swbuf_r+0x20>
 800dca4:	6923      	ldr	r3, [r4, #16]
 800dca6:	b943      	cbnz	r3, 800dcba <__swbuf_r+0x32>
 800dca8:	4621      	mov	r1, r4
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f000 f82a 	bl	800dd04 <__swsetup_r>
 800dcb0:	b118      	cbz	r0, 800dcba <__swbuf_r+0x32>
 800dcb2:	f04f 37ff 	mov.w	r7, #4294967295
 800dcb6:	4638      	mov	r0, r7
 800dcb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	6922      	ldr	r2, [r4, #16]
 800dcbe:	1a98      	subs	r0, r3, r2
 800dcc0:	6963      	ldr	r3, [r4, #20]
 800dcc2:	b2f6      	uxtb	r6, r6
 800dcc4:	4283      	cmp	r3, r0
 800dcc6:	4637      	mov	r7, r6
 800dcc8:	dc05      	bgt.n	800dcd6 <__swbuf_r+0x4e>
 800dcca:	4621      	mov	r1, r4
 800dccc:	4628      	mov	r0, r5
 800dcce:	f7ff fcbd 	bl	800d64c <_fflush_r>
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	d1ed      	bne.n	800dcb2 <__swbuf_r+0x2a>
 800dcd6:	68a3      	ldr	r3, [r4, #8]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	60a3      	str	r3, [r4, #8]
 800dcdc:	6823      	ldr	r3, [r4, #0]
 800dcde:	1c5a      	adds	r2, r3, #1
 800dce0:	6022      	str	r2, [r4, #0]
 800dce2:	701e      	strb	r6, [r3, #0]
 800dce4:	6962      	ldr	r2, [r4, #20]
 800dce6:	1c43      	adds	r3, r0, #1
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d004      	beq.n	800dcf6 <__swbuf_r+0x6e>
 800dcec:	89a3      	ldrh	r3, [r4, #12]
 800dcee:	07db      	lsls	r3, r3, #31
 800dcf0:	d5e1      	bpl.n	800dcb6 <__swbuf_r+0x2e>
 800dcf2:	2e0a      	cmp	r6, #10
 800dcf4:	d1df      	bne.n	800dcb6 <__swbuf_r+0x2e>
 800dcf6:	4621      	mov	r1, r4
 800dcf8:	4628      	mov	r0, r5
 800dcfa:	f7ff fca7 	bl	800d64c <_fflush_r>
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d0d9      	beq.n	800dcb6 <__swbuf_r+0x2e>
 800dd02:	e7d6      	b.n	800dcb2 <__swbuf_r+0x2a>

0800dd04 <__swsetup_r>:
 800dd04:	b538      	push	{r3, r4, r5, lr}
 800dd06:	4b29      	ldr	r3, [pc, #164]	@ (800ddac <__swsetup_r+0xa8>)
 800dd08:	4605      	mov	r5, r0
 800dd0a:	6818      	ldr	r0, [r3, #0]
 800dd0c:	460c      	mov	r4, r1
 800dd0e:	b118      	cbz	r0, 800dd18 <__swsetup_r+0x14>
 800dd10:	6a03      	ldr	r3, [r0, #32]
 800dd12:	b90b      	cbnz	r3, 800dd18 <__swsetup_r+0x14>
 800dd14:	f7ff f9e4 	bl	800d0e0 <__sinit>
 800dd18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd1c:	0719      	lsls	r1, r3, #28
 800dd1e:	d422      	bmi.n	800dd66 <__swsetup_r+0x62>
 800dd20:	06da      	lsls	r2, r3, #27
 800dd22:	d407      	bmi.n	800dd34 <__swsetup_r+0x30>
 800dd24:	2209      	movs	r2, #9
 800dd26:	602a      	str	r2, [r5, #0]
 800dd28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd2c:	81a3      	strh	r3, [r4, #12]
 800dd2e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd32:	e033      	b.n	800dd9c <__swsetup_r+0x98>
 800dd34:	0758      	lsls	r0, r3, #29
 800dd36:	d512      	bpl.n	800dd5e <__swsetup_r+0x5a>
 800dd38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd3a:	b141      	cbz	r1, 800dd4e <__swsetup_r+0x4a>
 800dd3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd40:	4299      	cmp	r1, r3
 800dd42:	d002      	beq.n	800dd4a <__swsetup_r+0x46>
 800dd44:	4628      	mov	r0, r5
 800dd46:	f7ff fafd 	bl	800d344 <_free_r>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd4e:	89a3      	ldrh	r3, [r4, #12]
 800dd50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dd54:	81a3      	strh	r3, [r4, #12]
 800dd56:	2300      	movs	r3, #0
 800dd58:	6063      	str	r3, [r4, #4]
 800dd5a:	6923      	ldr	r3, [r4, #16]
 800dd5c:	6023      	str	r3, [r4, #0]
 800dd5e:	89a3      	ldrh	r3, [r4, #12]
 800dd60:	f043 0308 	orr.w	r3, r3, #8
 800dd64:	81a3      	strh	r3, [r4, #12]
 800dd66:	6923      	ldr	r3, [r4, #16]
 800dd68:	b94b      	cbnz	r3, 800dd7e <__swsetup_r+0x7a>
 800dd6a:	89a3      	ldrh	r3, [r4, #12]
 800dd6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd74:	d003      	beq.n	800dd7e <__swsetup_r+0x7a>
 800dd76:	4621      	mov	r1, r4
 800dd78:	4628      	mov	r0, r5
 800dd7a:	f000 f883 	bl	800de84 <__smakebuf_r>
 800dd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd82:	f013 0201 	ands.w	r2, r3, #1
 800dd86:	d00a      	beq.n	800dd9e <__swsetup_r+0x9a>
 800dd88:	2200      	movs	r2, #0
 800dd8a:	60a2      	str	r2, [r4, #8]
 800dd8c:	6962      	ldr	r2, [r4, #20]
 800dd8e:	4252      	negs	r2, r2
 800dd90:	61a2      	str	r2, [r4, #24]
 800dd92:	6922      	ldr	r2, [r4, #16]
 800dd94:	b942      	cbnz	r2, 800dda8 <__swsetup_r+0xa4>
 800dd96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dd9a:	d1c5      	bne.n	800dd28 <__swsetup_r+0x24>
 800dd9c:	bd38      	pop	{r3, r4, r5, pc}
 800dd9e:	0799      	lsls	r1, r3, #30
 800dda0:	bf58      	it	pl
 800dda2:	6962      	ldrpl	r2, [r4, #20]
 800dda4:	60a2      	str	r2, [r4, #8]
 800dda6:	e7f4      	b.n	800dd92 <__swsetup_r+0x8e>
 800dda8:	2000      	movs	r0, #0
 800ddaa:	e7f7      	b.n	800dd9c <__swsetup_r+0x98>
 800ddac:	2400003c 	.word	0x2400003c

0800ddb0 <_raise_r>:
 800ddb0:	291f      	cmp	r1, #31
 800ddb2:	b538      	push	{r3, r4, r5, lr}
 800ddb4:	4605      	mov	r5, r0
 800ddb6:	460c      	mov	r4, r1
 800ddb8:	d904      	bls.n	800ddc4 <_raise_r+0x14>
 800ddba:	2316      	movs	r3, #22
 800ddbc:	6003      	str	r3, [r0, #0]
 800ddbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ddc2:	bd38      	pop	{r3, r4, r5, pc}
 800ddc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ddc6:	b112      	cbz	r2, 800ddce <_raise_r+0x1e>
 800ddc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ddcc:	b94b      	cbnz	r3, 800dde2 <_raise_r+0x32>
 800ddce:	4628      	mov	r0, r5
 800ddd0:	f000 f830 	bl	800de34 <_getpid_r>
 800ddd4:	4622      	mov	r2, r4
 800ddd6:	4601      	mov	r1, r0
 800ddd8:	4628      	mov	r0, r5
 800ddda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddde:	f000 b817 	b.w	800de10 <_kill_r>
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d00a      	beq.n	800ddfc <_raise_r+0x4c>
 800dde6:	1c59      	adds	r1, r3, #1
 800dde8:	d103      	bne.n	800ddf2 <_raise_r+0x42>
 800ddea:	2316      	movs	r3, #22
 800ddec:	6003      	str	r3, [r0, #0]
 800ddee:	2001      	movs	r0, #1
 800ddf0:	e7e7      	b.n	800ddc2 <_raise_r+0x12>
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ddf8:	4620      	mov	r0, r4
 800ddfa:	4798      	blx	r3
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	e7e0      	b.n	800ddc2 <_raise_r+0x12>

0800de00 <raise>:
 800de00:	4b02      	ldr	r3, [pc, #8]	@ (800de0c <raise+0xc>)
 800de02:	4601      	mov	r1, r0
 800de04:	6818      	ldr	r0, [r3, #0]
 800de06:	f7ff bfd3 	b.w	800ddb0 <_raise_r>
 800de0a:	bf00      	nop
 800de0c:	2400003c 	.word	0x2400003c

0800de10 <_kill_r>:
 800de10:	b538      	push	{r3, r4, r5, lr}
 800de12:	4d07      	ldr	r5, [pc, #28]	@ (800de30 <_kill_r+0x20>)
 800de14:	2300      	movs	r3, #0
 800de16:	4604      	mov	r4, r0
 800de18:	4608      	mov	r0, r1
 800de1a:	4611      	mov	r1, r2
 800de1c:	602b      	str	r3, [r5, #0]
 800de1e:	f7f7 f917 	bl	8005050 <_kill>
 800de22:	1c43      	adds	r3, r0, #1
 800de24:	d102      	bne.n	800de2c <_kill_r+0x1c>
 800de26:	682b      	ldr	r3, [r5, #0]
 800de28:	b103      	cbz	r3, 800de2c <_kill_r+0x1c>
 800de2a:	6023      	str	r3, [r4, #0]
 800de2c:	bd38      	pop	{r3, r4, r5, pc}
 800de2e:	bf00      	nop
 800de30:	24012dc8 	.word	0x24012dc8

0800de34 <_getpid_r>:
 800de34:	f7f7 b904 	b.w	8005040 <_getpid>

0800de38 <__swhatbuf_r>:
 800de38:	b570      	push	{r4, r5, r6, lr}
 800de3a:	460c      	mov	r4, r1
 800de3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de40:	2900      	cmp	r1, #0
 800de42:	b096      	sub	sp, #88	@ 0x58
 800de44:	4615      	mov	r5, r2
 800de46:	461e      	mov	r6, r3
 800de48:	da0d      	bge.n	800de66 <__swhatbuf_r+0x2e>
 800de4a:	89a3      	ldrh	r3, [r4, #12]
 800de4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800de50:	f04f 0100 	mov.w	r1, #0
 800de54:	bf14      	ite	ne
 800de56:	2340      	movne	r3, #64	@ 0x40
 800de58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800de5c:	2000      	movs	r0, #0
 800de5e:	6031      	str	r1, [r6, #0]
 800de60:	602b      	str	r3, [r5, #0]
 800de62:	b016      	add	sp, #88	@ 0x58
 800de64:	bd70      	pop	{r4, r5, r6, pc}
 800de66:	466a      	mov	r2, sp
 800de68:	f000 f848 	bl	800defc <_fstat_r>
 800de6c:	2800      	cmp	r0, #0
 800de6e:	dbec      	blt.n	800de4a <__swhatbuf_r+0x12>
 800de70:	9901      	ldr	r1, [sp, #4]
 800de72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800de76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800de7a:	4259      	negs	r1, r3
 800de7c:	4159      	adcs	r1, r3
 800de7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de82:	e7eb      	b.n	800de5c <__swhatbuf_r+0x24>

0800de84 <__smakebuf_r>:
 800de84:	898b      	ldrh	r3, [r1, #12]
 800de86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de88:	079d      	lsls	r5, r3, #30
 800de8a:	4606      	mov	r6, r0
 800de8c:	460c      	mov	r4, r1
 800de8e:	d507      	bpl.n	800dea0 <__smakebuf_r+0x1c>
 800de90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800de94:	6023      	str	r3, [r4, #0]
 800de96:	6123      	str	r3, [r4, #16]
 800de98:	2301      	movs	r3, #1
 800de9a:	6163      	str	r3, [r4, #20]
 800de9c:	b003      	add	sp, #12
 800de9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dea0:	ab01      	add	r3, sp, #4
 800dea2:	466a      	mov	r2, sp
 800dea4:	f7ff ffc8 	bl	800de38 <__swhatbuf_r>
 800dea8:	9f00      	ldr	r7, [sp, #0]
 800deaa:	4605      	mov	r5, r0
 800deac:	4639      	mov	r1, r7
 800deae:	4630      	mov	r0, r6
 800deb0:	f7ff fabc 	bl	800d42c <_malloc_r>
 800deb4:	b948      	cbnz	r0, 800deca <__smakebuf_r+0x46>
 800deb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deba:	059a      	lsls	r2, r3, #22
 800debc:	d4ee      	bmi.n	800de9c <__smakebuf_r+0x18>
 800debe:	f023 0303 	bic.w	r3, r3, #3
 800dec2:	f043 0302 	orr.w	r3, r3, #2
 800dec6:	81a3      	strh	r3, [r4, #12]
 800dec8:	e7e2      	b.n	800de90 <__smakebuf_r+0xc>
 800deca:	89a3      	ldrh	r3, [r4, #12]
 800decc:	6020      	str	r0, [r4, #0]
 800dece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ded2:	81a3      	strh	r3, [r4, #12]
 800ded4:	9b01      	ldr	r3, [sp, #4]
 800ded6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800deda:	b15b      	cbz	r3, 800def4 <__smakebuf_r+0x70>
 800dedc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dee0:	4630      	mov	r0, r6
 800dee2:	f000 f81d 	bl	800df20 <_isatty_r>
 800dee6:	b128      	cbz	r0, 800def4 <__smakebuf_r+0x70>
 800dee8:	89a3      	ldrh	r3, [r4, #12]
 800deea:	f023 0303 	bic.w	r3, r3, #3
 800deee:	f043 0301 	orr.w	r3, r3, #1
 800def2:	81a3      	strh	r3, [r4, #12]
 800def4:	89a3      	ldrh	r3, [r4, #12]
 800def6:	431d      	orrs	r5, r3
 800def8:	81a5      	strh	r5, [r4, #12]
 800defa:	e7cf      	b.n	800de9c <__smakebuf_r+0x18>

0800defc <_fstat_r>:
 800defc:	b538      	push	{r3, r4, r5, lr}
 800defe:	4d07      	ldr	r5, [pc, #28]	@ (800df1c <_fstat_r+0x20>)
 800df00:	2300      	movs	r3, #0
 800df02:	4604      	mov	r4, r0
 800df04:	4608      	mov	r0, r1
 800df06:	4611      	mov	r1, r2
 800df08:	602b      	str	r3, [r5, #0]
 800df0a:	f7f7 f901 	bl	8005110 <_fstat>
 800df0e:	1c43      	adds	r3, r0, #1
 800df10:	d102      	bne.n	800df18 <_fstat_r+0x1c>
 800df12:	682b      	ldr	r3, [r5, #0]
 800df14:	b103      	cbz	r3, 800df18 <_fstat_r+0x1c>
 800df16:	6023      	str	r3, [r4, #0]
 800df18:	bd38      	pop	{r3, r4, r5, pc}
 800df1a:	bf00      	nop
 800df1c:	24012dc8 	.word	0x24012dc8

0800df20 <_isatty_r>:
 800df20:	b538      	push	{r3, r4, r5, lr}
 800df22:	4d06      	ldr	r5, [pc, #24]	@ (800df3c <_isatty_r+0x1c>)
 800df24:	2300      	movs	r3, #0
 800df26:	4604      	mov	r4, r0
 800df28:	4608      	mov	r0, r1
 800df2a:	602b      	str	r3, [r5, #0]
 800df2c:	f7f7 f900 	bl	8005130 <_isatty>
 800df30:	1c43      	adds	r3, r0, #1
 800df32:	d102      	bne.n	800df3a <_isatty_r+0x1a>
 800df34:	682b      	ldr	r3, [r5, #0]
 800df36:	b103      	cbz	r3, 800df3a <_isatty_r+0x1a>
 800df38:	6023      	str	r3, [r4, #0]
 800df3a:	bd38      	pop	{r3, r4, r5, pc}
 800df3c:	24012dc8 	.word	0x24012dc8

0800df40 <_init>:
 800df40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df42:	bf00      	nop
 800df44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df46:	bc08      	pop	{r3}
 800df48:	469e      	mov	lr, r3
 800df4a:	4770      	bx	lr

0800df4c <_fini>:
 800df4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df4e:	bf00      	nop
 800df50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df52:	bc08      	pop	{r3}
 800df54:	469e      	mov	lr, r3
 800df56:	4770      	bx	lr
